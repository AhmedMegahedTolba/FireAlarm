
Fire_Alarm_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d6  00800060  00007b2c  00007bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000052  00800236  00800236  00007d96  2**0
                  ALLOC
  3 .stab         00006408  00000000  00000000  00007d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000228a  00000000  00000000  0000e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0001042a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ed  00000000  00000000  000105ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002fc5  00000000  00000000  000107b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014a9  00000000  00000000  0001377c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014a6  00000000  00000000  00014c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000160cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000350  00000000  00000000  0001628c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002280  00000000  00000000  000165dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0001885c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 62 1f 	jmp	0x3ec4	; 0x3ec4 <__vector_1>
       8:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <__vector_2>
       c:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 1c 3a 	jmp	0x7438	; 0x7438 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 e9 39 	jmp	0x73d2	; 0x73d2 <__vector_15>
      40:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	fb e7       	ldi	r31, 0x7B	; 123
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <main>
      8a:	0c 94 94 3d 	jmp	0x7b28	; 0x7b28 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 26 12 	call	0x244c	; 0x244c <__subsf3>
      be:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__divdi3>:
      ea:	a2 e7       	ldi	r26, 0x72	; 114
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 3d 	jmp	0x7aba	; 0x7aba <__prologue_saves__>
      f6:	98 2e       	mov	r9, r24
      f8:	89 2e       	mov	r8, r25
      fa:	71 2e       	mov	r7, r17
      fc:	88 e0       	ldi	r24, 0x08	; 8
      fe:	fe 01       	movw	r30, r28
     100:	31 96       	adiw	r30, 0x01	; 1
     102:	df 01       	movw	r26, r30
     104:	68 2e       	mov	r6, r24
     106:	1d 92       	st	X+, r1
     108:	6a 94       	dec	r6
     10a:	e9 f7       	brne	.-6      	; 0x106 <__divdi3+0x1c>
     10c:	29 83       	std	Y+1, r18	; 0x01
     10e:	3a 83       	std	Y+2, r19	; 0x02
     110:	4b 83       	std	Y+3, r20	; 0x03
     112:	5c 83       	std	Y+4, r21	; 0x04
     114:	6d 83       	std	Y+5, r22	; 0x05
     116:	7e 83       	std	Y+6, r23	; 0x06
     118:	9f 82       	std	Y+7, r9	; 0x07
     11a:	98 87       	std	Y+8, r25	; 0x08
     11c:	fe 01       	movw	r30, r28
     11e:	39 96       	adiw	r30, 0x09	; 9
     120:	df 01       	movw	r26, r30
     122:	1d 92       	st	X+, r1
     124:	8a 95       	dec	r24
     126:	e9 f7       	brne	.-6      	; 0x122 <__divdi3+0x38>
     128:	a9 86       	std	Y+9, r10	; 0x09
     12a:	ba 86       	std	Y+10, r11	; 0x0a
     12c:	cb 86       	std	Y+11, r12	; 0x0b
     12e:	dc 86       	std	Y+12, r13	; 0x0c
     130:	ed 86       	std	Y+13, r14	; 0x0d
     132:	fe 86       	std	Y+14, r15	; 0x0e
     134:	0f 87       	std	Y+15, r16	; 0x0f
     136:	18 8b       	std	Y+16, r17	; 0x10
     138:	8d 81       	ldd	r24, Y+5	; 0x05
     13a:	9e 81       	ldd	r25, Y+6	; 0x06
     13c:	af 81       	ldd	r26, Y+7	; 0x07
     13e:	b8 85       	ldd	r27, Y+8	; 0x08
     140:	b7 fd       	sbrc	r27, 7
     142:	07 c0       	rjmp	.+14     	; 0x152 <__divdi3+0x68>
     144:	e1 96       	adiw	r28, 0x31	; 49
     146:	1c ae       	std	Y+60, r1	; 0x3c
     148:	1d ae       	std	Y+61, r1	; 0x3d
     14a:	1e ae       	std	Y+62, r1	; 0x3e
     14c:	1f ae       	std	Y+63, r1	; 0x3f
     14e:	e1 97       	sbiw	r28, 0x31	; 49
     150:	64 c0       	rjmp	.+200    	; 0x21a <__divdi3+0x130>
     152:	21 95       	neg	r18
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	12 16       	cp	r1, r18
     158:	08 f0       	brcs	.+2      	; 0x15c <__divdi3+0x72>
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	31 95       	neg	r19
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	13 16       	cp	r1, r19
     162:	08 f0       	brcs	.+2      	; 0x166 <__divdi3+0x7c>
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	b3 2f       	mov	r27, r19
     168:	b8 1b       	sub	r27, r24
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	3b 17       	cp	r19, r27
     16e:	08 f0       	brcs	.+2      	; 0x172 <__divdi3+0x88>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	98 2b       	or	r25, r24
     174:	41 95       	neg	r20
     176:	31 e0       	ldi	r19, 0x01	; 1
     178:	14 16       	cp	r1, r20
     17a:	08 f0       	brcs	.+2      	; 0x17e <__divdi3+0x94>
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	a4 2f       	mov	r26, r20
     180:	a9 1b       	sub	r26, r25
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	4a 17       	cp	r20, r26
     186:	08 f0       	brcs	.+2      	; 0x18a <__divdi3+0xa0>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	38 2b       	or	r19, r24
     18c:	51 95       	neg	r21
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	15 16       	cp	r1, r21
     192:	08 f0       	brcs	.+2      	; 0x196 <__divdi3+0xac>
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	f5 2f       	mov	r31, r21
     198:	f3 1b       	sub	r31, r19
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	5f 17       	cp	r21, r31
     19e:	08 f0       	brcs	.+2      	; 0x1a2 <__divdi3+0xb8>
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	98 2b       	or	r25, r24
     1a4:	61 95       	neg	r22
     1a6:	31 e0       	ldi	r19, 0x01	; 1
     1a8:	16 16       	cp	r1, r22
     1aa:	08 f0       	brcs	.+2      	; 0x1ae <__divdi3+0xc4>
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	e6 2f       	mov	r30, r22
     1b0:	e9 1b       	sub	r30, r25
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	6e 17       	cp	r22, r30
     1b6:	08 f0       	brcs	.+2      	; 0x1ba <__divdi3+0xd0>
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	38 2b       	or	r19, r24
     1bc:	71 95       	neg	r23
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	17 16       	cp	r1, r23
     1c2:	08 f0       	brcs	.+2      	; 0x1c6 <__divdi3+0xdc>
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	57 2f       	mov	r21, r23
     1c8:	53 1b       	sub	r21, r19
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	75 17       	cp	r23, r21
     1ce:	08 f0       	brcs	.+2      	; 0x1d2 <__divdi3+0xe8>
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	48 2b       	or	r20, r24
     1d4:	89 2d       	mov	r24, r9
     1d6:	81 95       	neg	r24
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	18 16       	cp	r1, r24
     1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__divdi3+0xf6>
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	68 2e       	mov	r6, r24
     1e2:	64 1a       	sub	r6, r20
     1e4:	46 2d       	mov	r20, r6
     1e6:	31 e0       	ldi	r19, 0x01	; 1
     1e8:	86 15       	cp	r24, r6
     1ea:	08 f0       	brcs	.+2      	; 0x1ee <__divdi3+0x104>
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	93 2b       	or	r25, r19
     1f0:	88 2d       	mov	r24, r8
     1f2:	81 95       	neg	r24
     1f4:	89 1b       	sub	r24, r25
     1f6:	29 83       	std	Y+1, r18	; 0x01
     1f8:	ba 83       	std	Y+2, r27	; 0x02
     1fa:	ab 83       	std	Y+3, r26	; 0x03
     1fc:	fc 83       	std	Y+4, r31	; 0x04
     1fe:	ed 83       	std	Y+5, r30	; 0x05
     200:	5e 83       	std	Y+6, r21	; 0x06
     202:	4f 83       	std	Y+7, r20	; 0x07
     204:	88 87       	std	Y+8, r24	; 0x08
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	3f ef       	ldi	r19, 0xFF	; 255
     20a:	4f ef       	ldi	r20, 0xFF	; 255
     20c:	5f ef       	ldi	r21, 0xFF	; 255
     20e:	e1 96       	adiw	r28, 0x31	; 49
     210:	2c af       	std	Y+60, r18	; 0x3c
     212:	3d af       	std	Y+61, r19	; 0x3d
     214:	4e af       	std	Y+62, r20	; 0x3e
     216:	5f af       	std	Y+63, r21	; 0x3f
     218:	e1 97       	sbiw	r28, 0x31	; 49
     21a:	8d 85       	ldd	r24, Y+13	; 0x0d
     21c:	9e 85       	ldd	r25, Y+14	; 0x0e
     21e:	af 85       	ldd	r26, Y+15	; 0x0f
     220:	b8 89       	ldd	r27, Y+16	; 0x10
     222:	b7 ff       	sbrs	r27, 7
     224:	6a c0       	rjmp	.+212    	; 0x2fa <__divdi3+0x210>
     226:	e1 96       	adiw	r28, 0x31	; 49
     228:	4c ad       	ldd	r20, Y+60	; 0x3c
     22a:	5d ad       	ldd	r21, Y+61	; 0x3d
     22c:	6e ad       	ldd	r22, Y+62	; 0x3e
     22e:	7f ad       	ldd	r23, Y+63	; 0x3f
     230:	e1 97       	sbiw	r28, 0x31	; 49
     232:	40 95       	com	r20
     234:	50 95       	com	r21
     236:	60 95       	com	r22
     238:	70 95       	com	r23
     23a:	e1 96       	adiw	r28, 0x31	; 49
     23c:	4c af       	std	Y+60, r20	; 0x3c
     23e:	5d af       	std	Y+61, r21	; 0x3d
     240:	6e af       	std	Y+62, r22	; 0x3e
     242:	7f af       	std	Y+63, r23	; 0x3f
     244:	e1 97       	sbiw	r28, 0x31	; 49
     246:	a1 94       	neg	r10
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	1a 14       	cp	r1, r10
     24c:	08 f0       	brcs	.+2      	; 0x250 <__divdi3+0x166>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	b1 94       	neg	r11
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	1b 14       	cp	r1, r11
     256:	08 f0       	brcs	.+2      	; 0x25a <__divdi3+0x170>
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	6b 2d       	mov	r22, r11
     25c:	68 1b       	sub	r22, r24
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	b6 16       	cp	r11, r22
     262:	08 f0       	brcs	.+2      	; 0x266 <__divdi3+0x17c>
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	98 2b       	or	r25, r24
     268:	c1 94       	neg	r12
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	1c 14       	cp	r1, r12
     26e:	08 f0       	brcs	.+2      	; 0x272 <__divdi3+0x188>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	5c 2d       	mov	r21, r12
     274:	59 1b       	sub	r21, r25
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	c5 16       	cp	r12, r21
     27a:	08 f0       	brcs	.+2      	; 0x27e <__divdi3+0x194>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	28 2b       	or	r18, r24
     280:	d1 94       	neg	r13
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	1d 14       	cp	r1, r13
     286:	08 f0       	brcs	.+2      	; 0x28a <__divdi3+0x1a0>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	4d 2d       	mov	r20, r13
     28c:	42 1b       	sub	r20, r18
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	d4 16       	cp	r13, r20
     292:	08 f0       	brcs	.+2      	; 0x296 <__divdi3+0x1ac>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	98 2b       	or	r25, r24
     298:	e1 94       	neg	r14
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	1e 14       	cp	r1, r14
     29e:	08 f0       	brcs	.+2      	; 0x2a2 <__divdi3+0x1b8>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	3e 2d       	mov	r19, r14
     2a4:	39 1b       	sub	r19, r25
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	e3 16       	cp	r14, r19
     2aa:	08 f0       	brcs	.+2      	; 0x2ae <__divdi3+0x1c4>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	28 2b       	or	r18, r24
     2b0:	f1 94       	neg	r15
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	1f 14       	cp	r1, r15
     2b6:	08 f0       	brcs	.+2      	; 0x2ba <__divdi3+0x1d0>
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	7f 2d       	mov	r23, r15
     2bc:	72 1b       	sub	r23, r18
     2be:	27 2f       	mov	r18, r23
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	f7 16       	cp	r15, r23
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <__divdi3+0x1de>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	98 2b       	or	r25, r24
     2ca:	01 95       	neg	r16
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	10 16       	cp	r1, r16
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__divdi3+0x1ea>
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	80 2f       	mov	r24, r16
     2d6:	89 1b       	sub	r24, r25
     2d8:	98 2f       	mov	r25, r24
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	09 17       	cp	r16, r25
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <__divdi3+0x1f8>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	18 2b       	or	r17, r24
     2e4:	87 2d       	mov	r24, r7
     2e6:	81 95       	neg	r24
     2e8:	81 1b       	sub	r24, r17
     2ea:	a9 86       	std	Y+9, r10	; 0x09
     2ec:	6a 87       	std	Y+10, r22	; 0x0a
     2ee:	5b 87       	std	Y+11, r21	; 0x0b
     2f0:	4c 87       	std	Y+12, r20	; 0x0c
     2f2:	3d 87       	std	Y+13, r19	; 0x0d
     2f4:	2e 87       	std	Y+14, r18	; 0x0e
     2f6:	9f 87       	std	Y+15, r25	; 0x0f
     2f8:	88 8b       	std	Y+16, r24	; 0x10
     2fa:	99 81       	ldd	r25, Y+1	; 0x01
     2fc:	2a 81       	ldd	r18, Y+2	; 0x02
     2fe:	3b 81       	ldd	r19, Y+3	; 0x03
     300:	4c 81       	ldd	r20, Y+4	; 0x04
     302:	5d 81       	ldd	r21, Y+5	; 0x05
     304:	6e 81       	ldd	r22, Y+6	; 0x06
     306:	7f 81       	ldd	r23, Y+7	; 0x07
     308:	a8 85       	ldd	r26, Y+8	; 0x08
     30a:	b9 85       	ldd	r27, Y+9	; 0x09
     30c:	1a 85       	ldd	r17, Y+10	; 0x0a
     30e:	0b 85       	ldd	r16, Y+11	; 0x0b
     310:	fc 84       	ldd	r15, Y+12	; 0x0c
     312:	ed 84       	ldd	r14, Y+13	; 0x0d
     314:	de 84       	ldd	r13, Y+14	; 0x0e
     316:	cf 84       	ldd	r12, Y+15	; 0x0f
     318:	b8 88       	ldd	r11, Y+16	; 0x10
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	e1 e1       	ldi	r30, 0x11	; 17
     31e:	8e 2e       	mov	r8, r30
     320:	91 2c       	mov	r9, r1
     322:	8c 0e       	add	r8, r28
     324:	9d 1e       	adc	r9, r29
     326:	f4 01       	movw	r30, r8
     328:	68 2e       	mov	r6, r24
     32a:	11 92       	st	Z+, r1
     32c:	6a 94       	dec	r6
     32e:	e9 f7       	brne	.-6      	; 0x32a <__divdi3+0x240>
     330:	99 8b       	std	Y+17, r25	; 0x11
     332:	2a 8b       	std	Y+18, r18	; 0x12
     334:	3b 8b       	std	Y+19, r19	; 0x13
     336:	4c 8b       	std	Y+20, r20	; 0x14
     338:	5d 8b       	std	Y+21, r21	; 0x15
     33a:	6e 8b       	std	Y+22, r22	; 0x16
     33c:	7f 8b       	std	Y+23, r23	; 0x17
     33e:	a8 8f       	std	Y+24, r26	; 0x18
     340:	9e 01       	movw	r18, r28
     342:	27 5e       	subi	r18, 0xE7	; 231
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	f9 01       	movw	r30, r18
     348:	11 92       	st	Z+, r1
     34a:	8a 95       	dec	r24
     34c:	e9 f7       	brne	.-6      	; 0x348 <__divdi3+0x25e>
     34e:	b9 8f       	std	Y+25, r27	; 0x19
     350:	1a 8f       	std	Y+26, r17	; 0x1a
     352:	0b 8f       	std	Y+27, r16	; 0x1b
     354:	fc 8e       	std	Y+28, r15	; 0x1c
     356:	ed 8e       	std	Y+29, r14	; 0x1d
     358:	de 8e       	std	Y+30, r13	; 0x1e
     35a:	cf 8e       	std	Y+31, r12	; 0x1f
     35c:	b8 a2       	std	Y+32, r11	; 0x20
     35e:	29 8c       	ldd	r2, Y+25	; 0x19
     360:	3a 8c       	ldd	r3, Y+26	; 0x1a
     362:	4b 8c       	ldd	r4, Y+27	; 0x1b
     364:	5c 8c       	ldd	r5, Y+28	; 0x1c
     366:	ed 8c       	ldd	r14, Y+29	; 0x1d
     368:	fe 8c       	ldd	r15, Y+30	; 0x1e
     36a:	0f 8d       	ldd	r16, Y+31	; 0x1f
     36c:	18 a1       	ldd	r17, Y+32	; 0x20
     36e:	69 88       	ldd	r6, Y+17	; 0x11
     370:	7a 88       	ldd	r7, Y+18	; 0x12
     372:	8b 88       	ldd	r8, Y+19	; 0x13
     374:	9c 88       	ldd	r9, Y+20	; 0x14
     376:	21 96       	adiw	r28, 0x01	; 1
     378:	6c ae       	std	Y+60, r6	; 0x3c
     37a:	7d ae       	std	Y+61, r7	; 0x3d
     37c:	8e ae       	std	Y+62, r8	; 0x3e
     37e:	9f ae       	std	Y+63, r9	; 0x3f
     380:	21 97       	sbiw	r28, 0x01	; 1
     382:	6d 88       	ldd	r6, Y+21	; 0x15
     384:	7e 88       	ldd	r7, Y+22	; 0x16
     386:	8f 88       	ldd	r8, Y+23	; 0x17
     388:	98 8c       	ldd	r9, Y+24	; 0x18
     38a:	e1 14       	cp	r14, r1
     38c:	f1 04       	cpc	r15, r1
     38e:	01 05       	cpc	r16, r1
     390:	11 05       	cpc	r17, r1
     392:	09 f0       	breq	.+2      	; 0x396 <__divdi3+0x2ac>
     394:	d9 c3       	rjmp	.+1970   	; 0xb48 <__stack+0x2e9>
     396:	62 14       	cp	r6, r2
     398:	73 04       	cpc	r7, r3
     39a:	84 04       	cpc	r8, r4
     39c:	95 04       	cpc	r9, r5
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <__divdi3+0x2b8>
     3a0:	57 c1       	rjmp	.+686    	; 0x650 <__divdi3+0x566>
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	20 16       	cp	r2, r16
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	30 06       	cpc	r3, r16
     3aa:	01 e0       	ldi	r16, 0x01	; 1
     3ac:	40 06       	cpc	r4, r16
     3ae:	00 e0       	ldi	r16, 0x00	; 0
     3b0:	50 06       	cpc	r5, r16
     3b2:	88 f4       	brcc	.+34     	; 0x3d6 <__divdi3+0x2ec>
     3b4:	1f ef       	ldi	r17, 0xFF	; 255
     3b6:	21 16       	cp	r2, r17
     3b8:	31 04       	cpc	r3, r1
     3ba:	41 04       	cpc	r4, r1
     3bc:	51 04       	cpc	r5, r1
     3be:	39 f0       	breq	.+14     	; 0x3ce <__divdi3+0x2e4>
     3c0:	30 f0       	brcs	.+12     	; 0x3ce <__divdi3+0x2e4>
     3c2:	48 e0       	ldi	r20, 0x08	; 8
     3c4:	e4 2e       	mov	r14, r20
     3c6:	f1 2c       	mov	r15, r1
     3c8:	01 2d       	mov	r16, r1
     3ca:	11 2d       	mov	r17, r1
     3cc:	18 c0       	rjmp	.+48     	; 0x3fe <__divdi3+0x314>
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	87 01       	movw	r16, r14
     3d4:	14 c0       	rjmp	.+40     	; 0x3fe <__divdi3+0x314>
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	22 16       	cp	r2, r18
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	32 06       	cpc	r3, r18
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	42 06       	cpc	r4, r18
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	52 06       	cpc	r5, r18
     3e6:	30 f0       	brcs	.+12     	; 0x3f4 <__divdi3+0x30a>
     3e8:	38 e1       	ldi	r19, 0x18	; 24
     3ea:	e3 2e       	mov	r14, r19
     3ec:	f1 2c       	mov	r15, r1
     3ee:	01 2d       	mov	r16, r1
     3f0:	11 2d       	mov	r17, r1
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__divdi3+0x314>
     3f4:	20 e1       	ldi	r18, 0x10	; 16
     3f6:	e2 2e       	mov	r14, r18
     3f8:	f1 2c       	mov	r15, r1
     3fa:	01 2d       	mov	r16, r1
     3fc:	11 2d       	mov	r17, r1
     3fe:	d2 01       	movw	r26, r4
     400:	c1 01       	movw	r24, r2
     402:	0e 2c       	mov	r0, r14
     404:	04 c0       	rjmp	.+8      	; 0x40e <__divdi3+0x324>
     406:	b6 95       	lsr	r27
     408:	a7 95       	ror	r26
     40a:	97 95       	ror	r25
     40c:	87 95       	ror	r24
     40e:	0a 94       	dec	r0
     410:	d2 f7       	brpl	.-12     	; 0x406 <__divdi3+0x31c>
     412:	86 50       	subi	r24, 0x06	; 6
     414:	9f 4f       	sbci	r25, 0xFF	; 255
     416:	dc 01       	movw	r26, r24
     418:	2c 91       	ld	r18, X
     41a:	80 e2       	ldi	r24, 0x20	; 32
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	8e 19       	sub	r24, r14
     424:	9f 09       	sbc	r25, r15
     426:	a0 0b       	sbc	r26, r16
     428:	b1 0b       	sbc	r27, r17
     42a:	7c 01       	movw	r14, r24
     42c:	8d 01       	movw	r16, r26
     42e:	e2 1a       	sub	r14, r18
     430:	f1 08       	sbc	r15, r1
     432:	01 09       	sbc	r16, r1
     434:	11 09       	sbc	r17, r1
     436:	e1 14       	cp	r14, r1
     438:	f1 04       	cpc	r15, r1
     43a:	01 05       	cpc	r16, r1
     43c:	11 05       	cpc	r17, r1
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <__divdi3+0x3ca>
     440:	0e 2c       	mov	r0, r14
     442:	04 c0       	rjmp	.+8      	; 0x44c <__divdi3+0x362>
     444:	22 0c       	add	r2, r2
     446:	33 1c       	adc	r3, r3
     448:	44 1c       	adc	r4, r4
     44a:	55 1c       	adc	r5, r5
     44c:	0a 94       	dec	r0
     44e:	d2 f7       	brpl	.-12     	; 0x444 <__divdi3+0x35a>
     450:	a4 01       	movw	r20, r8
     452:	93 01       	movw	r18, r6
     454:	0e 2c       	mov	r0, r14
     456:	04 c0       	rjmp	.+8      	; 0x460 <__divdi3+0x376>
     458:	22 0f       	add	r18, r18
     45a:	33 1f       	adc	r19, r19
     45c:	44 1f       	adc	r20, r20
     45e:	55 1f       	adc	r21, r21
     460:	0a 94       	dec	r0
     462:	d2 f7       	brpl	.-12     	; 0x458 <__divdi3+0x36e>
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	8e 19       	sub	r24, r14
     46a:	9f 09       	sbc	r25, r15
     46c:	21 96       	adiw	r28, 0x01	; 1
     46e:	6c ac       	ldd	r6, Y+60	; 0x3c
     470:	7d ac       	ldd	r7, Y+61	; 0x3d
     472:	8e ac       	ldd	r8, Y+62	; 0x3e
     474:	9f ac       	ldd	r9, Y+63	; 0x3f
     476:	21 97       	sbiw	r28, 0x01	; 1
     478:	04 c0       	rjmp	.+8      	; 0x482 <__divdi3+0x398>
     47a:	96 94       	lsr	r9
     47c:	87 94       	ror	r8
     47e:	77 94       	ror	r7
     480:	67 94       	ror	r6
     482:	8a 95       	dec	r24
     484:	d2 f7       	brpl	.-12     	; 0x47a <__divdi3+0x390>
     486:	62 2a       	or	r6, r18
     488:	73 2a       	or	r7, r19
     48a:	84 2a       	or	r8, r20
     48c:	95 2a       	or	r9, r21
     48e:	21 96       	adiw	r28, 0x01	; 1
     490:	ac ac       	ldd	r10, Y+60	; 0x3c
     492:	bd ac       	ldd	r11, Y+61	; 0x3d
     494:	ce ac       	ldd	r12, Y+62	; 0x3e
     496:	df ac       	ldd	r13, Y+63	; 0x3f
     498:	21 97       	sbiw	r28, 0x01	; 1
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__divdi3+0x3ba>
     49c:	aa 0c       	add	r10, r10
     49e:	bb 1c       	adc	r11, r11
     4a0:	cc 1c       	adc	r12, r12
     4a2:	dd 1c       	adc	r13, r13
     4a4:	ea 94       	dec	r14
     4a6:	d2 f7       	brpl	.-12     	; 0x49c <__divdi3+0x3b2>
     4a8:	21 96       	adiw	r28, 0x01	; 1
     4aa:	ac ae       	std	Y+60, r10	; 0x3c
     4ac:	bd ae       	std	Y+61, r11	; 0x3d
     4ae:	ce ae       	std	Y+62, r12	; 0x3e
     4b0:	df ae       	std	Y+63, r13	; 0x3f
     4b2:	21 97       	sbiw	r28, 0x01	; 1
     4b4:	62 01       	movw	r12, r4
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	29 96       	adiw	r28, 0x09	; 9
     4bc:	cc ae       	std	Y+60, r12	; 0x3c
     4be:	dd ae       	std	Y+61, r13	; 0x3d
     4c0:	ee ae       	std	Y+62, r14	; 0x3e
     4c2:	ff ae       	std	Y+63, r15	; 0x3f
     4c4:	29 97       	sbiw	r28, 0x09	; 9
     4c6:	92 01       	movw	r18, r4
     4c8:	81 01       	movw	r16, r2
     4ca:	20 70       	andi	r18, 0x00	; 0
     4cc:	30 70       	andi	r19, 0x00	; 0
     4ce:	2d 96       	adiw	r28, 0x0d	; 13
     4d0:	0c af       	std	Y+60, r16	; 0x3c
     4d2:	1d af       	std	Y+61, r17	; 0x3d
     4d4:	2e af       	std	Y+62, r18	; 0x3e
     4d6:	3f af       	std	Y+63, r19	; 0x3f
     4d8:	2d 97       	sbiw	r28, 0x0d	; 13
     4da:	c4 01       	movw	r24, r8
     4dc:	b3 01       	movw	r22, r6
     4de:	a7 01       	movw	r20, r14
     4e0:	96 01       	movw	r18, r12
     4e2:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     4e6:	7b 01       	movw	r14, r22
     4e8:	8c 01       	movw	r16, r24
     4ea:	c4 01       	movw	r24, r8
     4ec:	b3 01       	movw	r22, r6
     4ee:	29 96       	adiw	r28, 0x09	; 9
     4f0:	2c ad       	ldd	r18, Y+60	; 0x3c
     4f2:	3d ad       	ldd	r19, Y+61	; 0x3d
     4f4:	4e ad       	ldd	r20, Y+62	; 0x3e
     4f6:	5f ad       	ldd	r21, Y+63	; 0x3f
     4f8:	29 97       	sbiw	r28, 0x09	; 9
     4fa:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     4fe:	c9 01       	movw	r24, r18
     500:	da 01       	movw	r26, r20
     502:	3c 01       	movw	r6, r24
     504:	4d 01       	movw	r8, r26
     506:	c4 01       	movw	r24, r8
     508:	b3 01       	movw	r22, r6
     50a:	2d 96       	adiw	r28, 0x0d	; 13
     50c:	2c ad       	ldd	r18, Y+60	; 0x3c
     50e:	3d ad       	ldd	r19, Y+61	; 0x3d
     510:	4e ad       	ldd	r20, Y+62	; 0x3e
     512:	5f ad       	ldd	r21, Y+63	; 0x3f
     514:	2d 97       	sbiw	r28, 0x0d	; 13
     516:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	87 01       	movw	r16, r14
     520:	ff 24       	eor	r15, r15
     522:	ee 24       	eor	r14, r14
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	ac ac       	ldd	r10, Y+60	; 0x3c
     528:	bd ac       	ldd	r11, Y+61	; 0x3d
     52a:	ce ac       	ldd	r12, Y+62	; 0x3e
     52c:	df ac       	ldd	r13, Y+63	; 0x3f
     52e:	21 97       	sbiw	r28, 0x01	; 1
     530:	c6 01       	movw	r24, r12
     532:	aa 27       	eor	r26, r26
     534:	bb 27       	eor	r27, r27
     536:	57 01       	movw	r10, r14
     538:	68 01       	movw	r12, r16
     53a:	a8 2a       	or	r10, r24
     53c:	b9 2a       	or	r11, r25
     53e:	ca 2a       	or	r12, r26
     540:	db 2a       	or	r13, r27
     542:	a2 16       	cp	r10, r18
     544:	b3 06       	cpc	r11, r19
     546:	c4 06       	cpc	r12, r20
     548:	d5 06       	cpc	r13, r21
     54a:	e0 f4       	brcc	.+56     	; 0x584 <__divdi3+0x49a>
     54c:	08 94       	sec
     54e:	61 08       	sbc	r6, r1
     550:	71 08       	sbc	r7, r1
     552:	81 08       	sbc	r8, r1
     554:	91 08       	sbc	r9, r1
     556:	a2 0c       	add	r10, r2
     558:	b3 1c       	adc	r11, r3
     55a:	c4 1c       	adc	r12, r4
     55c:	d5 1c       	adc	r13, r5
     55e:	a2 14       	cp	r10, r2
     560:	b3 04       	cpc	r11, r3
     562:	c4 04       	cpc	r12, r4
     564:	d5 04       	cpc	r13, r5
     566:	70 f0       	brcs	.+28     	; 0x584 <__divdi3+0x49a>
     568:	a2 16       	cp	r10, r18
     56a:	b3 06       	cpc	r11, r19
     56c:	c4 06       	cpc	r12, r20
     56e:	d5 06       	cpc	r13, r21
     570:	48 f4       	brcc	.+18     	; 0x584 <__divdi3+0x49a>
     572:	08 94       	sec
     574:	61 08       	sbc	r6, r1
     576:	71 08       	sbc	r7, r1
     578:	81 08       	sbc	r8, r1
     57a:	91 08       	sbc	r9, r1
     57c:	a2 0c       	add	r10, r2
     57e:	b3 1c       	adc	r11, r3
     580:	c4 1c       	adc	r12, r4
     582:	d5 1c       	adc	r13, r5
     584:	a2 1a       	sub	r10, r18
     586:	b3 0a       	sbc	r11, r19
     588:	c4 0a       	sbc	r12, r20
     58a:	d5 0a       	sbc	r13, r21
     58c:	c6 01       	movw	r24, r12
     58e:	b5 01       	movw	r22, r10
     590:	29 96       	adiw	r28, 0x09	; 9
     592:	2c ad       	ldd	r18, Y+60	; 0x3c
     594:	3d ad       	ldd	r19, Y+61	; 0x3d
     596:	4e ad       	ldd	r20, Y+62	; 0x3e
     598:	5f ad       	ldd	r21, Y+63	; 0x3f
     59a:	29 97       	sbiw	r28, 0x09	; 9
     59c:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     5a0:	7b 01       	movw	r14, r22
     5a2:	8c 01       	movw	r16, r24
     5a4:	c6 01       	movw	r24, r12
     5a6:	b5 01       	movw	r22, r10
     5a8:	29 96       	adiw	r28, 0x09	; 9
     5aa:	2c ad       	ldd	r18, Y+60	; 0x3c
     5ac:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ae:	4e ad       	ldd	r20, Y+62	; 0x3e
     5b0:	5f ad       	ldd	r21, Y+63	; 0x3f
     5b2:	29 97       	sbiw	r28, 0x09	; 9
     5b4:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     5b8:	c9 01       	movw	r24, r18
     5ba:	da 01       	movw	r26, r20
     5bc:	5c 01       	movw	r10, r24
     5be:	6d 01       	movw	r12, r26
     5c0:	c6 01       	movw	r24, r12
     5c2:	b5 01       	movw	r22, r10
     5c4:	2d 96       	adiw	r28, 0x0d	; 13
     5c6:	2c ad       	ldd	r18, Y+60	; 0x3c
     5c8:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ca:	4e ad       	ldd	r20, Y+62	; 0x3e
     5cc:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ce:	2d 97       	sbiw	r28, 0x0d	; 13
     5d0:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
     5d8:	87 01       	movw	r16, r14
     5da:	ff 24       	eor	r15, r15
     5dc:	ee 24       	eor	r14, r14
     5de:	21 96       	adiw	r28, 0x01	; 1
     5e0:	8c ad       	ldd	r24, Y+60	; 0x3c
     5e2:	9d ad       	ldd	r25, Y+61	; 0x3d
     5e4:	ae ad       	ldd	r26, Y+62	; 0x3e
     5e6:	bf ad       	ldd	r27, Y+63	; 0x3f
     5e8:	21 97       	sbiw	r28, 0x01	; 1
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	e8 2a       	or	r14, r24
     5f0:	f9 2a       	or	r15, r25
     5f2:	0a 2b       	or	r16, r26
     5f4:	1b 2b       	or	r17, r27
     5f6:	e2 16       	cp	r14, r18
     5f8:	f3 06       	cpc	r15, r19
     5fa:	04 07       	cpc	r16, r20
     5fc:	15 07       	cpc	r17, r21
     5fe:	c0 f4       	brcc	.+48     	; 0x630 <__divdi3+0x546>
     600:	08 94       	sec
     602:	a1 08       	sbc	r10, r1
     604:	b1 08       	sbc	r11, r1
     606:	c1 08       	sbc	r12, r1
     608:	d1 08       	sbc	r13, r1
     60a:	e2 0c       	add	r14, r2
     60c:	f3 1c       	adc	r15, r3
     60e:	04 1d       	adc	r16, r4
     610:	15 1d       	adc	r17, r5
     612:	e2 14       	cp	r14, r2
     614:	f3 04       	cpc	r15, r3
     616:	04 05       	cpc	r16, r4
     618:	15 05       	cpc	r17, r5
     61a:	50 f0       	brcs	.+20     	; 0x630 <__divdi3+0x546>
     61c:	e2 16       	cp	r14, r18
     61e:	f3 06       	cpc	r15, r19
     620:	04 07       	cpc	r16, r20
     622:	15 07       	cpc	r17, r21
     624:	28 f4       	brcc	.+10     	; 0x630 <__divdi3+0x546>
     626:	08 94       	sec
     628:	a1 08       	sbc	r10, r1
     62a:	b1 08       	sbc	r11, r1
     62c:	c1 08       	sbc	r12, r1
     62e:	d1 08       	sbc	r13, r1
     630:	d3 01       	movw	r26, r6
     632:	99 27       	eor	r25, r25
     634:	88 27       	eor	r24, r24
     636:	86 01       	movw	r16, r12
     638:	75 01       	movw	r14, r10
     63a:	e8 2a       	or	r14, r24
     63c:	f9 2a       	or	r15, r25
     63e:	0a 2b       	or	r16, r26
     640:	1b 2b       	or	r17, r27
     642:	25 96       	adiw	r28, 0x05	; 5
     644:	ec ae       	std	Y+60, r14	; 0x3c
     646:	fd ae       	std	Y+61, r15	; 0x3d
     648:	0e af       	std	Y+62, r16	; 0x3e
     64a:	1f af       	std	Y+63, r17	; 0x3f
     64c:	25 97       	sbiw	r28, 0x05	; 5
     64e:	eb c4       	rjmp	.+2518   	; 0x1026 <__stack+0x7c7>
     650:	21 14       	cp	r2, r1
     652:	31 04       	cpc	r3, r1
     654:	41 04       	cpc	r4, r1
     656:	51 04       	cpc	r5, r1
     658:	71 f4       	brne	.+28     	; 0x676 <__divdi3+0x58c>
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	1c 01       	movw	r2, r24
     674:	2d 01       	movw	r4, r26
     676:	00 e0       	ldi	r16, 0x00	; 0
     678:	20 16       	cp	r2, r16
     67a:	00 e0       	ldi	r16, 0x00	; 0
     67c:	30 06       	cpc	r3, r16
     67e:	01 e0       	ldi	r16, 0x01	; 1
     680:	40 06       	cpc	r4, r16
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	50 06       	cpc	r5, r16
     686:	88 f4       	brcc	.+34     	; 0x6aa <__divdi3+0x5c0>
     688:	1f ef       	ldi	r17, 0xFF	; 255
     68a:	21 16       	cp	r2, r17
     68c:	31 04       	cpc	r3, r1
     68e:	41 04       	cpc	r4, r1
     690:	51 04       	cpc	r5, r1
     692:	31 f0       	breq	.+12     	; 0x6a0 <__divdi3+0x5b6>
     694:	28 f0       	brcs	.+10     	; 0x6a0 <__divdi3+0x5b6>
     696:	48 e0       	ldi	r20, 0x08	; 8
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	17 c0       	rjmp	.+46     	; 0x6ce <__divdi3+0x5e4>
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	12 c0       	rjmp	.+36     	; 0x6ce <__divdi3+0x5e4>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	22 16       	cp	r2, r18
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	32 06       	cpc	r3, r18
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	42 06       	cpc	r4, r18
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	52 06       	cpc	r5, r18
     6ba:	28 f0       	brcs	.+10     	; 0x6c6 <__divdi3+0x5dc>
     6bc:	48 e1       	ldi	r20, 0x18	; 24
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__divdi3+0x5e4>
     6c6:	40 e1       	ldi	r20, 0x10	; 16
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	d2 01       	movw	r26, r4
     6d0:	c1 01       	movw	r24, r2
     6d2:	04 2e       	mov	r0, r20
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <__divdi3+0x5f4>
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	0a 94       	dec	r0
     6e0:	d2 f7       	brpl	.-12     	; 0x6d6 <__divdi3+0x5ec>
     6e2:	86 50       	subi	r24, 0x06	; 6
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	dc 01       	movw	r26, r24
     6e8:	2c 91       	ld	r18, X
     6ea:	e0 e2       	ldi	r30, 0x20	; 32
     6ec:	ee 2e       	mov	r14, r30
     6ee:	f1 2c       	mov	r15, r1
     6f0:	01 2d       	mov	r16, r1
     6f2:	11 2d       	mov	r17, r1
     6f4:	d8 01       	movw	r26, r16
     6f6:	c7 01       	movw	r24, r14
     6f8:	84 1b       	sub	r24, r20
     6fa:	95 0b       	sbc	r25, r21
     6fc:	a6 0b       	sbc	r26, r22
     6fe:	b7 0b       	sbc	r27, r23
     700:	82 1b       	sub	r24, r18
     702:	91 09       	sbc	r25, r1
     704:	a1 09       	sbc	r26, r1
     706:	b1 09       	sbc	r27, r1
     708:	00 97       	sbiw	r24, 0x00	; 0
     70a:	a1 05       	cpc	r26, r1
     70c:	b1 05       	cpc	r27, r1
     70e:	61 f4       	brne	.+24     	; 0x728 <__divdi3+0x63e>
     710:	64 01       	movw	r12, r8
     712:	53 01       	movw	r10, r6
     714:	a2 18       	sub	r10, r2
     716:	b3 08       	sbc	r11, r3
     718:	c4 08       	sbc	r12, r4
     71a:	d5 08       	sbc	r13, r5
     71c:	31 e0       	ldi	r19, 0x01	; 1
     71e:	63 2e       	mov	r6, r19
     720:	71 2c       	mov	r7, r1
     722:	81 2c       	mov	r8, r1
     724:	91 2c       	mov	r9, r1
     726:	24 c1       	rjmp	.+584    	; 0x970 <__stack+0x111>
     728:	e3 96       	adiw	r28, 0x33	; 51
     72a:	8f af       	std	Y+63, r24	; 0x3f
     72c:	e3 97       	sbiw	r28, 0x33	; 51
     72e:	08 2e       	mov	r0, r24
     730:	04 c0       	rjmp	.+8      	; 0x73a <__divdi3+0x650>
     732:	22 0c       	add	r2, r2
     734:	33 1c       	adc	r3, r3
     736:	44 1c       	adc	r4, r4
     738:	55 1c       	adc	r5, r5
     73a:	0a 94       	dec	r0
     73c:	d2 f7       	brpl	.-12     	; 0x732 <__divdi3+0x648>
     73e:	ee 2d       	mov	r30, r14
     740:	e8 1b       	sub	r30, r24
     742:	64 01       	movw	r12, r8
     744:	53 01       	movw	r10, r6
     746:	0e 2e       	mov	r0, r30
     748:	04 c0       	rjmp	.+8      	; 0x752 <__divdi3+0x668>
     74a:	d6 94       	lsr	r13
     74c:	c7 94       	ror	r12
     74e:	b7 94       	ror	r11
     750:	a7 94       	ror	r10
     752:	0a 94       	dec	r0
     754:	d2 f7       	brpl	.-12     	; 0x74a <__divdi3+0x660>
     756:	a4 01       	movw	r20, r8
     758:	93 01       	movw	r18, r6
     75a:	e3 96       	adiw	r28, 0x33	; 51
     75c:	0f ac       	ldd	r0, Y+63	; 0x3f
     75e:	e3 97       	sbiw	r28, 0x33	; 51
     760:	04 c0       	rjmp	.+8      	; 0x76a <__divdi3+0x680>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	44 1f       	adc	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__divdi3+0x678>
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	6c ac       	ldd	r6, Y+60	; 0x3c
     772:	7d ac       	ldd	r7, Y+61	; 0x3d
     774:	8e ac       	ldd	r8, Y+62	; 0x3e
     776:	9f ac       	ldd	r9, Y+63	; 0x3f
     778:	21 97       	sbiw	r28, 0x01	; 1
     77a:	0e 2e       	mov	r0, r30
     77c:	04 c0       	rjmp	.+8      	; 0x786 <__divdi3+0x69c>
     77e:	96 94       	lsr	r9
     780:	87 94       	ror	r8
     782:	77 94       	ror	r7
     784:	67 94       	ror	r6
     786:	0a 94       	dec	r0
     788:	d2 f7       	brpl	.-12     	; 0x77e <__divdi3+0x694>
     78a:	84 01       	movw	r16, r8
     78c:	73 01       	movw	r14, r6
     78e:	e2 2a       	or	r14, r18
     790:	f3 2a       	or	r15, r19
     792:	04 2b       	or	r16, r20
     794:	15 2b       	or	r17, r21
     796:	e9 ae       	std	Y+57, r14	; 0x39
     798:	fa ae       	std	Y+58, r15	; 0x3a
     79a:	0b af       	std	Y+59, r16	; 0x3b
     79c:	1c af       	std	Y+60, r17	; 0x3c
     79e:	32 01       	movw	r6, r4
     7a0:	88 24       	eor	r8, r8
     7a2:	99 24       	eor	r9, r9
     7a4:	92 01       	movw	r18, r4
     7a6:	81 01       	movw	r16, r2
     7a8:	20 70       	andi	r18, 0x00	; 0
     7aa:	30 70       	andi	r19, 0x00	; 0
     7ac:	61 96       	adiw	r28, 0x11	; 17
     7ae:	0c af       	std	Y+60, r16	; 0x3c
     7b0:	1d af       	std	Y+61, r17	; 0x3d
     7b2:	2e af       	std	Y+62, r18	; 0x3e
     7b4:	3f af       	std	Y+63, r19	; 0x3f
     7b6:	61 97       	sbiw	r28, 0x11	; 17
     7b8:	c6 01       	movw	r24, r12
     7ba:	b5 01       	movw	r22, r10
     7bc:	a4 01       	movw	r20, r8
     7be:	93 01       	movw	r18, r6
     7c0:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     7c4:	7b 01       	movw	r14, r22
     7c6:	8c 01       	movw	r16, r24
     7c8:	c6 01       	movw	r24, r12
     7ca:	b5 01       	movw	r22, r10
     7cc:	a4 01       	movw	r20, r8
     7ce:	93 01       	movw	r18, r6
     7d0:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     7d4:	c9 01       	movw	r24, r18
     7d6:	da 01       	movw	r26, r20
     7d8:	65 96       	adiw	r28, 0x15	; 21
     7da:	8c af       	std	Y+60, r24	; 0x3c
     7dc:	9d af       	std	Y+61, r25	; 0x3d
     7de:	ae af       	std	Y+62, r26	; 0x3e
     7e0:	bf af       	std	Y+63, r27	; 0x3f
     7e2:	65 97       	sbiw	r28, 0x15	; 21
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	61 96       	adiw	r28, 0x11	; 17
     7ea:	2c ad       	ldd	r18, Y+60	; 0x3c
     7ec:	3d ad       	ldd	r19, Y+61	; 0x3d
     7ee:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f0:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f2:	61 97       	sbiw	r28, 0x11	; 17
     7f4:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	87 01       	movw	r16, r14
     7fe:	ff 24       	eor	r15, r15
     800:	ee 24       	eor	r14, r14
     802:	a9 ac       	ldd	r10, Y+57	; 0x39
     804:	ba ac       	ldd	r11, Y+58	; 0x3a
     806:	cb ac       	ldd	r12, Y+59	; 0x3b
     808:	dc ac       	ldd	r13, Y+60	; 0x3c
     80a:	c6 01       	movw	r24, r12
     80c:	aa 27       	eor	r26, r26
     80e:	bb 27       	eor	r27, r27
     810:	5c 01       	movw	r10, r24
     812:	6d 01       	movw	r12, r26
     814:	ae 28       	or	r10, r14
     816:	bf 28       	or	r11, r15
     818:	c0 2a       	or	r12, r16
     81a:	d1 2a       	or	r13, r17
     81c:	a2 16       	cp	r10, r18
     81e:	b3 06       	cpc	r11, r19
     820:	c4 06       	cpc	r12, r20
     822:	d5 06       	cpc	r13, r21
     824:	60 f5       	brcc	.+88     	; 0x87e <__stack+0x1f>
     826:	65 96       	adiw	r28, 0x15	; 21
     828:	6c ad       	ldd	r22, Y+60	; 0x3c
     82a:	7d ad       	ldd	r23, Y+61	; 0x3d
     82c:	8e ad       	ldd	r24, Y+62	; 0x3e
     82e:	9f ad       	ldd	r25, Y+63	; 0x3f
     830:	65 97       	sbiw	r28, 0x15	; 21
     832:	61 50       	subi	r22, 0x01	; 1
     834:	70 40       	sbci	r23, 0x00	; 0
     836:	80 40       	sbci	r24, 0x00	; 0
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	65 96       	adiw	r28, 0x15	; 21
     83c:	6c af       	std	Y+60, r22	; 0x3c
     83e:	7d af       	std	Y+61, r23	; 0x3d
     840:	8e af       	std	Y+62, r24	; 0x3e
     842:	9f af       	std	Y+63, r25	; 0x3f
     844:	65 97       	sbiw	r28, 0x15	; 21
     846:	a2 0c       	add	r10, r2
     848:	b3 1c       	adc	r11, r3
     84a:	c4 1c       	adc	r12, r4
     84c:	d5 1c       	adc	r13, r5
     84e:	a2 14       	cp	r10, r2
     850:	b3 04       	cpc	r11, r3
     852:	c4 04       	cpc	r12, r4
     854:	d5 04       	cpc	r13, r5
     856:	98 f0       	brcs	.+38     	; 0x87e <__stack+0x1f>
     858:	a2 16       	cp	r10, r18
     85a:	b3 06       	cpc	r11, r19
     85c:	c4 06       	cpc	r12, r20
     85e:	d5 06       	cpc	r13, r21
     860:	70 f4       	brcc	.+28     	; 0x87e <__stack+0x1f>
     862:	61 50       	subi	r22, 0x01	; 1
     864:	70 40       	sbci	r23, 0x00	; 0
     866:	80 40       	sbci	r24, 0x00	; 0
     868:	90 40       	sbci	r25, 0x00	; 0
     86a:	65 96       	adiw	r28, 0x15	; 21
     86c:	6c af       	std	Y+60, r22	; 0x3c
     86e:	7d af       	std	Y+61, r23	; 0x3d
     870:	8e af       	std	Y+62, r24	; 0x3e
     872:	9f af       	std	Y+63, r25	; 0x3f
     874:	65 97       	sbiw	r28, 0x15	; 21
     876:	a2 0c       	add	r10, r2
     878:	b3 1c       	adc	r11, r3
     87a:	c4 1c       	adc	r12, r4
     87c:	d5 1c       	adc	r13, r5
     87e:	a2 1a       	sub	r10, r18
     880:	b3 0a       	sbc	r11, r19
     882:	c4 0a       	sbc	r12, r20
     884:	d5 0a       	sbc	r13, r21
     886:	c6 01       	movw	r24, r12
     888:	b5 01       	movw	r22, r10
     88a:	a4 01       	movw	r20, r8
     88c:	93 01       	movw	r18, r6
     88e:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     892:	7b 01       	movw	r14, r22
     894:	8c 01       	movw	r16, r24
     896:	c6 01       	movw	r24, r12
     898:	b5 01       	movw	r22, r10
     89a:	a4 01       	movw	r20, r8
     89c:	93 01       	movw	r18, r6
     89e:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     8a2:	c9 01       	movw	r24, r18
     8a4:	da 01       	movw	r26, r20
     8a6:	3c 01       	movw	r6, r24
     8a8:	4d 01       	movw	r8, r26
     8aa:	c4 01       	movw	r24, r8
     8ac:	b3 01       	movw	r22, r6
     8ae:	61 96       	adiw	r28, 0x11	; 17
     8b0:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b2:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b4:	4e ad       	ldd	r20, Y+62	; 0x3e
     8b6:	5f ad       	ldd	r21, Y+63	; 0x3f
     8b8:	61 97       	sbiw	r28, 0x11	; 17
     8ba:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     8be:	9b 01       	movw	r18, r22
     8c0:	ac 01       	movw	r20, r24
     8c2:	87 01       	movw	r16, r14
     8c4:	ff 24       	eor	r15, r15
     8c6:	ee 24       	eor	r14, r14
     8c8:	89 ad       	ldd	r24, Y+57	; 0x39
     8ca:	9a ad       	ldd	r25, Y+58	; 0x3a
     8cc:	ab ad       	ldd	r26, Y+59	; 0x3b
     8ce:	bc ad       	ldd	r27, Y+60	; 0x3c
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	57 01       	movw	r10, r14
     8d6:	68 01       	movw	r12, r16
     8d8:	a8 2a       	or	r10, r24
     8da:	b9 2a       	or	r11, r25
     8dc:	ca 2a       	or	r12, r26
     8de:	db 2a       	or	r13, r27
     8e0:	a2 16       	cp	r10, r18
     8e2:	b3 06       	cpc	r11, r19
     8e4:	c4 06       	cpc	r12, r20
     8e6:	d5 06       	cpc	r13, r21
     8e8:	e0 f4       	brcc	.+56     	; 0x922 <__stack+0xc3>
     8ea:	08 94       	sec
     8ec:	61 08       	sbc	r6, r1
     8ee:	71 08       	sbc	r7, r1
     8f0:	81 08       	sbc	r8, r1
     8f2:	91 08       	sbc	r9, r1
     8f4:	a2 0c       	add	r10, r2
     8f6:	b3 1c       	adc	r11, r3
     8f8:	c4 1c       	adc	r12, r4
     8fa:	d5 1c       	adc	r13, r5
     8fc:	a2 14       	cp	r10, r2
     8fe:	b3 04       	cpc	r11, r3
     900:	c4 04       	cpc	r12, r4
     902:	d5 04       	cpc	r13, r5
     904:	70 f0       	brcs	.+28     	; 0x922 <__stack+0xc3>
     906:	a2 16       	cp	r10, r18
     908:	b3 06       	cpc	r11, r19
     90a:	c4 06       	cpc	r12, r20
     90c:	d5 06       	cpc	r13, r21
     90e:	48 f4       	brcc	.+18     	; 0x922 <__stack+0xc3>
     910:	08 94       	sec
     912:	61 08       	sbc	r6, r1
     914:	71 08       	sbc	r7, r1
     916:	81 08       	sbc	r8, r1
     918:	91 08       	sbc	r9, r1
     91a:	a2 0c       	add	r10, r2
     91c:	b3 1c       	adc	r11, r3
     91e:	c4 1c       	adc	r12, r4
     920:	d5 1c       	adc	r13, r5
     922:	21 96       	adiw	r28, 0x01	; 1
     924:	8c ad       	ldd	r24, Y+60	; 0x3c
     926:	9d ad       	ldd	r25, Y+61	; 0x3d
     928:	ae ad       	ldd	r26, Y+62	; 0x3e
     92a:	bf ad       	ldd	r27, Y+63	; 0x3f
     92c:	21 97       	sbiw	r28, 0x01	; 1
     92e:	e3 96       	adiw	r28, 0x33	; 51
     930:	0f ac       	ldd	r0, Y+63	; 0x3f
     932:	e3 97       	sbiw	r28, 0x33	; 51
     934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0xdf>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	aa 1f       	adc	r26, r26
     93c:	bb 1f       	adc	r27, r27
     93e:	0a 94       	dec	r0
     940:	d2 f7       	brpl	.-12     	; 0x936 <__stack+0xd7>
     942:	21 96       	adiw	r28, 0x01	; 1
     944:	8c af       	std	Y+60, r24	; 0x3c
     946:	9d af       	std	Y+61, r25	; 0x3d
     948:	ae af       	std	Y+62, r26	; 0x3e
     94a:	bf af       	std	Y+63, r27	; 0x3f
     94c:	21 97       	sbiw	r28, 0x01	; 1
     94e:	a2 1a       	sub	r10, r18
     950:	b3 0a       	sbc	r11, r19
     952:	c4 0a       	sbc	r12, r20
     954:	d5 0a       	sbc	r13, r21
     956:	65 96       	adiw	r28, 0x15	; 21
     958:	ec ac       	ldd	r14, Y+60	; 0x3c
     95a:	fd ac       	ldd	r15, Y+61	; 0x3d
     95c:	0e ad       	ldd	r16, Y+62	; 0x3e
     95e:	1f ad       	ldd	r17, Y+63	; 0x3f
     960:	65 97       	sbiw	r28, 0x15	; 21
     962:	d7 01       	movw	r26, r14
     964:	99 27       	eor	r25, r25
     966:	88 27       	eor	r24, r24
     968:	68 2a       	or	r6, r24
     96a:	79 2a       	or	r7, r25
     96c:	8a 2a       	or	r8, r26
     96e:	9b 2a       	or	r9, r27
     970:	82 01       	movw	r16, r4
     972:	22 27       	eor	r18, r18
     974:	33 27       	eor	r19, r19
     976:	69 96       	adiw	r28, 0x19	; 25
     978:	0c af       	std	Y+60, r16	; 0x3c
     97a:	1d af       	std	Y+61, r17	; 0x3d
     97c:	2e af       	std	Y+62, r18	; 0x3e
     97e:	3f af       	std	Y+63, r19	; 0x3f
     980:	69 97       	sbiw	r28, 0x19	; 25
     982:	a2 01       	movw	r20, r4
     984:	91 01       	movw	r18, r2
     986:	40 70       	andi	r20, 0x00	; 0
     988:	50 70       	andi	r21, 0x00	; 0
     98a:	6d 96       	adiw	r28, 0x1d	; 29
     98c:	2c af       	std	Y+60, r18	; 0x3c
     98e:	3d af       	std	Y+61, r19	; 0x3d
     990:	4e af       	std	Y+62, r20	; 0x3e
     992:	5f af       	std	Y+63, r21	; 0x3f
     994:	6d 97       	sbiw	r28, 0x1d	; 29
     996:	c6 01       	movw	r24, r12
     998:	b5 01       	movw	r22, r10
     99a:	69 96       	adiw	r28, 0x19	; 25
     99c:	2c ad       	ldd	r18, Y+60	; 0x3c
     99e:	3d ad       	ldd	r19, Y+61	; 0x3d
     9a0:	4e ad       	ldd	r20, Y+62	; 0x3e
     9a2:	5f ad       	ldd	r21, Y+63	; 0x3f
     9a4:	69 97       	sbiw	r28, 0x19	; 25
     9a6:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     9aa:	7b 01       	movw	r14, r22
     9ac:	8c 01       	movw	r16, r24
     9ae:	c6 01       	movw	r24, r12
     9b0:	b5 01       	movw	r22, r10
     9b2:	69 96       	adiw	r28, 0x19	; 25
     9b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     9b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     9b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     9ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     9bc:	69 97       	sbiw	r28, 0x19	; 25
     9be:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     9c2:	c9 01       	movw	r24, r18
     9c4:	da 01       	movw	r26, r20
     9c6:	a1 96       	adiw	r28, 0x21	; 33
     9c8:	8c af       	std	Y+60, r24	; 0x3c
     9ca:	9d af       	std	Y+61, r25	; 0x3d
     9cc:	ae af       	std	Y+62, r26	; 0x3e
     9ce:	bf af       	std	Y+63, r27	; 0x3f
     9d0:	a1 97       	sbiw	r28, 0x21	; 33
     9d2:	bc 01       	movw	r22, r24
     9d4:	cd 01       	movw	r24, r26
     9d6:	6d 96       	adiw	r28, 0x1d	; 29
     9d8:	2c ad       	ldd	r18, Y+60	; 0x3c
     9da:	3d ad       	ldd	r19, Y+61	; 0x3d
     9dc:	4e ad       	ldd	r20, Y+62	; 0x3e
     9de:	5f ad       	ldd	r21, Y+63	; 0x3f
     9e0:	6d 97       	sbiw	r28, 0x1d	; 29
     9e2:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	87 01       	movw	r16, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	ee 24       	eor	r14, r14
     9f0:	21 96       	adiw	r28, 0x01	; 1
     9f2:	ac ac       	ldd	r10, Y+60	; 0x3c
     9f4:	bd ac       	ldd	r11, Y+61	; 0x3d
     9f6:	ce ac       	ldd	r12, Y+62	; 0x3e
     9f8:	df ac       	ldd	r13, Y+63	; 0x3f
     9fa:	21 97       	sbiw	r28, 0x01	; 1
     9fc:	c6 01       	movw	r24, r12
     9fe:	aa 27       	eor	r26, r26
     a00:	bb 27       	eor	r27, r27
     a02:	57 01       	movw	r10, r14
     a04:	68 01       	movw	r12, r16
     a06:	a8 2a       	or	r10, r24
     a08:	b9 2a       	or	r11, r25
     a0a:	ca 2a       	or	r12, r26
     a0c:	db 2a       	or	r13, r27
     a0e:	a2 16       	cp	r10, r18
     a10:	b3 06       	cpc	r11, r19
     a12:	c4 06       	cpc	r12, r20
     a14:	d5 06       	cpc	r13, r21
     a16:	60 f5       	brcc	.+88     	; 0xa70 <__stack+0x211>
     a18:	a1 96       	adiw	r28, 0x21	; 33
     a1a:	6c ad       	ldd	r22, Y+60	; 0x3c
     a1c:	7d ad       	ldd	r23, Y+61	; 0x3d
     a1e:	8e ad       	ldd	r24, Y+62	; 0x3e
     a20:	9f ad       	ldd	r25, Y+63	; 0x3f
     a22:	a1 97       	sbiw	r28, 0x21	; 33
     a24:	61 50       	subi	r22, 0x01	; 1
     a26:	70 40       	sbci	r23, 0x00	; 0
     a28:	80 40       	sbci	r24, 0x00	; 0
     a2a:	90 40       	sbci	r25, 0x00	; 0
     a2c:	a1 96       	adiw	r28, 0x21	; 33
     a2e:	6c af       	std	Y+60, r22	; 0x3c
     a30:	7d af       	std	Y+61, r23	; 0x3d
     a32:	8e af       	std	Y+62, r24	; 0x3e
     a34:	9f af       	std	Y+63, r25	; 0x3f
     a36:	a1 97       	sbiw	r28, 0x21	; 33
     a38:	a2 0c       	add	r10, r2
     a3a:	b3 1c       	adc	r11, r3
     a3c:	c4 1c       	adc	r12, r4
     a3e:	d5 1c       	adc	r13, r5
     a40:	a2 14       	cp	r10, r2
     a42:	b3 04       	cpc	r11, r3
     a44:	c4 04       	cpc	r12, r4
     a46:	d5 04       	cpc	r13, r5
     a48:	98 f0       	brcs	.+38     	; 0xa70 <__stack+0x211>
     a4a:	a2 16       	cp	r10, r18
     a4c:	b3 06       	cpc	r11, r19
     a4e:	c4 06       	cpc	r12, r20
     a50:	d5 06       	cpc	r13, r21
     a52:	70 f4       	brcc	.+28     	; 0xa70 <__stack+0x211>
     a54:	61 50       	subi	r22, 0x01	; 1
     a56:	70 40       	sbci	r23, 0x00	; 0
     a58:	80 40       	sbci	r24, 0x00	; 0
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	a1 96       	adiw	r28, 0x21	; 33
     a5e:	6c af       	std	Y+60, r22	; 0x3c
     a60:	7d af       	std	Y+61, r23	; 0x3d
     a62:	8e af       	std	Y+62, r24	; 0x3e
     a64:	9f af       	std	Y+63, r25	; 0x3f
     a66:	a1 97       	sbiw	r28, 0x21	; 33
     a68:	a2 0c       	add	r10, r2
     a6a:	b3 1c       	adc	r11, r3
     a6c:	c4 1c       	adc	r12, r4
     a6e:	d5 1c       	adc	r13, r5
     a70:	a2 1a       	sub	r10, r18
     a72:	b3 0a       	sbc	r11, r19
     a74:	c4 0a       	sbc	r12, r20
     a76:	d5 0a       	sbc	r13, r21
     a78:	c6 01       	movw	r24, r12
     a7a:	b5 01       	movw	r22, r10
     a7c:	69 96       	adiw	r28, 0x19	; 25
     a7e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a80:	3d ad       	ldd	r19, Y+61	; 0x3d
     a82:	4e ad       	ldd	r20, Y+62	; 0x3e
     a84:	5f ad       	ldd	r21, Y+63	; 0x3f
     a86:	69 97       	sbiw	r28, 0x19	; 25
     a88:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     a8c:	7b 01       	movw	r14, r22
     a8e:	8c 01       	movw	r16, r24
     a90:	c6 01       	movw	r24, r12
     a92:	b5 01       	movw	r22, r10
     a94:	69 96       	adiw	r28, 0x19	; 25
     a96:	2c ad       	ldd	r18, Y+60	; 0x3c
     a98:	3d ad       	ldd	r19, Y+61	; 0x3d
     a9a:	4e ad       	ldd	r20, Y+62	; 0x3e
     a9c:	5f ad       	ldd	r21, Y+63	; 0x3f
     a9e:	69 97       	sbiw	r28, 0x19	; 25
     aa0:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     aa4:	c9 01       	movw	r24, r18
     aa6:	da 01       	movw	r26, r20
     aa8:	5c 01       	movw	r10, r24
     aaa:	6d 01       	movw	r12, r26
     aac:	c6 01       	movw	r24, r12
     aae:	b5 01       	movw	r22, r10
     ab0:	6d 96       	adiw	r28, 0x1d	; 29
     ab2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ab4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ab8:	5f ad       	ldd	r21, Y+63	; 0x3f
     aba:	6d 97       	sbiw	r28, 0x1d	; 29
     abc:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	87 01       	movw	r16, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	ee 24       	eor	r14, r14
     aca:	21 96       	adiw	r28, 0x01	; 1
     acc:	8c ad       	ldd	r24, Y+60	; 0x3c
     ace:	9d ad       	ldd	r25, Y+61	; 0x3d
     ad0:	ae ad       	ldd	r26, Y+62	; 0x3e
     ad2:	bf ad       	ldd	r27, Y+63	; 0x3f
     ad4:	21 97       	sbiw	r28, 0x01	; 1
     ad6:	a0 70       	andi	r26, 0x00	; 0
     ad8:	b0 70       	andi	r27, 0x00	; 0
     ada:	e8 2a       	or	r14, r24
     adc:	f9 2a       	or	r15, r25
     ade:	0a 2b       	or	r16, r26
     ae0:	1b 2b       	or	r17, r27
     ae2:	e2 16       	cp	r14, r18
     ae4:	f3 06       	cpc	r15, r19
     ae6:	04 07       	cpc	r16, r20
     ae8:	15 07       	cpc	r17, r21
     aea:	c0 f4       	brcc	.+48     	; 0xb1c <__stack+0x2bd>
     aec:	08 94       	sec
     aee:	a1 08       	sbc	r10, r1
     af0:	b1 08       	sbc	r11, r1
     af2:	c1 08       	sbc	r12, r1
     af4:	d1 08       	sbc	r13, r1
     af6:	e2 0c       	add	r14, r2
     af8:	f3 1c       	adc	r15, r3
     afa:	04 1d       	adc	r16, r4
     afc:	15 1d       	adc	r17, r5
     afe:	e2 14       	cp	r14, r2
     b00:	f3 04       	cpc	r15, r3
     b02:	04 05       	cpc	r16, r4
     b04:	15 05       	cpc	r17, r5
     b06:	50 f0       	brcs	.+20     	; 0xb1c <__stack+0x2bd>
     b08:	e2 16       	cp	r14, r18
     b0a:	f3 06       	cpc	r15, r19
     b0c:	04 07       	cpc	r16, r20
     b0e:	15 07       	cpc	r17, r21
     b10:	28 f4       	brcc	.+10     	; 0xb1c <__stack+0x2bd>
     b12:	08 94       	sec
     b14:	a1 08       	sbc	r10, r1
     b16:	b1 08       	sbc	r11, r1
     b18:	c1 08       	sbc	r12, r1
     b1a:	d1 08       	sbc	r13, r1
     b1c:	a1 96       	adiw	r28, 0x21	; 33
     b1e:	ec ac       	ldd	r14, Y+60	; 0x3c
     b20:	fd ac       	ldd	r15, Y+61	; 0x3d
     b22:	0e ad       	ldd	r16, Y+62	; 0x3e
     b24:	1f ad       	ldd	r17, Y+63	; 0x3f
     b26:	a1 97       	sbiw	r28, 0x21	; 33
     b28:	d7 01       	movw	r26, r14
     b2a:	99 27       	eor	r25, r25
     b2c:	88 27       	eor	r24, r24
     b2e:	96 01       	movw	r18, r12
     b30:	85 01       	movw	r16, r10
     b32:	08 2b       	or	r16, r24
     b34:	19 2b       	or	r17, r25
     b36:	2a 2b       	or	r18, r26
     b38:	3b 2b       	or	r19, r27
     b3a:	25 96       	adiw	r28, 0x05	; 5
     b3c:	0c af       	std	Y+60, r16	; 0x3c
     b3e:	1d af       	std	Y+61, r17	; 0x3d
     b40:	2e af       	std	Y+62, r18	; 0x3e
     b42:	3f af       	std	Y+63, r19	; 0x3f
     b44:	25 97       	sbiw	r28, 0x05	; 5
     b46:	72 c2       	rjmp	.+1252   	; 0x102c <__stack+0x7cd>
     b48:	6e 14       	cp	r6, r14
     b4a:	7f 04       	cpc	r7, r15
     b4c:	80 06       	cpc	r8, r16
     b4e:	91 06       	cpc	r9, r17
     b50:	08 f4       	brcc	.+2      	; 0xb54 <__stack+0x2f5>
     b52:	5f c2       	rjmp	.+1214   	; 0x1012 <__stack+0x7b3>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	e2 16       	cp	r14, r18
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	f2 06       	cpc	r15, r18
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	02 07       	cpc	r16, r18
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	12 07       	cpc	r17, r18
     b64:	88 f4       	brcc	.+34     	; 0xb88 <__stack+0x329>
     b66:	3f ef       	ldi	r19, 0xFF	; 255
     b68:	e3 16       	cp	r14, r19
     b6a:	f1 04       	cpc	r15, r1
     b6c:	01 05       	cpc	r16, r1
     b6e:	11 05       	cpc	r17, r1
     b70:	31 f0       	breq	.+12     	; 0xb7e <__stack+0x31f>
     b72:	28 f0       	brcs	.+10     	; 0xb7e <__stack+0x31f>
     b74:	48 e0       	ldi	r20, 0x08	; 8
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	17 c0       	rjmp	.+46     	; 0xbac <__stack+0x34d>
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	12 c0       	rjmp	.+36     	; 0xbac <__stack+0x34d>
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	e4 16       	cp	r14, r20
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	f4 06       	cpc	r15, r20
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	04 07       	cpc	r16, r20
     b94:	41 e0       	ldi	r20, 0x01	; 1
     b96:	14 07       	cpc	r17, r20
     b98:	28 f0       	brcs	.+10     	; 0xba4 <__stack+0x345>
     b9a:	48 e1       	ldi	r20, 0x18	; 24
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <__stack+0x34d>
     ba4:	40 e1       	ldi	r20, 0x10	; 16
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	d8 01       	movw	r26, r16
     bae:	c7 01       	movw	r24, r14
     bb0:	04 2e       	mov	r0, r20
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__stack+0x35d>
     bb4:	b6 95       	lsr	r27
     bb6:	a7 95       	ror	r26
     bb8:	97 95       	ror	r25
     bba:	87 95       	ror	r24
     bbc:	0a 94       	dec	r0
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__stack+0x355>
     bc0:	86 50       	subi	r24, 0x06	; 6
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	dc 01       	movw	r26, r24
     bc6:	2c 91       	ld	r18, X
     bc8:	30 e2       	ldi	r19, 0x20	; 32
     bca:	a3 2e       	mov	r10, r19
     bcc:	b1 2c       	mov	r11, r1
     bce:	c1 2c       	mov	r12, r1
     bd0:	d1 2c       	mov	r13, r1
     bd2:	d6 01       	movw	r26, r12
     bd4:	c5 01       	movw	r24, r10
     bd6:	84 1b       	sub	r24, r20
     bd8:	95 0b       	sbc	r25, r21
     bda:	a6 0b       	sbc	r26, r22
     bdc:	b7 0b       	sbc	r27, r23
     bde:	82 1b       	sub	r24, r18
     be0:	91 09       	sbc	r25, r1
     be2:	a1 09       	sbc	r26, r1
     be4:	b1 09       	sbc	r27, r1
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	a1 05       	cpc	r26, r1
     bea:	b1 05       	cpc	r27, r1
     bec:	99 f4       	brne	.+38     	; 0xc14 <__stack+0x3b5>
     bee:	e6 14       	cp	r14, r6
     bf0:	f7 04       	cpc	r15, r7
     bf2:	08 05       	cpc	r16, r8
     bf4:	19 05       	cpc	r17, r9
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__stack+0x39b>
     bf8:	fe c1       	rjmp	.+1020   	; 0xff6 <__stack+0x797>
     bfa:	21 96       	adiw	r28, 0x01	; 1
     bfc:	6c ac       	ldd	r6, Y+60	; 0x3c
     bfe:	7d ac       	ldd	r7, Y+61	; 0x3d
     c00:	8e ac       	ldd	r8, Y+62	; 0x3e
     c02:	9f ac       	ldd	r9, Y+63	; 0x3f
     c04:	21 97       	sbiw	r28, 0x01	; 1
     c06:	62 14       	cp	r6, r2
     c08:	73 04       	cpc	r7, r3
     c0a:	84 04       	cpc	r8, r4
     c0c:	95 04       	cpc	r9, r5
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <__stack+0x3b3>
     c10:	f2 c1       	rjmp	.+996    	; 0xff6 <__stack+0x797>
     c12:	ff c1       	rjmp	.+1022   	; 0x1012 <__stack+0x7b3>
     c14:	e2 96       	adiw	r28, 0x32	; 50
     c16:	8f af       	std	Y+63, r24	; 0x3f
     c18:	e2 97       	sbiw	r28, 0x32	; 50
     c1a:	08 2e       	mov	r0, r24
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <__stack+0x3c7>
     c1e:	ee 0c       	add	r14, r14
     c20:	ff 1c       	adc	r15, r15
     c22:	00 1f       	adc	r16, r16
     c24:	11 1f       	adc	r17, r17
     c26:	0a 94       	dec	r0
     c28:	d2 f7       	brpl	.-12     	; 0xc1e <__stack+0x3bf>
     c2a:	6a 2d       	mov	r22, r10
     c2c:	68 1b       	sub	r22, r24
     c2e:	d2 01       	movw	r26, r4
     c30:	c1 01       	movw	r24, r2
     c32:	06 2e       	mov	r0, r22
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__stack+0x3df>
     c36:	b6 95       	lsr	r27
     c38:	a7 95       	ror	r26
     c3a:	97 95       	ror	r25
     c3c:	87 95       	ror	r24
     c3e:	0a 94       	dec	r0
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__stack+0x3d7>
     c42:	5c 01       	movw	r10, r24
     c44:	6d 01       	movw	r12, r26
     c46:	ae 28       	or	r10, r14
     c48:	bf 28       	or	r11, r15
     c4a:	c0 2a       	or	r12, r16
     c4c:	d1 2a       	or	r13, r17
     c4e:	ad aa       	std	Y+53, r10	; 0x35
     c50:	be aa       	std	Y+54, r11	; 0x36
     c52:	cf aa       	std	Y+55, r12	; 0x37
     c54:	d8 ae       	std	Y+56, r13	; 0x38
     c56:	72 01       	movw	r14, r4
     c58:	61 01       	movw	r12, r2
     c5a:	e2 96       	adiw	r28, 0x32	; 50
     c5c:	0f ac       	ldd	r0, Y+63	; 0x3f
     c5e:	e2 97       	sbiw	r28, 0x32	; 50
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <__stack+0x40b>
     c62:	cc 0c       	add	r12, r12
     c64:	dd 1c       	adc	r13, r13
     c66:	ee 1c       	adc	r14, r14
     c68:	ff 1c       	adc	r15, r15
     c6a:	0a 94       	dec	r0
     c6c:	d2 f7       	brpl	.-12     	; 0xc62 <__stack+0x403>
     c6e:	c9 aa       	std	Y+49, r12	; 0x31
     c70:	da aa       	std	Y+50, r13	; 0x32
     c72:	eb aa       	std	Y+51, r14	; 0x33
     c74:	fc aa       	std	Y+52, r15	; 0x34
     c76:	64 01       	movw	r12, r8
     c78:	53 01       	movw	r10, r6
     c7a:	06 2e       	mov	r0, r22
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__stack+0x427>
     c7e:	d6 94       	lsr	r13
     c80:	c7 94       	ror	r12
     c82:	b7 94       	ror	r11
     c84:	a7 94       	ror	r10
     c86:	0a 94       	dec	r0
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__stack+0x41f>
     c8a:	d4 01       	movw	r26, r8
     c8c:	c3 01       	movw	r24, r6
     c8e:	e2 96       	adiw	r28, 0x32	; 50
     c90:	0f ac       	ldd	r0, Y+63	; 0x3f
     c92:	e2 97       	sbiw	r28, 0x32	; 50
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__stack+0x43f>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	aa 1f       	adc	r26, r26
     c9c:	bb 1f       	adc	r27, r27
     c9e:	0a 94       	dec	r0
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__stack+0x437>
     ca2:	21 96       	adiw	r28, 0x01	; 1
     ca4:	ec ac       	ldd	r14, Y+60	; 0x3c
     ca6:	fd ac       	ldd	r15, Y+61	; 0x3d
     ca8:	0e ad       	ldd	r16, Y+62	; 0x3e
     caa:	1f ad       	ldd	r17, Y+63	; 0x3f
     cac:	21 97       	sbiw	r28, 0x01	; 1
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__stack+0x459>
     cb0:	16 95       	lsr	r17
     cb2:	07 95       	ror	r16
     cb4:	f7 94       	ror	r15
     cb6:	e7 94       	ror	r14
     cb8:	6a 95       	dec	r22
     cba:	d2 f7       	brpl	.-12     	; 0xcb0 <__stack+0x451>
     cbc:	37 01       	movw	r6, r14
     cbe:	48 01       	movw	r8, r16
     cc0:	68 2a       	or	r6, r24
     cc2:	79 2a       	or	r7, r25
     cc4:	8a 2a       	or	r8, r26
     cc6:	9b 2a       	or	r9, r27
     cc8:	6d a6       	std	Y+45, r6	; 0x2d
     cca:	7e a6       	std	Y+46, r7	; 0x2e
     ccc:	8f a6       	std	Y+47, r8	; 0x2f
     cce:	98 aa       	std	Y+48, r9	; 0x30
     cd0:	ed a8       	ldd	r14, Y+53	; 0x35
     cd2:	fe a8       	ldd	r15, Y+54	; 0x36
     cd4:	0f a9       	ldd	r16, Y+55	; 0x37
     cd6:	18 ad       	ldd	r17, Y+56	; 0x38
     cd8:	38 01       	movw	r6, r16
     cda:	88 24       	eor	r8, r8
     cdc:	99 24       	eor	r9, r9
     cde:	98 01       	movw	r18, r16
     ce0:	87 01       	movw	r16, r14
     ce2:	20 70       	andi	r18, 0x00	; 0
     ce4:	30 70       	andi	r19, 0x00	; 0
     ce6:	a5 96       	adiw	r28, 0x25	; 37
     ce8:	0c af       	std	Y+60, r16	; 0x3c
     cea:	1d af       	std	Y+61, r17	; 0x3d
     cec:	2e af       	std	Y+62, r18	; 0x3e
     cee:	3f af       	std	Y+63, r19	; 0x3f
     cf0:	a5 97       	sbiw	r28, 0x25	; 37
     cf2:	c6 01       	movw	r24, r12
     cf4:	b5 01       	movw	r22, r10
     cf6:	a4 01       	movw	r20, r8
     cf8:	93 01       	movw	r18, r6
     cfa:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     cfe:	7b 01       	movw	r14, r22
     d00:	8c 01       	movw	r16, r24
     d02:	c6 01       	movw	r24, r12
     d04:	b5 01       	movw	r22, r10
     d06:	a4 01       	movw	r20, r8
     d08:	93 01       	movw	r18, r6
     d0a:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     d0e:	c9 01       	movw	r24, r18
     d10:	da 01       	movw	r26, r20
     d12:	1c 01       	movw	r2, r24
     d14:	2d 01       	movw	r4, r26
     d16:	c2 01       	movw	r24, r4
     d18:	b1 01       	movw	r22, r2
     d1a:	a5 96       	adiw	r28, 0x25	; 37
     d1c:	2c ad       	ldd	r18, Y+60	; 0x3c
     d1e:	3d ad       	ldd	r19, Y+61	; 0x3d
     d20:	4e ad       	ldd	r20, Y+62	; 0x3e
     d22:	5f ad       	ldd	r21, Y+63	; 0x3f
     d24:	a5 97       	sbiw	r28, 0x25	; 37
     d26:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	87 01       	movw	r16, r14
     d30:	ff 24       	eor	r15, r15
     d32:	ee 24       	eor	r14, r14
     d34:	ad a4       	ldd	r10, Y+45	; 0x2d
     d36:	be a4       	ldd	r11, Y+46	; 0x2e
     d38:	cf a4       	ldd	r12, Y+47	; 0x2f
     d3a:	d8 a8       	ldd	r13, Y+48	; 0x30
     d3c:	c6 01       	movw	r24, r12
     d3e:	aa 27       	eor	r26, r26
     d40:	bb 27       	eor	r27, r27
     d42:	57 01       	movw	r10, r14
     d44:	68 01       	movw	r12, r16
     d46:	a8 2a       	or	r10, r24
     d48:	b9 2a       	or	r11, r25
     d4a:	ca 2a       	or	r12, r26
     d4c:	db 2a       	or	r13, r27
     d4e:	a2 16       	cp	r10, r18
     d50:	b3 06       	cpc	r11, r19
     d52:	c4 06       	cpc	r12, r20
     d54:	d5 06       	cpc	r13, r21
     d56:	00 f5       	brcc	.+64     	; 0xd98 <__stack+0x539>
     d58:	08 94       	sec
     d5a:	21 08       	sbc	r2, r1
     d5c:	31 08       	sbc	r3, r1
     d5e:	41 08       	sbc	r4, r1
     d60:	51 08       	sbc	r5, r1
     d62:	ed a8       	ldd	r14, Y+53	; 0x35
     d64:	fe a8       	ldd	r15, Y+54	; 0x36
     d66:	0f a9       	ldd	r16, Y+55	; 0x37
     d68:	18 ad       	ldd	r17, Y+56	; 0x38
     d6a:	ae 0c       	add	r10, r14
     d6c:	bf 1c       	adc	r11, r15
     d6e:	c0 1e       	adc	r12, r16
     d70:	d1 1e       	adc	r13, r17
     d72:	ae 14       	cp	r10, r14
     d74:	bf 04       	cpc	r11, r15
     d76:	c0 06       	cpc	r12, r16
     d78:	d1 06       	cpc	r13, r17
     d7a:	70 f0       	brcs	.+28     	; 0xd98 <__stack+0x539>
     d7c:	a2 16       	cp	r10, r18
     d7e:	b3 06       	cpc	r11, r19
     d80:	c4 06       	cpc	r12, r20
     d82:	d5 06       	cpc	r13, r21
     d84:	48 f4       	brcc	.+18     	; 0xd98 <__stack+0x539>
     d86:	08 94       	sec
     d88:	21 08       	sbc	r2, r1
     d8a:	31 08       	sbc	r3, r1
     d8c:	41 08       	sbc	r4, r1
     d8e:	51 08       	sbc	r5, r1
     d90:	ae 0c       	add	r10, r14
     d92:	bf 1c       	adc	r11, r15
     d94:	c0 1e       	adc	r12, r16
     d96:	d1 1e       	adc	r13, r17
     d98:	a2 1a       	sub	r10, r18
     d9a:	b3 0a       	sbc	r11, r19
     d9c:	c4 0a       	sbc	r12, r20
     d9e:	d5 0a       	sbc	r13, r21
     da0:	c6 01       	movw	r24, r12
     da2:	b5 01       	movw	r22, r10
     da4:	a4 01       	movw	r20, r8
     da6:	93 01       	movw	r18, r6
     da8:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     dac:	7b 01       	movw	r14, r22
     dae:	8c 01       	movw	r16, r24
     db0:	c6 01       	movw	r24, r12
     db2:	b5 01       	movw	r22, r10
     db4:	a4 01       	movw	r20, r8
     db6:	93 01       	movw	r18, r6
     db8:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
     dbc:	c9 01       	movw	r24, r18
     dbe:	da 01       	movw	r26, r20
     dc0:	3c 01       	movw	r6, r24
     dc2:	4d 01       	movw	r8, r26
     dc4:	c4 01       	movw	r24, r8
     dc6:	b3 01       	movw	r22, r6
     dc8:	a5 96       	adiw	r28, 0x25	; 37
     dca:	2c ad       	ldd	r18, Y+60	; 0x3c
     dcc:	3d ad       	ldd	r19, Y+61	; 0x3d
     dce:	4e ad       	ldd	r20, Y+62	; 0x3e
     dd0:	5f ad       	ldd	r21, Y+63	; 0x3f
     dd2:	a5 97       	sbiw	r28, 0x25	; 37
     dd4:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	87 01       	movw	r16, r14
     dde:	ff 24       	eor	r15, r15
     de0:	ee 24       	eor	r14, r14
     de2:	8d a5       	ldd	r24, Y+45	; 0x2d
     de4:	9e a5       	ldd	r25, Y+46	; 0x2e
     de6:	af a5       	ldd	r26, Y+47	; 0x2f
     de8:	b8 a9       	ldd	r27, Y+48	; 0x30
     dea:	a0 70       	andi	r26, 0x00	; 0
     dec:	b0 70       	andi	r27, 0x00	; 0
     dee:	57 01       	movw	r10, r14
     df0:	68 01       	movw	r12, r16
     df2:	a8 2a       	or	r10, r24
     df4:	b9 2a       	or	r11, r25
     df6:	ca 2a       	or	r12, r26
     df8:	db 2a       	or	r13, r27
     dfa:	a2 16       	cp	r10, r18
     dfc:	b3 06       	cpc	r11, r19
     dfe:	c4 06       	cpc	r12, r20
     e00:	d5 06       	cpc	r13, r21
     e02:	00 f5       	brcc	.+64     	; 0xe44 <__stack+0x5e5>
     e04:	08 94       	sec
     e06:	61 08       	sbc	r6, r1
     e08:	71 08       	sbc	r7, r1
     e0a:	81 08       	sbc	r8, r1
     e0c:	91 08       	sbc	r9, r1
     e0e:	6d a9       	ldd	r22, Y+53	; 0x35
     e10:	7e a9       	ldd	r23, Y+54	; 0x36
     e12:	8f a9       	ldd	r24, Y+55	; 0x37
     e14:	98 ad       	ldd	r25, Y+56	; 0x38
     e16:	a6 0e       	add	r10, r22
     e18:	b7 1e       	adc	r11, r23
     e1a:	c8 1e       	adc	r12, r24
     e1c:	d9 1e       	adc	r13, r25
     e1e:	a6 16       	cp	r10, r22
     e20:	b7 06       	cpc	r11, r23
     e22:	c8 06       	cpc	r12, r24
     e24:	d9 06       	cpc	r13, r25
     e26:	70 f0       	brcs	.+28     	; 0xe44 <__stack+0x5e5>
     e28:	a2 16       	cp	r10, r18
     e2a:	b3 06       	cpc	r11, r19
     e2c:	c4 06       	cpc	r12, r20
     e2e:	d5 06       	cpc	r13, r21
     e30:	48 f4       	brcc	.+18     	; 0xe44 <__stack+0x5e5>
     e32:	08 94       	sec
     e34:	61 08       	sbc	r6, r1
     e36:	71 08       	sbc	r7, r1
     e38:	81 08       	sbc	r8, r1
     e3a:	91 08       	sbc	r9, r1
     e3c:	a6 0e       	add	r10, r22
     e3e:	b7 1e       	adc	r11, r23
     e40:	c8 1e       	adc	r12, r24
     e42:	d9 1e       	adc	r13, r25
     e44:	d6 01       	movw	r26, r12
     e46:	c5 01       	movw	r24, r10
     e48:	82 1b       	sub	r24, r18
     e4a:	93 0b       	sbc	r25, r19
     e4c:	a4 0b       	sbc	r26, r20
     e4e:	b5 0b       	sbc	r27, r21
     e50:	89 a7       	std	Y+41, r24	; 0x29
     e52:	9a a7       	std	Y+42, r25	; 0x2a
     e54:	ab a7       	std	Y+43, r26	; 0x2b
     e56:	bc a7       	std	Y+44, r27	; 0x2c
     e58:	d1 01       	movw	r26, r2
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	64 01       	movw	r12, r8
     e60:	53 01       	movw	r10, r6
     e62:	a8 2a       	or	r10, r24
     e64:	b9 2a       	or	r11, r25
     e66:	ca 2a       	or	r12, r26
     e68:	db 2a       	or	r13, r27
     e6a:	25 96       	adiw	r28, 0x05	; 5
     e6c:	ac ae       	std	Y+60, r10	; 0x3c
     e6e:	bd ae       	std	Y+61, r11	; 0x3d
     e70:	ce ae       	std	Y+62, r12	; 0x3e
     e72:	df ae       	std	Y+63, r13	; 0x3f
     e74:	25 97       	sbiw	r28, 0x05	; 5
     e76:	86 01       	movw	r16, r12
     e78:	75 01       	movw	r14, r10
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	3f ef       	ldi	r19, 0xFF	; 255
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	e2 22       	and	r14, r18
     e84:	f3 22       	and	r15, r19
     e86:	04 23       	and	r16, r20
     e88:	15 23       	and	r17, r21
     e8a:	a6 01       	movw	r20, r12
     e8c:	66 27       	eor	r22, r22
     e8e:	77 27       	eor	r23, r23
     e90:	ad 96       	adiw	r28, 0x2d	; 45
     e92:	4c af       	std	Y+60, r20	; 0x3c
     e94:	5d af       	std	Y+61, r21	; 0x3d
     e96:	6e af       	std	Y+62, r22	; 0x3e
     e98:	7f af       	std	Y+63, r23	; 0x3f
     e9a:	ad 97       	sbiw	r28, 0x2d	; 45
     e9c:	a9 a8       	ldd	r10, Y+49	; 0x31
     e9e:	ba a8       	ldd	r11, Y+50	; 0x32
     ea0:	cb a8       	ldd	r12, Y+51	; 0x33
     ea2:	dc a8       	ldd	r13, Y+52	; 0x34
     ea4:	6f ef       	ldi	r22, 0xFF	; 255
     ea6:	7f ef       	ldi	r23, 0xFF	; 255
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a6 22       	and	r10, r22
     eae:	b7 22       	and	r11, r23
     eb0:	c8 22       	and	r12, r24
     eb2:	d9 22       	and	r13, r25
     eb4:	89 a9       	ldd	r24, Y+49	; 0x31
     eb6:	9a a9       	ldd	r25, Y+50	; 0x32
     eb8:	ab a9       	ldd	r26, Y+51	; 0x33
     eba:	bc a9       	ldd	r27, Y+52	; 0x34
     ebc:	1d 01       	movw	r2, r26
     ebe:	44 24       	eor	r4, r4
     ec0:	55 24       	eor	r5, r5
     ec2:	c8 01       	movw	r24, r16
     ec4:	b7 01       	movw	r22, r14
     ec6:	a6 01       	movw	r20, r12
     ec8:	95 01       	movw	r18, r10
     eca:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     ece:	a9 96       	adiw	r28, 0x29	; 41
     ed0:	6c af       	std	Y+60, r22	; 0x3c
     ed2:	7d af       	std	Y+61, r23	; 0x3d
     ed4:	8e af       	std	Y+62, r24	; 0x3e
     ed6:	9f af       	std	Y+63, r25	; 0x3f
     ed8:	a9 97       	sbiw	r28, 0x29	; 41
     eda:	c8 01       	movw	r24, r16
     edc:	b7 01       	movw	r22, r14
     ede:	a2 01       	movw	r20, r4
     ee0:	91 01       	movw	r18, r2
     ee2:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     ee6:	3b 01       	movw	r6, r22
     ee8:	4c 01       	movw	r8, r24
     eea:	ad 96       	adiw	r28, 0x2d	; 45
     eec:	6c ad       	ldd	r22, Y+60	; 0x3c
     eee:	7d ad       	ldd	r23, Y+61	; 0x3d
     ef0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef4:	ad 97       	sbiw	r28, 0x2d	; 45
     ef6:	a6 01       	movw	r20, r12
     ef8:	95 01       	movw	r18, r10
     efa:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     efe:	7b 01       	movw	r14, r22
     f00:	8c 01       	movw	r16, r24
     f02:	ad 96       	adiw	r28, 0x2d	; 45
     f04:	6c ad       	ldd	r22, Y+60	; 0x3c
     f06:	7d ad       	ldd	r23, Y+61	; 0x3d
     f08:	8e ad       	ldd	r24, Y+62	; 0x3e
     f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f0c:	ad 97       	sbiw	r28, 0x2d	; 45
     f0e:	a2 01       	movw	r20, r4
     f10:	91 01       	movw	r18, r2
     f12:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
     f16:	5b 01       	movw	r10, r22
     f18:	6c 01       	movw	r12, r24
     f1a:	a8 01       	movw	r20, r16
     f1c:	97 01       	movw	r18, r14
     f1e:	26 0d       	add	r18, r6
     f20:	37 1d       	adc	r19, r7
     f22:	48 1d       	adc	r20, r8
     f24:	59 1d       	adc	r21, r9
     f26:	a9 96       	adiw	r28, 0x29	; 41
     f28:	6c ac       	ldd	r6, Y+60	; 0x3c
     f2a:	7d ac       	ldd	r7, Y+61	; 0x3d
     f2c:	8e ac       	ldd	r8, Y+62	; 0x3e
     f2e:	9f ac       	ldd	r9, Y+63	; 0x3f
     f30:	a9 97       	sbiw	r28, 0x29	; 41
     f32:	c4 01       	movw	r24, r8
     f34:	aa 27       	eor	r26, r26
     f36:	bb 27       	eor	r27, r27
     f38:	28 0f       	add	r18, r24
     f3a:	39 1f       	adc	r19, r25
     f3c:	4a 1f       	adc	r20, r26
     f3e:	5b 1f       	adc	r21, r27
     f40:	2e 15       	cp	r18, r14
     f42:	3f 05       	cpc	r19, r15
     f44:	40 07       	cpc	r20, r16
     f46:	51 07       	cpc	r21, r17
     f48:	48 f4       	brcc	.+18     	; 0xf5c <__stack+0x6fd>
     f4a:	e1 2c       	mov	r14, r1
     f4c:	f1 2c       	mov	r15, r1
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	06 2f       	mov	r16, r22
     f52:	11 2d       	mov	r17, r1
     f54:	ae 0c       	add	r10, r14
     f56:	bf 1c       	adc	r11, r15
     f58:	c0 1e       	adc	r12, r16
     f5a:	d1 1e       	adc	r13, r17
     f5c:	ca 01       	movw	r24, r20
     f5e:	aa 27       	eor	r26, r26
     f60:	bb 27       	eor	r27, r27
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	6a 0d       	add	r22, r10
     f68:	7b 1d       	adc	r23, r11
     f6a:	8c 1d       	adc	r24, r12
     f6c:	9d 1d       	adc	r25, r13
     f6e:	69 a4       	ldd	r6, Y+41	; 0x29
     f70:	7a a4       	ldd	r7, Y+42	; 0x2a
     f72:	8b a4       	ldd	r8, Y+43	; 0x2b
     f74:	9c a4       	ldd	r9, Y+44	; 0x2c
     f76:	66 16       	cp	r6, r22
     f78:	77 06       	cpc	r7, r23
     f7a:	88 06       	cpc	r8, r24
     f7c:	99 06       	cpc	r9, r25
     f7e:	50 f1       	brcs	.+84     	; 0xfd4 <__stack+0x775>
     f80:	66 15       	cp	r22, r6
     f82:	77 05       	cpc	r23, r7
     f84:	88 05       	cpc	r24, r8
     f86:	99 05       	cpc	r25, r9
     f88:	09 f0       	breq	.+2      	; 0xf8c <__stack+0x72d>
     f8a:	4d c0       	rjmp	.+154    	; 0x1026 <__stack+0x7c7>
     f8c:	d9 01       	movw	r26, r18
     f8e:	99 27       	eor	r25, r25
     f90:	88 27       	eor	r24, r24
     f92:	a9 96       	adiw	r28, 0x29	; 41
     f94:	2c ad       	ldd	r18, Y+60	; 0x3c
     f96:	3d ad       	ldd	r19, Y+61	; 0x3d
     f98:	4e ad       	ldd	r20, Y+62	; 0x3e
     f9a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f9c:	a9 97       	sbiw	r28, 0x29	; 41
     f9e:	40 70       	andi	r20, 0x00	; 0
     fa0:	50 70       	andi	r21, 0x00	; 0
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	a4 1f       	adc	r26, r20
     fa8:	b5 1f       	adc	r27, r21
     faa:	21 96       	adiw	r28, 0x01	; 1
     fac:	2c ad       	ldd	r18, Y+60	; 0x3c
     fae:	3d ad       	ldd	r19, Y+61	; 0x3d
     fb0:	4e ad       	ldd	r20, Y+62	; 0x3e
     fb2:	5f ad       	ldd	r21, Y+63	; 0x3f
     fb4:	21 97       	sbiw	r28, 0x01	; 1
     fb6:	e2 96       	adiw	r28, 0x32	; 50
     fb8:	0f ac       	ldd	r0, Y+63	; 0x3f
     fba:	e2 97       	sbiw	r28, 0x32	; 50
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <__stack+0x767>
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	44 1f       	adc	r20, r20
     fc4:	55 1f       	adc	r21, r21
     fc6:	0a 94       	dec	r0
     fc8:	d2 f7       	brpl	.-12     	; 0xfbe <__stack+0x75f>
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	4a 07       	cpc	r20, r26
     fd0:	5b 07       	cpc	r21, r27
     fd2:	48 f5       	brcc	.+82     	; 0x1026 <__stack+0x7c7>
     fd4:	25 96       	adiw	r28, 0x05	; 5
     fd6:	0c ad       	ldd	r16, Y+60	; 0x3c
     fd8:	1d ad       	ldd	r17, Y+61	; 0x3d
     fda:	2e ad       	ldd	r18, Y+62	; 0x3e
     fdc:	3f ad       	ldd	r19, Y+63	; 0x3f
     fde:	25 97       	sbiw	r28, 0x05	; 5
     fe0:	01 50       	subi	r16, 0x01	; 1
     fe2:	10 40       	sbci	r17, 0x00	; 0
     fe4:	20 40       	sbci	r18, 0x00	; 0
     fe6:	30 40       	sbci	r19, 0x00	; 0
     fe8:	25 96       	adiw	r28, 0x05	; 5
     fea:	0c af       	std	Y+60, r16	; 0x3c
     fec:	1d af       	std	Y+61, r17	; 0x3d
     fee:	2e af       	std	Y+62, r18	; 0x3e
     ff0:	3f af       	std	Y+63, r19	; 0x3f
     ff2:	25 97       	sbiw	r28, 0x05	; 5
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <__stack+0x7c7>
     ff6:	66 24       	eor	r6, r6
     ff8:	77 24       	eor	r7, r7
     ffa:	43 01       	movw	r8, r6
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	25 96       	adiw	r28, 0x05	; 5
    1006:	2c af       	std	Y+60, r18	; 0x3c
    1008:	3d af       	std	Y+61, r19	; 0x3d
    100a:	4e af       	std	Y+62, r20	; 0x3e
    100c:	5f af       	std	Y+63, r21	; 0x3f
    100e:	25 97       	sbiw	r28, 0x05	; 5
    1010:	0d c0       	rjmp	.+26     	; 0x102c <__stack+0x7cd>
    1012:	66 24       	eor	r6, r6
    1014:	77 24       	eor	r7, r7
    1016:	43 01       	movw	r8, r6
    1018:	25 96       	adiw	r28, 0x05	; 5
    101a:	1c ae       	std	Y+60, r1	; 0x3c
    101c:	1d ae       	std	Y+61, r1	; 0x3d
    101e:	1e ae       	std	Y+62, r1	; 0x3e
    1020:	1f ae       	std	Y+63, r1	; 0x3f
    1022:	25 97       	sbiw	r28, 0x05	; 5
    1024:	03 c0       	rjmp	.+6      	; 0x102c <__stack+0x7cd>
    1026:	66 24       	eor	r6, r6
    1028:	77 24       	eor	r7, r7
    102a:	43 01       	movw	r8, r6
    102c:	fe 01       	movw	r30, r28
    102e:	b1 96       	adiw	r30, 0x21	; 33
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	df 01       	movw	r26, r30
    1034:	1d 92       	st	X+, r1
    1036:	8a 95       	dec	r24
    1038:	e9 f7       	brne	.-6      	; 0x1034 <__stack+0x7d5>
    103a:	25 96       	adiw	r28, 0x05	; 5
    103c:	ac ac       	ldd	r10, Y+60	; 0x3c
    103e:	bd ac       	ldd	r11, Y+61	; 0x3d
    1040:	ce ac       	ldd	r12, Y+62	; 0x3e
    1042:	df ac       	ldd	r13, Y+63	; 0x3f
    1044:	25 97       	sbiw	r28, 0x05	; 5
    1046:	a9 a2       	std	Y+33, r10	; 0x21
    1048:	ba a2       	std	Y+34, r11	; 0x22
    104a:	cb a2       	std	Y+35, r12	; 0x23
    104c:	dc a2       	std	Y+36, r13	; 0x24
    104e:	6d a2       	std	Y+37, r6	; 0x25
    1050:	7e a2       	std	Y+38, r7	; 0x26
    1052:	8f a2       	std	Y+39, r8	; 0x27
    1054:	98 a6       	std	Y+40, r9	; 0x28
    1056:	22 96       	adiw	r28, 0x02	; 2
    1058:	2f ad       	ldd	r18, Y+63	; 0x3f
    105a:	22 97       	sbiw	r28, 0x02	; 2
    105c:	3a a1       	ldd	r19, Y+34	; 0x22
    105e:	4b a1       	ldd	r20, Y+35	; 0x23
    1060:	5c a1       	ldd	r21, Y+36	; 0x24
    1062:	66 2d       	mov	r22, r6
    1064:	7e a1       	ldd	r23, Y+38	; 0x26
    1066:	df a0       	ldd	r13, Y+39	; 0x27
    1068:	98 a5       	ldd	r25, Y+40	; 0x28
    106a:	e1 96       	adiw	r28, 0x31	; 49
    106c:	ec ac       	ldd	r14, Y+60	; 0x3c
    106e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1070:	0e ad       	ldd	r16, Y+62	; 0x3e
    1072:	1f ad       	ldd	r17, Y+63	; 0x3f
    1074:	e1 97       	sbiw	r28, 0x31	; 49
    1076:	e1 14       	cp	r14, r1
    1078:	f1 04       	cpc	r15, r1
    107a:	01 05       	cpc	r16, r1
    107c:	11 05       	cpc	r17, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <__stack+0x823>
    1080:	56 c0       	rjmp	.+172    	; 0x112e <__stack+0x8cf>
    1082:	21 95       	neg	r18
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	12 16       	cp	r1, r18
    1088:	08 f0       	brcs	.+2      	; 0x108c <__stack+0x82d>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	31 95       	neg	r19
    108e:	e1 e0       	ldi	r30, 0x01	; 1
    1090:	13 16       	cp	r1, r19
    1092:	08 f0       	brcs	.+2      	; 0x1096 <__stack+0x837>
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	93 2e       	mov	r9, r19
    1098:	98 1a       	sub	r9, r24
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	39 15       	cp	r19, r9
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <__stack+0x843>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	e8 2b       	or	r30, r24
    10a4:	41 95       	neg	r20
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	14 16       	cp	r1, r20
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__stack+0x84f>
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	a4 2e       	mov	r10, r20
    10b0:	ae 1a       	sub	r10, r30
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	4a 15       	cp	r20, r10
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__stack+0x85b>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	f8 2b       	or	r31, r24
    10bc:	51 95       	neg	r21
    10be:	e1 e0       	ldi	r30, 0x01	; 1
    10c0:	15 16       	cp	r1, r21
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__stack+0x867>
    10c4:	e0 e0       	ldi	r30, 0x00	; 0
    10c6:	b5 2e       	mov	r11, r21
    10c8:	bf 1a       	sub	r11, r31
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	5b 15       	cp	r21, r11
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__stack+0x873>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	e8 2b       	or	r30, r24
    10d4:	61 95       	neg	r22
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	16 16       	cp	r1, r22
    10da:	08 f0       	brcs	.+2      	; 0x10de <__stack+0x87f>
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	a6 2f       	mov	r26, r22
    10e0:	ae 1b       	sub	r26, r30
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	6a 17       	cp	r22, r26
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__stack+0x88b>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	f8 2b       	or	r31, r24
    10ec:	71 95       	neg	r23
    10ee:	e1 e0       	ldi	r30, 0x01	; 1
    10f0:	17 16       	cp	r1, r23
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <__stack+0x897>
    10f4:	e0 e0       	ldi	r30, 0x00	; 0
    10f6:	c7 2e       	mov	r12, r23
    10f8:	cf 1a       	sub	r12, r31
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	7c 15       	cp	r23, r12
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <__stack+0x8a3>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	e8 2b       	or	r30, r24
    1104:	8d 2d       	mov	r24, r13
    1106:	81 95       	neg	r24
    1108:	f1 e0       	ldi	r31, 0x01	; 1
    110a:	18 16       	cp	r1, r24
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__stack+0x8b1>
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	d8 2e       	mov	r13, r24
    1112:	de 1a       	sub	r13, r30
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	8d 15       	cp	r24, r13
    1118:	08 f0       	brcs	.+2      	; 0x111c <__stack+0x8bd>
    111a:	e0 e0       	ldi	r30, 0x00	; 0
    111c:	fe 2b       	or	r31, r30
    111e:	89 2f       	mov	r24, r25
    1120:	81 95       	neg	r24
    1122:	39 2d       	mov	r19, r9
    1124:	a5 01       	movw	r20, r10
    1126:	6a 2f       	mov	r22, r26
    1128:	7c 2d       	mov	r23, r12
    112a:	98 2f       	mov	r25, r24
    112c:	9f 1b       	sub	r25, r31
    112e:	8d 2d       	mov	r24, r13
    1130:	ce 58       	subi	r28, 0x8E	; 142
    1132:	df 4f       	sbci	r29, 0xFF	; 255
    1134:	e2 e1       	ldi	r30, 0x12	; 18
    1136:	0c 94 79 3d 	jmp	0x7af2	; 0x7af2 <__epilogue_restores__>

0000113a <__moddi3>:
    113a:	a7 e7       	ldi	r26, 0x77	; 119
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 ea       	ldi	r30, 0xA3	; 163
    1140:	f8 e0       	ldi	r31, 0x08	; 8
    1142:	0c 94 5d 3d 	jmp	0x7aba	; 0x7aba <__prologue_saves__>
    1146:	98 2e       	mov	r9, r24
    1148:	89 2e       	mov	r8, r25
    114a:	71 2e       	mov	r7, r17
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	fe 01       	movw	r30, r28
    1150:	31 96       	adiw	r30, 0x01	; 1
    1152:	df 01       	movw	r26, r30
    1154:	68 2e       	mov	r6, r24
    1156:	1d 92       	st	X+, r1
    1158:	6a 94       	dec	r6
    115a:	e9 f7       	brne	.-6      	; 0x1156 <__moddi3+0x1c>
    115c:	29 83       	std	Y+1, r18	; 0x01
    115e:	3a 83       	std	Y+2, r19	; 0x02
    1160:	4b 83       	std	Y+3, r20	; 0x03
    1162:	5c 83       	std	Y+4, r21	; 0x04
    1164:	6d 83       	std	Y+5, r22	; 0x05
    1166:	7e 83       	std	Y+6, r23	; 0x06
    1168:	9f 82       	std	Y+7, r9	; 0x07
    116a:	98 87       	std	Y+8, r25	; 0x08
    116c:	fe 01       	movw	r30, r28
    116e:	39 96       	adiw	r30, 0x09	; 9
    1170:	df 01       	movw	r26, r30
    1172:	1d 92       	st	X+, r1
    1174:	8a 95       	dec	r24
    1176:	e9 f7       	brne	.-6      	; 0x1172 <__moddi3+0x38>
    1178:	a9 86       	std	Y+9, r10	; 0x09
    117a:	ba 86       	std	Y+10, r11	; 0x0a
    117c:	cb 86       	std	Y+11, r12	; 0x0b
    117e:	dc 86       	std	Y+12, r13	; 0x0c
    1180:	ed 86       	std	Y+13, r14	; 0x0d
    1182:	fe 86       	std	Y+14, r15	; 0x0e
    1184:	0f 87       	std	Y+15, r16	; 0x0f
    1186:	18 8b       	std	Y+16, r17	; 0x10
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	af 81       	ldd	r26, Y+7	; 0x07
    118e:	b8 85       	ldd	r27, Y+8	; 0x08
    1190:	b7 fd       	sbrc	r27, 7
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <__moddi3+0x68>
    1194:	e1 96       	adiw	r28, 0x31	; 49
    1196:	1c ae       	std	Y+60, r1	; 0x3c
    1198:	1d ae       	std	Y+61, r1	; 0x3d
    119a:	1e ae       	std	Y+62, r1	; 0x3e
    119c:	1f ae       	std	Y+63, r1	; 0x3f
    119e:	e1 97       	sbiw	r28, 0x31	; 49
    11a0:	64 c0       	rjmp	.+200    	; 0x126a <__moddi3+0x130>
    11a2:	21 95       	neg	r18
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	12 16       	cp	r1, r18
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <__moddi3+0x72>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	31 95       	neg	r19
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	13 16       	cp	r1, r19
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <__moddi3+0x7c>
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	b3 2f       	mov	r27, r19
    11b8:	b8 1b       	sub	r27, r24
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	3b 17       	cp	r19, r27
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <__moddi3+0x88>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	98 2b       	or	r25, r24
    11c4:	41 95       	neg	r20
    11c6:	31 e0       	ldi	r19, 0x01	; 1
    11c8:	14 16       	cp	r1, r20
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <__moddi3+0x94>
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	a4 2f       	mov	r26, r20
    11d0:	a9 1b       	sub	r26, r25
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	4a 17       	cp	r20, r26
    11d6:	08 f0       	brcs	.+2      	; 0x11da <__moddi3+0xa0>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	38 2b       	or	r19, r24
    11dc:	51 95       	neg	r21
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	15 16       	cp	r1, r21
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <__moddi3+0xac>
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	f5 2f       	mov	r31, r21
    11e8:	f3 1b       	sub	r31, r19
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	5f 17       	cp	r21, r31
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <__moddi3+0xb8>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	98 2b       	or	r25, r24
    11f4:	61 95       	neg	r22
    11f6:	31 e0       	ldi	r19, 0x01	; 1
    11f8:	16 16       	cp	r1, r22
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <__moddi3+0xc4>
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	e6 2f       	mov	r30, r22
    1200:	e9 1b       	sub	r30, r25
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	6e 17       	cp	r22, r30
    1206:	08 f0       	brcs	.+2      	; 0x120a <__moddi3+0xd0>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	38 2b       	or	r19, r24
    120c:	71 95       	neg	r23
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	17 16       	cp	r1, r23
    1212:	08 f0       	brcs	.+2      	; 0x1216 <__moddi3+0xdc>
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	57 2f       	mov	r21, r23
    1218:	53 1b       	sub	r21, r19
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	75 17       	cp	r23, r21
    121e:	08 f0       	brcs	.+2      	; 0x1222 <__moddi3+0xe8>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	48 2b       	or	r20, r24
    1224:	89 2d       	mov	r24, r9
    1226:	81 95       	neg	r24
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	18 16       	cp	r1, r24
    122c:	08 f0       	brcs	.+2      	; 0x1230 <__moddi3+0xf6>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	68 2e       	mov	r6, r24
    1232:	64 1a       	sub	r6, r20
    1234:	46 2d       	mov	r20, r6
    1236:	31 e0       	ldi	r19, 0x01	; 1
    1238:	86 15       	cp	r24, r6
    123a:	08 f0       	brcs	.+2      	; 0x123e <__moddi3+0x104>
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	93 2b       	or	r25, r19
    1240:	88 2d       	mov	r24, r8
    1242:	81 95       	neg	r24
    1244:	89 1b       	sub	r24, r25
    1246:	29 83       	std	Y+1, r18	; 0x01
    1248:	ba 83       	std	Y+2, r27	; 0x02
    124a:	ab 83       	std	Y+3, r26	; 0x03
    124c:	fc 83       	std	Y+4, r31	; 0x04
    124e:	ed 83       	std	Y+5, r30	; 0x05
    1250:	5e 83       	std	Y+6, r21	; 0x06
    1252:	4f 83       	std	Y+7, r20	; 0x07
    1254:	88 87       	std	Y+8, r24	; 0x08
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f ef       	ldi	r20, 0xFF	; 255
    125c:	5f ef       	ldi	r21, 0xFF	; 255
    125e:	e1 96       	adiw	r28, 0x31	; 49
    1260:	2c af       	std	Y+60, r18	; 0x3c
    1262:	3d af       	std	Y+61, r19	; 0x3d
    1264:	4e af       	std	Y+62, r20	; 0x3e
    1266:	5f af       	std	Y+63, r21	; 0x3f
    1268:	e1 97       	sbiw	r28, 0x31	; 49
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	af 85       	ldd	r26, Y+15	; 0x0f
    1270:	b8 89       	ldd	r27, Y+16	; 0x10
    1272:	b7 ff       	sbrs	r27, 7
    1274:	5a c0       	rjmp	.+180    	; 0x132a <__moddi3+0x1f0>
    1276:	a1 94       	neg	r10
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	1a 14       	cp	r1, r10
    127c:	08 f0       	brcs	.+2      	; 0x1280 <__moddi3+0x146>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	b1 94       	neg	r11
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	1b 14       	cp	r1, r11
    1286:	08 f0       	brcs	.+2      	; 0x128a <__moddi3+0x150>
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	6b 2d       	mov	r22, r11
    128c:	68 1b       	sub	r22, r24
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	b6 16       	cp	r11, r22
    1292:	08 f0       	brcs	.+2      	; 0x1296 <__moddi3+0x15c>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	98 2b       	or	r25, r24
    1298:	c1 94       	neg	r12
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	1c 14       	cp	r1, r12
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <__moddi3+0x168>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	5c 2d       	mov	r21, r12
    12a4:	59 1b       	sub	r21, r25
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	c5 16       	cp	r12, r21
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <__moddi3+0x174>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	28 2b       	or	r18, r24
    12b0:	d1 94       	neg	r13
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	1d 14       	cp	r1, r13
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <__moddi3+0x180>
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	4d 2d       	mov	r20, r13
    12bc:	42 1b       	sub	r20, r18
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	d4 16       	cp	r13, r20
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <__moddi3+0x18c>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	98 2b       	or	r25, r24
    12c8:	e1 94       	neg	r14
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	1e 14       	cp	r1, r14
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <__moddi3+0x198>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3e 2d       	mov	r19, r14
    12d4:	39 1b       	sub	r19, r25
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	e3 16       	cp	r14, r19
    12da:	08 f0       	brcs	.+2      	; 0x12de <__moddi3+0x1a4>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	28 2b       	or	r18, r24
    12e0:	f1 94       	neg	r15
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	1f 14       	cp	r1, r15
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <__moddi3+0x1b0>
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	7f 2d       	mov	r23, r15
    12ec:	72 1b       	sub	r23, r18
    12ee:	27 2f       	mov	r18, r23
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	f7 16       	cp	r15, r23
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <__moddi3+0x1be>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	98 2b       	or	r25, r24
    12fa:	01 95       	neg	r16
    12fc:	11 e0       	ldi	r17, 0x01	; 1
    12fe:	10 16       	cp	r1, r16
    1300:	08 f0       	brcs	.+2      	; 0x1304 <__moddi3+0x1ca>
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	80 2f       	mov	r24, r16
    1306:	89 1b       	sub	r24, r25
    1308:	98 2f       	mov	r25, r24
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	09 17       	cp	r16, r25
    130e:	08 f0       	brcs	.+2      	; 0x1312 <__moddi3+0x1d8>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	18 2b       	or	r17, r24
    1314:	87 2d       	mov	r24, r7
    1316:	81 95       	neg	r24
    1318:	81 1b       	sub	r24, r17
    131a:	a9 86       	std	Y+9, r10	; 0x09
    131c:	6a 87       	std	Y+10, r22	; 0x0a
    131e:	5b 87       	std	Y+11, r21	; 0x0b
    1320:	4c 87       	std	Y+12, r20	; 0x0c
    1322:	3d 87       	std	Y+13, r19	; 0x0d
    1324:	2e 87       	std	Y+14, r18	; 0x0e
    1326:	9f 87       	std	Y+15, r25	; 0x0f
    1328:	88 8b       	std	Y+16, r24	; 0x10
    132a:	99 81       	ldd	r25, Y+1	; 0x01
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	4c 81       	ldd	r20, Y+4	; 0x04
    1332:	5d 81       	ldd	r21, Y+5	; 0x05
    1334:	6e 81       	ldd	r22, Y+6	; 0x06
    1336:	7f 81       	ldd	r23, Y+7	; 0x07
    1338:	a8 85       	ldd	r26, Y+8	; 0x08
    133a:	b9 85       	ldd	r27, Y+9	; 0x09
    133c:	1a 85       	ldd	r17, Y+10	; 0x0a
    133e:	0b 85       	ldd	r16, Y+11	; 0x0b
    1340:	fc 84       	ldd	r15, Y+12	; 0x0c
    1342:	ed 84       	ldd	r14, Y+13	; 0x0d
    1344:	de 84       	ldd	r13, Y+14	; 0x0e
    1346:	cf 84       	ldd	r12, Y+15	; 0x0f
    1348:	b8 88       	ldd	r11, Y+16	; 0x10
    134a:	88 e0       	ldi	r24, 0x08	; 8
    134c:	e9 e1       	ldi	r30, 0x19	; 25
    134e:	8e 2e       	mov	r8, r30
    1350:	91 2c       	mov	r9, r1
    1352:	8c 0e       	add	r8, r28
    1354:	9d 1e       	adc	r9, r29
    1356:	f4 01       	movw	r30, r8
    1358:	68 2e       	mov	r6, r24
    135a:	11 92       	st	Z+, r1
    135c:	6a 94       	dec	r6
    135e:	e9 f7       	brne	.-6      	; 0x135a <__moddi3+0x220>
    1360:	99 8f       	std	Y+25, r25	; 0x19
    1362:	2a 8f       	std	Y+26, r18	; 0x1a
    1364:	3b 8f       	std	Y+27, r19	; 0x1b
    1366:	4c 8f       	std	Y+28, r20	; 0x1c
    1368:	5d 8f       	std	Y+29, r21	; 0x1d
    136a:	6e 8f       	std	Y+30, r22	; 0x1e
    136c:	7f 8f       	std	Y+31, r23	; 0x1f
    136e:	a8 a3       	std	Y+32, r26	; 0x20
    1370:	9e 01       	movw	r18, r28
    1372:	2f 5d       	subi	r18, 0xDF	; 223
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	f9 01       	movw	r30, r18
    1378:	11 92       	st	Z+, r1
    137a:	8a 95       	dec	r24
    137c:	e9 f7       	brne	.-6      	; 0x1378 <__moddi3+0x23e>
    137e:	b9 a3       	std	Y+33, r27	; 0x21
    1380:	1a a3       	std	Y+34, r17	; 0x22
    1382:	0b a3       	std	Y+35, r16	; 0x23
    1384:	fc a2       	std	Y+36, r15	; 0x24
    1386:	ed a2       	std	Y+37, r14	; 0x25
    1388:	de a2       	std	Y+38, r13	; 0x26
    138a:	cf a2       	std	Y+39, r12	; 0x27
    138c:	b8 a6       	std	Y+40, r11	; 0x28
    138e:	29 a0       	ldd	r2, Y+33	; 0x21
    1390:	3a a0       	ldd	r3, Y+34	; 0x22
    1392:	4b a0       	ldd	r4, Y+35	; 0x23
    1394:	5c a0       	ldd	r5, Y+36	; 0x24
    1396:	ad a0       	ldd	r10, Y+37	; 0x25
    1398:	be a0       	ldd	r11, Y+38	; 0x26
    139a:	cf a0       	ldd	r12, Y+39	; 0x27
    139c:	d8 a4       	ldd	r13, Y+40	; 0x28
    139e:	49 8d       	ldd	r20, Y+25	; 0x19
    13a0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    13a2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    13a4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    13a6:	e5 96       	adiw	r28, 0x35	; 53
    13a8:	4f af       	std	Y+63, r20	; 0x3f
    13aa:	e5 97       	sbiw	r28, 0x35	; 53
    13ac:	e6 96       	adiw	r28, 0x36	; 54
    13ae:	5f af       	std	Y+63, r21	; 0x3f
    13b0:	e6 97       	sbiw	r28, 0x36	; 54
    13b2:	e7 96       	adiw	r28, 0x37	; 55
    13b4:	6f af       	std	Y+63, r22	; 0x3f
    13b6:	e7 97       	sbiw	r28, 0x37	; 55
    13b8:	e8 96       	adiw	r28, 0x38	; 56
    13ba:	7f af       	std	Y+63, r23	; 0x3f
    13bc:	e8 97       	sbiw	r28, 0x38	; 56
    13be:	e8 96       	adiw	r28, 0x38	; 56
    13c0:	6c ac       	ldd	r6, Y+60	; 0x3c
    13c2:	7d ac       	ldd	r7, Y+61	; 0x3d
    13c4:	8e ac       	ldd	r8, Y+62	; 0x3e
    13c6:	9f ac       	ldd	r9, Y+63	; 0x3f
    13c8:	e8 97       	sbiw	r28, 0x38	; 56
    13ca:	2d 96       	adiw	r28, 0x0d	; 13
    13cc:	6c ae       	std	Y+60, r6	; 0x3c
    13ce:	7d ae       	std	Y+61, r7	; 0x3d
    13d0:	8e ae       	std	Y+62, r8	; 0x3e
    13d2:	9f ae       	std	Y+63, r9	; 0x3f
    13d4:	2d 97       	sbiw	r28, 0x0d	; 13
    13d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13da:	2f 8d       	ldd	r18, Y+31	; 0x1f
    13dc:	38 a1       	ldd	r19, Y+32	; 0x20
    13de:	3c 01       	movw	r6, r24
    13e0:	49 01       	movw	r8, r18
    13e2:	61 96       	adiw	r28, 0x11	; 17
    13e4:	6c ae       	std	Y+60, r6	; 0x3c
    13e6:	7d ae       	std	Y+61, r7	; 0x3d
    13e8:	8e ae       	std	Y+62, r8	; 0x3e
    13ea:	9f ae       	std	Y+63, r9	; 0x3f
    13ec:	61 97       	sbiw	r28, 0x11	; 17
    13ee:	a1 14       	cp	r10, r1
    13f0:	b1 04       	cpc	r11, r1
    13f2:	c1 04       	cpc	r12, r1
    13f4:	d1 04       	cpc	r13, r1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <__moddi3+0x2c0>
    13f8:	28 c3       	rjmp	.+1616   	; 0x1a4a <__moddi3+0x910>
    13fa:	62 14       	cp	r6, r2
    13fc:	73 04       	cpc	r7, r3
    13fe:	84 04       	cpc	r8, r4
    1400:	95 04       	cpc	r9, r5
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__moddi3+0x2cc>
    1404:	0e c1       	rjmp	.+540    	; 0x1622 <__moddi3+0x4e8>
    1406:	00 e0       	ldi	r16, 0x00	; 0
    1408:	20 16       	cp	r2, r16
    140a:	00 e0       	ldi	r16, 0x00	; 0
    140c:	30 06       	cpc	r3, r16
    140e:	01 e0       	ldi	r16, 0x01	; 1
    1410:	40 06       	cpc	r4, r16
    1412:	00 e0       	ldi	r16, 0x00	; 0
    1414:	50 06       	cpc	r5, r16
    1416:	88 f4       	brcc	.+34     	; 0x143a <__moddi3+0x300>
    1418:	1f ef       	ldi	r17, 0xFF	; 255
    141a:	21 16       	cp	r2, r17
    141c:	31 04       	cpc	r3, r1
    141e:	41 04       	cpc	r4, r1
    1420:	51 04       	cpc	r5, r1
    1422:	39 f0       	breq	.+14     	; 0x1432 <__moddi3+0x2f8>
    1424:	30 f0       	brcs	.+12     	; 0x1432 <__moddi3+0x2f8>
    1426:	88 e0       	ldi	r24, 0x08	; 8
    1428:	e8 2e       	mov	r14, r24
    142a:	f1 2c       	mov	r15, r1
    142c:	01 2d       	mov	r16, r1
    142e:	11 2d       	mov	r17, r1
    1430:	18 c0       	rjmp	.+48     	; 0x1462 <__moddi3+0x328>
    1432:	ee 24       	eor	r14, r14
    1434:	ff 24       	eor	r15, r15
    1436:	87 01       	movw	r16, r14
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <__moddi3+0x328>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	22 16       	cp	r2, r18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	32 06       	cpc	r3, r18
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	42 06       	cpc	r4, r18
    1446:	21 e0       	ldi	r18, 0x01	; 1
    1448:	52 06       	cpc	r5, r18
    144a:	30 f0       	brcs	.+12     	; 0x1458 <__moddi3+0x31e>
    144c:	b8 e1       	ldi	r27, 0x18	; 24
    144e:	eb 2e       	mov	r14, r27
    1450:	f1 2c       	mov	r15, r1
    1452:	01 2d       	mov	r16, r1
    1454:	11 2d       	mov	r17, r1
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <__moddi3+0x328>
    1458:	a0 e1       	ldi	r26, 0x10	; 16
    145a:	ea 2e       	mov	r14, r26
    145c:	f1 2c       	mov	r15, r1
    145e:	01 2d       	mov	r16, r1
    1460:	11 2d       	mov	r17, r1
    1462:	d2 01       	movw	r26, r4
    1464:	c1 01       	movw	r24, r2
    1466:	0e 2c       	mov	r0, r14
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__moddi3+0x338>
    146a:	b6 95       	lsr	r27
    146c:	a7 95       	ror	r26
    146e:	97 95       	ror	r25
    1470:	87 95       	ror	r24
    1472:	0a 94       	dec	r0
    1474:	d2 f7       	brpl	.-12     	; 0x146a <__moddi3+0x330>
    1476:	86 50       	subi	r24, 0x06	; 6
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	dc 01       	movw	r26, r24
    147c:	2c 91       	ld	r18, X
    147e:	80 e2       	ldi	r24, 0x20	; 32
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e0       	ldi	r26, 0x00	; 0
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	8e 19       	sub	r24, r14
    1488:	9f 09       	sbc	r25, r15
    148a:	a0 0b       	sbc	r26, r16
    148c:	b1 0b       	sbc	r27, r17
    148e:	5c 01       	movw	r10, r24
    1490:	6d 01       	movw	r12, r26
    1492:	a2 1a       	sub	r10, r18
    1494:	b1 08       	sbc	r11, r1
    1496:	c1 08       	sbc	r12, r1
    1498:	d1 08       	sbc	r13, r1
    149a:	65 96       	adiw	r28, 0x15	; 21
    149c:	ac ae       	std	Y+60, r10	; 0x3c
    149e:	bd ae       	std	Y+61, r11	; 0x3d
    14a0:	ce ae       	std	Y+62, r12	; 0x3e
    14a2:	df ae       	std	Y+63, r13	; 0x3f
    14a4:	65 97       	sbiw	r28, 0x15	; 21
    14a6:	a1 14       	cp	r10, r1
    14a8:	b1 04       	cpc	r11, r1
    14aa:	c1 04       	cpc	r12, r1
    14ac:	d1 04       	cpc	r13, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <__moddi3+0x378>
    14b0:	45 c0       	rjmp	.+138    	; 0x153c <__moddi3+0x402>
    14b2:	62 96       	adiw	r28, 0x12	; 18
    14b4:	6f ad       	ldd	r22, Y+63	; 0x3f
    14b6:	62 97       	sbiw	r28, 0x12	; 18
    14b8:	06 2e       	mov	r0, r22
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <__moddi3+0x38a>
    14bc:	22 0c       	add	r2, r2
    14be:	33 1c       	adc	r3, r3
    14c0:	44 1c       	adc	r4, r4
    14c2:	55 1c       	adc	r5, r5
    14c4:	0a 94       	dec	r0
    14c6:	d2 f7       	brpl	.-12     	; 0x14bc <__moddi3+0x382>
    14c8:	a4 01       	movw	r20, r8
    14ca:	93 01       	movw	r18, r6
    14cc:	06 2e       	mov	r0, r22
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <__moddi3+0x39e>
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	0a 94       	dec	r0
    14da:	d2 f7       	brpl	.-12     	; 0x14d0 <__moddi3+0x396>
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	8a 19       	sub	r24, r10
    14e2:	9b 09       	sbc	r25, r11
    14e4:	e8 96       	adiw	r28, 0x38	; 56
    14e6:	cc ac       	ldd	r12, Y+60	; 0x3c
    14e8:	dd ac       	ldd	r13, Y+61	; 0x3d
    14ea:	ee ac       	ldd	r14, Y+62	; 0x3e
    14ec:	ff ac       	ldd	r15, Y+63	; 0x3f
    14ee:	e8 97       	sbiw	r28, 0x38	; 56
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <__moddi3+0x3c0>
    14f2:	f6 94       	lsr	r15
    14f4:	e7 94       	ror	r14
    14f6:	d7 94       	ror	r13
    14f8:	c7 94       	ror	r12
    14fa:	8a 95       	dec	r24
    14fc:	d2 f7       	brpl	.-12     	; 0x14f2 <__moddi3+0x3b8>
    14fe:	87 01       	movw	r16, r14
    1500:	76 01       	movw	r14, r12
    1502:	e2 2a       	or	r14, r18
    1504:	f3 2a       	or	r15, r19
    1506:	04 2b       	or	r16, r20
    1508:	15 2b       	or	r17, r21
    150a:	61 96       	adiw	r28, 0x11	; 17
    150c:	ec ae       	std	Y+60, r14	; 0x3c
    150e:	fd ae       	std	Y+61, r15	; 0x3d
    1510:	0e af       	std	Y+62, r16	; 0x3e
    1512:	1f af       	std	Y+63, r17	; 0x3f
    1514:	61 97       	sbiw	r28, 0x11	; 17
    1516:	e8 96       	adiw	r28, 0x38	; 56
    1518:	0c ad       	ldd	r16, Y+60	; 0x3c
    151a:	1d ad       	ldd	r17, Y+61	; 0x3d
    151c:	2e ad       	ldd	r18, Y+62	; 0x3e
    151e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1520:	e8 97       	sbiw	r28, 0x38	; 56
    1522:	04 c0       	rjmp	.+8      	; 0x152c <__moddi3+0x3f2>
    1524:	00 0f       	add	r16, r16
    1526:	11 1f       	adc	r17, r17
    1528:	22 1f       	adc	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	6a 95       	dec	r22
    152e:	d2 f7       	brpl	.-12     	; 0x1524 <__moddi3+0x3ea>
    1530:	2d 96       	adiw	r28, 0x0d	; 13
    1532:	0c af       	std	Y+60, r16	; 0x3c
    1534:	1d af       	std	Y+61, r17	; 0x3d
    1536:	2e af       	std	Y+62, r18	; 0x3e
    1538:	3f af       	std	Y+63, r19	; 0x3f
    153a:	2d 97       	sbiw	r28, 0x0d	; 13
    153c:	32 01       	movw	r6, r4
    153e:	88 24       	eor	r8, r8
    1540:	99 24       	eor	r9, r9
    1542:	a2 01       	movw	r20, r4
    1544:	91 01       	movw	r18, r2
    1546:	40 70       	andi	r20, 0x00	; 0
    1548:	50 70       	andi	r21, 0x00	; 0
    154a:	69 96       	adiw	r28, 0x19	; 25
    154c:	2c af       	std	Y+60, r18	; 0x3c
    154e:	3d af       	std	Y+61, r19	; 0x3d
    1550:	4e af       	std	Y+62, r20	; 0x3e
    1552:	5f af       	std	Y+63, r21	; 0x3f
    1554:	69 97       	sbiw	r28, 0x19	; 25
    1556:	61 96       	adiw	r28, 0x11	; 17
    1558:	6c ad       	ldd	r22, Y+60	; 0x3c
    155a:	7d ad       	ldd	r23, Y+61	; 0x3d
    155c:	8e ad       	ldd	r24, Y+62	; 0x3e
    155e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1560:	61 97       	sbiw	r28, 0x11	; 17
    1562:	a4 01       	movw	r20, r8
    1564:	93 01       	movw	r18, r6
    1566:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    156a:	7b 01       	movw	r14, r22
    156c:	8c 01       	movw	r16, r24
    156e:	61 96       	adiw	r28, 0x11	; 17
    1570:	6c ad       	ldd	r22, Y+60	; 0x3c
    1572:	7d ad       	ldd	r23, Y+61	; 0x3d
    1574:	8e ad       	ldd	r24, Y+62	; 0x3e
    1576:	9f ad       	ldd	r25, Y+63	; 0x3f
    1578:	61 97       	sbiw	r28, 0x11	; 17
    157a:	a4 01       	movw	r20, r8
    157c:	93 01       	movw	r18, r6
    157e:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1582:	ca 01       	movw	r24, r20
    1584:	b9 01       	movw	r22, r18
    1586:	69 96       	adiw	r28, 0x19	; 25
    1588:	2c ad       	ldd	r18, Y+60	; 0x3c
    158a:	3d ad       	ldd	r19, Y+61	; 0x3d
    158c:	4e ad       	ldd	r20, Y+62	; 0x3e
    158e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1590:	69 97       	sbiw	r28, 0x19	; 25
    1592:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	87 01       	movw	r16, r14
    159c:	ff 24       	eor	r15, r15
    159e:	ee 24       	eor	r14, r14
    15a0:	2d 96       	adiw	r28, 0x0d	; 13
    15a2:	ac ac       	ldd	r10, Y+60	; 0x3c
    15a4:	bd ac       	ldd	r11, Y+61	; 0x3d
    15a6:	ce ac       	ldd	r12, Y+62	; 0x3e
    15a8:	df ac       	ldd	r13, Y+63	; 0x3f
    15aa:	2d 97       	sbiw	r28, 0x0d	; 13
    15ac:	c6 01       	movw	r24, r12
    15ae:	aa 27       	eor	r26, r26
    15b0:	bb 27       	eor	r27, r27
    15b2:	57 01       	movw	r10, r14
    15b4:	68 01       	movw	r12, r16
    15b6:	a8 2a       	or	r10, r24
    15b8:	b9 2a       	or	r11, r25
    15ba:	ca 2a       	or	r12, r26
    15bc:	db 2a       	or	r13, r27
    15be:	a2 16       	cp	r10, r18
    15c0:	b3 06       	cpc	r11, r19
    15c2:	c4 06       	cpc	r12, r20
    15c4:	d5 06       	cpc	r13, r21
    15c6:	90 f4       	brcc	.+36     	; 0x15ec <__moddi3+0x4b2>
    15c8:	a2 0c       	add	r10, r2
    15ca:	b3 1c       	adc	r11, r3
    15cc:	c4 1c       	adc	r12, r4
    15ce:	d5 1c       	adc	r13, r5
    15d0:	a2 14       	cp	r10, r2
    15d2:	b3 04       	cpc	r11, r3
    15d4:	c4 04       	cpc	r12, r4
    15d6:	d5 04       	cpc	r13, r5
    15d8:	48 f0       	brcs	.+18     	; 0x15ec <__moddi3+0x4b2>
    15da:	a2 16       	cp	r10, r18
    15dc:	b3 06       	cpc	r11, r19
    15de:	c4 06       	cpc	r12, r20
    15e0:	d5 06       	cpc	r13, r21
    15e2:	20 f4       	brcc	.+8      	; 0x15ec <__moddi3+0x4b2>
    15e4:	a2 0c       	add	r10, r2
    15e6:	b3 1c       	adc	r11, r3
    15e8:	c4 1c       	adc	r12, r4
    15ea:	d5 1c       	adc	r13, r5
    15ec:	a2 1a       	sub	r10, r18
    15ee:	b3 0a       	sbc	r11, r19
    15f0:	c4 0a       	sbc	r12, r20
    15f2:	d5 0a       	sbc	r13, r21
    15f4:	c6 01       	movw	r24, r12
    15f6:	b5 01       	movw	r22, r10
    15f8:	a4 01       	movw	r20, r8
    15fa:	93 01       	movw	r18, r6
    15fc:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1600:	7b 01       	movw	r14, r22
    1602:	8c 01       	movw	r16, r24
    1604:	c6 01       	movw	r24, r12
    1606:	b5 01       	movw	r22, r10
    1608:	a4 01       	movw	r20, r8
    160a:	93 01       	movw	r18, r6
    160c:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1610:	ca 01       	movw	r24, r20
    1612:	b9 01       	movw	r22, r18
    1614:	69 96       	adiw	r28, 0x19	; 25
    1616:	2c ad       	ldd	r18, Y+60	; 0x3c
    1618:	3d ad       	ldd	r19, Y+61	; 0x3d
    161a:	4e ad       	ldd	r20, Y+62	; 0x3e
    161c:	5f ad       	ldd	r21, Y+63	; 0x3f
    161e:	69 97       	sbiw	r28, 0x19	; 25
    1620:	c8 c1       	rjmp	.+912    	; 0x19b2 <__moddi3+0x878>
    1622:	21 14       	cp	r2, r1
    1624:	31 04       	cpc	r3, r1
    1626:	41 04       	cpc	r4, r1
    1628:	51 04       	cpc	r5, r1
    162a:	71 f4       	brne	.+28     	; 0x1648 <__moddi3+0x50e>
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1640:	c9 01       	movw	r24, r18
    1642:	da 01       	movw	r26, r20
    1644:	1c 01       	movw	r2, r24
    1646:	2d 01       	movw	r4, r26
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	20 16       	cp	r2, r16
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	30 06       	cpc	r3, r16
    1650:	01 e0       	ldi	r16, 0x01	; 1
    1652:	40 06       	cpc	r4, r16
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	50 06       	cpc	r5, r16
    1658:	88 f4       	brcc	.+34     	; 0x167c <__moddi3+0x542>
    165a:	1f ef       	ldi	r17, 0xFF	; 255
    165c:	21 16       	cp	r2, r17
    165e:	31 04       	cpc	r3, r1
    1660:	41 04       	cpc	r4, r1
    1662:	51 04       	cpc	r5, r1
    1664:	39 f0       	breq	.+14     	; 0x1674 <__moddi3+0x53a>
    1666:	30 f0       	brcs	.+12     	; 0x1674 <__moddi3+0x53a>
    1668:	68 e0       	ldi	r22, 0x08	; 8
    166a:	e6 2e       	mov	r14, r22
    166c:	f1 2c       	mov	r15, r1
    166e:	01 2d       	mov	r16, r1
    1670:	11 2d       	mov	r17, r1
    1672:	18 c0       	rjmp	.+48     	; 0x16a4 <__moddi3+0x56a>
    1674:	ee 24       	eor	r14, r14
    1676:	ff 24       	eor	r15, r15
    1678:	87 01       	movw	r16, r14
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <__moddi3+0x56a>
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	22 16       	cp	r2, r18
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	32 06       	cpc	r3, r18
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	42 06       	cpc	r4, r18
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	52 06       	cpc	r5, r18
    168c:	30 f0       	brcs	.+12     	; 0x169a <__moddi3+0x560>
    168e:	58 e1       	ldi	r21, 0x18	; 24
    1690:	e5 2e       	mov	r14, r21
    1692:	f1 2c       	mov	r15, r1
    1694:	01 2d       	mov	r16, r1
    1696:	11 2d       	mov	r17, r1
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <__moddi3+0x56a>
    169a:	40 e1       	ldi	r20, 0x10	; 16
    169c:	e4 2e       	mov	r14, r20
    169e:	f1 2c       	mov	r15, r1
    16a0:	01 2d       	mov	r16, r1
    16a2:	11 2d       	mov	r17, r1
    16a4:	d2 01       	movw	r26, r4
    16a6:	c1 01       	movw	r24, r2
    16a8:	0e 2c       	mov	r0, r14
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <__moddi3+0x57a>
    16ac:	b6 95       	lsr	r27
    16ae:	a7 95       	ror	r26
    16b0:	97 95       	ror	r25
    16b2:	87 95       	ror	r24
    16b4:	0a 94       	dec	r0
    16b6:	d2 f7       	brpl	.-12     	; 0x16ac <__moddi3+0x572>
    16b8:	86 50       	subi	r24, 0x06	; 6
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	dc 01       	movw	r26, r24
    16be:	2c 91       	ld	r18, X
    16c0:	30 e2       	ldi	r19, 0x20	; 32
    16c2:	a3 2e       	mov	r10, r19
    16c4:	b1 2c       	mov	r11, r1
    16c6:	c1 2c       	mov	r12, r1
    16c8:	d1 2c       	mov	r13, r1
    16ca:	d6 01       	movw	r26, r12
    16cc:	c5 01       	movw	r24, r10
    16ce:	8e 19       	sub	r24, r14
    16d0:	9f 09       	sbc	r25, r15
    16d2:	a0 0b       	sbc	r26, r16
    16d4:	b1 0b       	sbc	r27, r17
    16d6:	7c 01       	movw	r14, r24
    16d8:	8d 01       	movw	r16, r26
    16da:	e2 1a       	sub	r14, r18
    16dc:	f1 08       	sbc	r15, r1
    16de:	01 09       	sbc	r16, r1
    16e0:	11 09       	sbc	r17, r1
    16e2:	65 96       	adiw	r28, 0x15	; 21
    16e4:	ec ae       	std	Y+60, r14	; 0x3c
    16e6:	fd ae       	std	Y+61, r15	; 0x3d
    16e8:	0e af       	std	Y+62, r16	; 0x3e
    16ea:	1f af       	std	Y+63, r17	; 0x3f
    16ec:	65 97       	sbiw	r28, 0x15	; 21
    16ee:	e1 14       	cp	r14, r1
    16f0:	f1 04       	cpc	r15, r1
    16f2:	01 05       	cpc	r16, r1
    16f4:	11 05       	cpc	r17, r1
    16f6:	39 f4       	brne	.+14     	; 0x1706 <__moddi3+0x5cc>
    16f8:	64 01       	movw	r12, r8
    16fa:	53 01       	movw	r10, r6
    16fc:	a2 18       	sub	r10, r2
    16fe:	b3 08       	sbc	r11, r3
    1700:	c4 08       	sbc	r12, r4
    1702:	d5 08       	sbc	r13, r5
    1704:	ec c0       	rjmp	.+472    	; 0x18de <__moddi3+0x7a4>
    1706:	62 96       	adiw	r28, 0x12	; 18
    1708:	ff ac       	ldd	r15, Y+63	; 0x3f
    170a:	62 97       	sbiw	r28, 0x12	; 18
    170c:	e4 96       	adiw	r28, 0x34	; 52
    170e:	ff ae       	std	Y+63, r15	; 0x3f
    1710:	e4 97       	sbiw	r28, 0x34	; 52
    1712:	0f 2c       	mov	r0, r15
    1714:	04 c0       	rjmp	.+8      	; 0x171e <__moddi3+0x5e4>
    1716:	22 0c       	add	r2, r2
    1718:	33 1c       	adc	r3, r3
    171a:	44 1c       	adc	r4, r4
    171c:	55 1c       	adc	r5, r5
    171e:	0a 94       	dec	r0
    1720:	d2 f7       	brpl	.-12     	; 0x1716 <__moddi3+0x5dc>
    1722:	8a 2d       	mov	r24, r10
    1724:	8f 19       	sub	r24, r15
    1726:	64 01       	movw	r12, r8
    1728:	53 01       	movw	r10, r6
    172a:	08 2e       	mov	r0, r24
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <__moddi3+0x5fc>
    172e:	d6 94       	lsr	r13
    1730:	c7 94       	ror	r12
    1732:	b7 94       	ror	r11
    1734:	a7 94       	ror	r10
    1736:	0a 94       	dec	r0
    1738:	d2 f7       	brpl	.-12     	; 0x172e <__moddi3+0x5f4>
    173a:	a4 01       	movw	r20, r8
    173c:	93 01       	movw	r18, r6
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <__moddi3+0x60e>
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	44 1f       	adc	r20, r20
    1746:	55 1f       	adc	r21, r21
    1748:	fa 94       	dec	r15
    174a:	d2 f7       	brpl	.-12     	; 0x1740 <__moddi3+0x606>
    174c:	e8 96       	adiw	r28, 0x38	; 56
    174e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1750:	7d ac       	ldd	r7, Y+61	; 0x3d
    1752:	8e ac       	ldd	r8, Y+62	; 0x3e
    1754:	9f ac       	ldd	r9, Y+63	; 0x3f
    1756:	e8 97       	sbiw	r28, 0x38	; 56
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__moddi3+0x628>
    175a:	96 94       	lsr	r9
    175c:	87 94       	ror	r8
    175e:	77 94       	ror	r7
    1760:	67 94       	ror	r6
    1762:	8a 95       	dec	r24
    1764:	d2 f7       	brpl	.-12     	; 0x175a <__moddi3+0x620>
    1766:	84 01       	movw	r16, r8
    1768:	73 01       	movw	r14, r6
    176a:	e2 2a       	or	r14, r18
    176c:	f3 2a       	or	r15, r19
    176e:	04 2b       	or	r16, r20
    1770:	15 2b       	or	r17, r21
    1772:	29 96       	adiw	r28, 0x09	; 9
    1774:	ec ae       	std	Y+60, r14	; 0x3c
    1776:	fd ae       	std	Y+61, r15	; 0x3d
    1778:	0e af       	std	Y+62, r16	; 0x3e
    177a:	1f af       	std	Y+63, r17	; 0x3f
    177c:	29 97       	sbiw	r28, 0x09	; 9
    177e:	32 01       	movw	r6, r4
    1780:	88 24       	eor	r8, r8
    1782:	99 24       	eor	r9, r9
    1784:	92 01       	movw	r18, r4
    1786:	81 01       	movw	r16, r2
    1788:	20 70       	andi	r18, 0x00	; 0
    178a:	30 70       	andi	r19, 0x00	; 0
    178c:	6d 96       	adiw	r28, 0x1d	; 29
    178e:	0c af       	std	Y+60, r16	; 0x3c
    1790:	1d af       	std	Y+61, r17	; 0x3d
    1792:	2e af       	std	Y+62, r18	; 0x3e
    1794:	3f af       	std	Y+63, r19	; 0x3f
    1796:	6d 97       	sbiw	r28, 0x1d	; 29
    1798:	c6 01       	movw	r24, r12
    179a:	b5 01       	movw	r22, r10
    179c:	a4 01       	movw	r20, r8
    179e:	93 01       	movw	r18, r6
    17a0:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    17a4:	7b 01       	movw	r14, r22
    17a6:	8c 01       	movw	r16, r24
    17a8:	c6 01       	movw	r24, r12
    17aa:	b5 01       	movw	r22, r10
    17ac:	a4 01       	movw	r20, r8
    17ae:	93 01       	movw	r18, r6
    17b0:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    17b4:	ca 01       	movw	r24, r20
    17b6:	b9 01       	movw	r22, r18
    17b8:	6d 96       	adiw	r28, 0x1d	; 29
    17ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    17bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    17be:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c2:	6d 97       	sbiw	r28, 0x1d	; 29
    17c4:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	87 01       	movw	r16, r14
    17ce:	ff 24       	eor	r15, r15
    17d0:	ee 24       	eor	r14, r14
    17d2:	29 96       	adiw	r28, 0x09	; 9
    17d4:	ac ac       	ldd	r10, Y+60	; 0x3c
    17d6:	bd ac       	ldd	r11, Y+61	; 0x3d
    17d8:	ce ac       	ldd	r12, Y+62	; 0x3e
    17da:	df ac       	ldd	r13, Y+63	; 0x3f
    17dc:	29 97       	sbiw	r28, 0x09	; 9
    17de:	c6 01       	movw	r24, r12
    17e0:	aa 27       	eor	r26, r26
    17e2:	bb 27       	eor	r27, r27
    17e4:	5c 01       	movw	r10, r24
    17e6:	6d 01       	movw	r12, r26
    17e8:	ae 28       	or	r10, r14
    17ea:	bf 28       	or	r11, r15
    17ec:	c0 2a       	or	r12, r16
    17ee:	d1 2a       	or	r13, r17
    17f0:	a2 16       	cp	r10, r18
    17f2:	b3 06       	cpc	r11, r19
    17f4:	c4 06       	cpc	r12, r20
    17f6:	d5 06       	cpc	r13, r21
    17f8:	90 f4       	brcc	.+36     	; 0x181e <__moddi3+0x6e4>
    17fa:	a2 0c       	add	r10, r2
    17fc:	b3 1c       	adc	r11, r3
    17fe:	c4 1c       	adc	r12, r4
    1800:	d5 1c       	adc	r13, r5
    1802:	a2 14       	cp	r10, r2
    1804:	b3 04       	cpc	r11, r3
    1806:	c4 04       	cpc	r12, r4
    1808:	d5 04       	cpc	r13, r5
    180a:	48 f0       	brcs	.+18     	; 0x181e <__moddi3+0x6e4>
    180c:	a2 16       	cp	r10, r18
    180e:	b3 06       	cpc	r11, r19
    1810:	c4 06       	cpc	r12, r20
    1812:	d5 06       	cpc	r13, r21
    1814:	20 f4       	brcc	.+8      	; 0x181e <__moddi3+0x6e4>
    1816:	a2 0c       	add	r10, r2
    1818:	b3 1c       	adc	r11, r3
    181a:	c4 1c       	adc	r12, r4
    181c:	d5 1c       	adc	r13, r5
    181e:	a2 1a       	sub	r10, r18
    1820:	b3 0a       	sbc	r11, r19
    1822:	c4 0a       	sbc	r12, r20
    1824:	d5 0a       	sbc	r13, r21
    1826:	c6 01       	movw	r24, r12
    1828:	b5 01       	movw	r22, r10
    182a:	a4 01       	movw	r20, r8
    182c:	93 01       	movw	r18, r6
    182e:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1832:	7b 01       	movw	r14, r22
    1834:	8c 01       	movw	r16, r24
    1836:	c6 01       	movw	r24, r12
    1838:	b5 01       	movw	r22, r10
    183a:	a4 01       	movw	r20, r8
    183c:	93 01       	movw	r18, r6
    183e:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1842:	ca 01       	movw	r24, r20
    1844:	b9 01       	movw	r22, r18
    1846:	6d 96       	adiw	r28, 0x1d	; 29
    1848:	2c ad       	ldd	r18, Y+60	; 0x3c
    184a:	3d ad       	ldd	r19, Y+61	; 0x3d
    184c:	4e ad       	ldd	r20, Y+62	; 0x3e
    184e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1850:	6d 97       	sbiw	r28, 0x1d	; 29
    1852:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	87 01       	movw	r16, r14
    185c:	ff 24       	eor	r15, r15
    185e:	ee 24       	eor	r14, r14
    1860:	29 96       	adiw	r28, 0x09	; 9
    1862:	8c ad       	ldd	r24, Y+60	; 0x3c
    1864:	9d ad       	ldd	r25, Y+61	; 0x3d
    1866:	ae ad       	ldd	r26, Y+62	; 0x3e
    1868:	bf ad       	ldd	r27, Y+63	; 0x3f
    186a:	29 97       	sbiw	r28, 0x09	; 9
    186c:	a0 70       	andi	r26, 0x00	; 0
    186e:	b0 70       	andi	r27, 0x00	; 0
    1870:	57 01       	movw	r10, r14
    1872:	68 01       	movw	r12, r16
    1874:	a8 2a       	or	r10, r24
    1876:	b9 2a       	or	r11, r25
    1878:	ca 2a       	or	r12, r26
    187a:	db 2a       	or	r13, r27
    187c:	a2 16       	cp	r10, r18
    187e:	b3 06       	cpc	r11, r19
    1880:	c4 06       	cpc	r12, r20
    1882:	d5 06       	cpc	r13, r21
    1884:	90 f4       	brcc	.+36     	; 0x18aa <__moddi3+0x770>
    1886:	a2 0c       	add	r10, r2
    1888:	b3 1c       	adc	r11, r3
    188a:	c4 1c       	adc	r12, r4
    188c:	d5 1c       	adc	r13, r5
    188e:	a2 14       	cp	r10, r2
    1890:	b3 04       	cpc	r11, r3
    1892:	c4 04       	cpc	r12, r4
    1894:	d5 04       	cpc	r13, r5
    1896:	48 f0       	brcs	.+18     	; 0x18aa <__moddi3+0x770>
    1898:	a2 16       	cp	r10, r18
    189a:	b3 06       	cpc	r11, r19
    189c:	c4 06       	cpc	r12, r20
    189e:	d5 06       	cpc	r13, r21
    18a0:	20 f4       	brcc	.+8      	; 0x18aa <__moddi3+0x770>
    18a2:	a2 0c       	add	r10, r2
    18a4:	b3 1c       	adc	r11, r3
    18a6:	c4 1c       	adc	r12, r4
    18a8:	d5 1c       	adc	r13, r5
    18aa:	e8 96       	adiw	r28, 0x38	; 56
    18ac:	ec ac       	ldd	r14, Y+60	; 0x3c
    18ae:	fd ac       	ldd	r15, Y+61	; 0x3d
    18b0:	0e ad       	ldd	r16, Y+62	; 0x3e
    18b2:	1f ad       	ldd	r17, Y+63	; 0x3f
    18b4:	e8 97       	sbiw	r28, 0x38	; 56
    18b6:	e4 96       	adiw	r28, 0x34	; 52
    18b8:	0f ac       	ldd	r0, Y+63	; 0x3f
    18ba:	e4 97       	sbiw	r28, 0x34	; 52
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__moddi3+0x78c>
    18be:	ee 0c       	add	r14, r14
    18c0:	ff 1c       	adc	r15, r15
    18c2:	00 1f       	adc	r16, r16
    18c4:	11 1f       	adc	r17, r17
    18c6:	0a 94       	dec	r0
    18c8:	d2 f7       	brpl	.-12     	; 0x18be <__moddi3+0x784>
    18ca:	2d 96       	adiw	r28, 0x0d	; 13
    18cc:	ec ae       	std	Y+60, r14	; 0x3c
    18ce:	fd ae       	std	Y+61, r15	; 0x3d
    18d0:	0e af       	std	Y+62, r16	; 0x3e
    18d2:	1f af       	std	Y+63, r17	; 0x3f
    18d4:	2d 97       	sbiw	r28, 0x0d	; 13
    18d6:	a2 1a       	sub	r10, r18
    18d8:	b3 0a       	sbc	r11, r19
    18da:	c4 0a       	sbc	r12, r20
    18dc:	d5 0a       	sbc	r13, r21
    18de:	32 01       	movw	r6, r4
    18e0:	88 24       	eor	r8, r8
    18e2:	99 24       	eor	r9, r9
    18e4:	92 01       	movw	r18, r4
    18e6:	81 01       	movw	r16, r2
    18e8:	20 70       	andi	r18, 0x00	; 0
    18ea:	30 70       	andi	r19, 0x00	; 0
    18ec:	a1 96       	adiw	r28, 0x21	; 33
    18ee:	0c af       	std	Y+60, r16	; 0x3c
    18f0:	1d af       	std	Y+61, r17	; 0x3d
    18f2:	2e af       	std	Y+62, r18	; 0x3e
    18f4:	3f af       	std	Y+63, r19	; 0x3f
    18f6:	a1 97       	sbiw	r28, 0x21	; 33
    18f8:	c6 01       	movw	r24, r12
    18fa:	b5 01       	movw	r22, r10
    18fc:	a4 01       	movw	r20, r8
    18fe:	93 01       	movw	r18, r6
    1900:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1904:	7b 01       	movw	r14, r22
    1906:	8c 01       	movw	r16, r24
    1908:	c6 01       	movw	r24, r12
    190a:	b5 01       	movw	r22, r10
    190c:	a4 01       	movw	r20, r8
    190e:	93 01       	movw	r18, r6
    1910:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1914:	ca 01       	movw	r24, r20
    1916:	b9 01       	movw	r22, r18
    1918:	a1 96       	adiw	r28, 0x21	; 33
    191a:	2c ad       	ldd	r18, Y+60	; 0x3c
    191c:	3d ad       	ldd	r19, Y+61	; 0x3d
    191e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1920:	5f ad       	ldd	r21, Y+63	; 0x3f
    1922:	a1 97       	sbiw	r28, 0x21	; 33
    1924:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	87 01       	movw	r16, r14
    192e:	ff 24       	eor	r15, r15
    1930:	ee 24       	eor	r14, r14
    1932:	2d 96       	adiw	r28, 0x0d	; 13
    1934:	ac ac       	ldd	r10, Y+60	; 0x3c
    1936:	bd ac       	ldd	r11, Y+61	; 0x3d
    1938:	ce ac       	ldd	r12, Y+62	; 0x3e
    193a:	df ac       	ldd	r13, Y+63	; 0x3f
    193c:	2d 97       	sbiw	r28, 0x0d	; 13
    193e:	c6 01       	movw	r24, r12
    1940:	aa 27       	eor	r26, r26
    1942:	bb 27       	eor	r27, r27
    1944:	57 01       	movw	r10, r14
    1946:	68 01       	movw	r12, r16
    1948:	a8 2a       	or	r10, r24
    194a:	b9 2a       	or	r11, r25
    194c:	ca 2a       	or	r12, r26
    194e:	db 2a       	or	r13, r27
    1950:	a2 16       	cp	r10, r18
    1952:	b3 06       	cpc	r11, r19
    1954:	c4 06       	cpc	r12, r20
    1956:	d5 06       	cpc	r13, r21
    1958:	90 f4       	brcc	.+36     	; 0x197e <__moddi3+0x844>
    195a:	a2 0c       	add	r10, r2
    195c:	b3 1c       	adc	r11, r3
    195e:	c4 1c       	adc	r12, r4
    1960:	d5 1c       	adc	r13, r5
    1962:	a2 14       	cp	r10, r2
    1964:	b3 04       	cpc	r11, r3
    1966:	c4 04       	cpc	r12, r4
    1968:	d5 04       	cpc	r13, r5
    196a:	48 f0       	brcs	.+18     	; 0x197e <__moddi3+0x844>
    196c:	a2 16       	cp	r10, r18
    196e:	b3 06       	cpc	r11, r19
    1970:	c4 06       	cpc	r12, r20
    1972:	d5 06       	cpc	r13, r21
    1974:	20 f4       	brcc	.+8      	; 0x197e <__moddi3+0x844>
    1976:	a2 0c       	add	r10, r2
    1978:	b3 1c       	adc	r11, r3
    197a:	c4 1c       	adc	r12, r4
    197c:	d5 1c       	adc	r13, r5
    197e:	a2 1a       	sub	r10, r18
    1980:	b3 0a       	sbc	r11, r19
    1982:	c4 0a       	sbc	r12, r20
    1984:	d5 0a       	sbc	r13, r21
    1986:	c6 01       	movw	r24, r12
    1988:	b5 01       	movw	r22, r10
    198a:	a4 01       	movw	r20, r8
    198c:	93 01       	movw	r18, r6
    198e:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1992:	7b 01       	movw	r14, r22
    1994:	8c 01       	movw	r16, r24
    1996:	c6 01       	movw	r24, r12
    1998:	b5 01       	movw	r22, r10
    199a:	a4 01       	movw	r20, r8
    199c:	93 01       	movw	r18, r6
    199e:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    19a2:	ca 01       	movw	r24, r20
    19a4:	b9 01       	movw	r22, r18
    19a6:	a1 96       	adiw	r28, 0x21	; 33
    19a8:	2c ad       	ldd	r18, Y+60	; 0x3c
    19aa:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    19ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    19b0:	a1 97       	sbiw	r28, 0x21	; 33
    19b2:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	87 01       	movw	r16, r14
    19bc:	ff 24       	eor	r15, r15
    19be:	ee 24       	eor	r14, r14
    19c0:	2d 96       	adiw	r28, 0x0d	; 13
    19c2:	8c ad       	ldd	r24, Y+60	; 0x3c
    19c4:	9d ad       	ldd	r25, Y+61	; 0x3d
    19c6:	ae ad       	ldd	r26, Y+62	; 0x3e
    19c8:	bf ad       	ldd	r27, Y+63	; 0x3f
    19ca:	2d 97       	sbiw	r28, 0x0d	; 13
    19cc:	a0 70       	andi	r26, 0x00	; 0
    19ce:	b0 70       	andi	r27, 0x00	; 0
    19d0:	e8 2a       	or	r14, r24
    19d2:	f9 2a       	or	r15, r25
    19d4:	0a 2b       	or	r16, r26
    19d6:	1b 2b       	or	r17, r27
    19d8:	e2 16       	cp	r14, r18
    19da:	f3 06       	cpc	r15, r19
    19dc:	04 07       	cpc	r16, r20
    19de:	15 07       	cpc	r17, r21
    19e0:	90 f4       	brcc	.+36     	; 0x1a06 <__moddi3+0x8cc>
    19e2:	e2 0c       	add	r14, r2
    19e4:	f3 1c       	adc	r15, r3
    19e6:	04 1d       	adc	r16, r4
    19e8:	15 1d       	adc	r17, r5
    19ea:	e2 14       	cp	r14, r2
    19ec:	f3 04       	cpc	r15, r3
    19ee:	04 05       	cpc	r16, r4
    19f0:	15 05       	cpc	r17, r5
    19f2:	48 f0       	brcs	.+18     	; 0x1a06 <__moddi3+0x8cc>
    19f4:	e2 16       	cp	r14, r18
    19f6:	f3 06       	cpc	r15, r19
    19f8:	04 07       	cpc	r16, r20
    19fa:	15 07       	cpc	r17, r21
    19fc:	20 f4       	brcc	.+8      	; 0x1a06 <__moddi3+0x8cc>
    19fe:	e2 0c       	add	r14, r2
    1a00:	f3 1c       	adc	r15, r3
    1a02:	04 1d       	adc	r16, r4
    1a04:	15 1d       	adc	r17, r5
    1a06:	e2 1a       	sub	r14, r18
    1a08:	f3 0a       	sbc	r15, r19
    1a0a:	04 0b       	sbc	r16, r20
    1a0c:	15 0b       	sbc	r17, r21
    1a0e:	d8 01       	movw	r26, r16
    1a10:	c7 01       	movw	r24, r14
    1a12:	62 96       	adiw	r28, 0x12	; 18
    1a14:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a16:	62 97       	sbiw	r28, 0x12	; 18
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <__moddi3+0x8e8>
    1a1a:	b6 95       	lsr	r27
    1a1c:	a7 95       	ror	r26
    1a1e:	97 95       	ror	r25
    1a20:	87 95       	ror	r24
    1a22:	0a 94       	dec	r0
    1a24:	d2 f7       	brpl	.-12     	; 0x1a1a <__moddi3+0x8e0>
    1a26:	89 a7       	std	Y+41, r24	; 0x29
    1a28:	9a a7       	std	Y+42, r25	; 0x2a
    1a2a:	ab a7       	std	Y+43, r26	; 0x2b
    1a2c:	bc a7       	std	Y+44, r27	; 0x2c
    1a2e:	1d a6       	std	Y+45, r1	; 0x2d
    1a30:	1e a6       	std	Y+46, r1	; 0x2e
    1a32:	1f a6       	std	Y+47, r1	; 0x2f
    1a34:	18 aa       	std	Y+48, r1	; 0x30
    1a36:	89 8b       	std	Y+17, r24	; 0x11
    1a38:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a3a:	8a 8b       	std	Y+18, r24	; 0x12
    1a3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a42:	8c 8b       	std	Y+20, r24	; 0x14
    1a44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a46:	8d 8b       	std	Y+21, r24	; 0x15
    1a48:	2f c3       	rjmp	.+1630   	; 0x20a8 <__moddi3+0xf6e>
    1a4a:	6a 14       	cp	r6, r10
    1a4c:	7b 04       	cpc	r7, r11
    1a4e:	8c 04       	cpc	r8, r12
    1a50:	9d 04       	cpc	r9, r13
    1a52:	48 f4       	brcc	.+18     	; 0x1a66 <__moddi3+0x92c>
    1a54:	49 8b       	std	Y+17, r20	; 0x11
    1a56:	5a 8b       	std	Y+18, r21	; 0x12
    1a58:	6b 8b       	std	Y+19, r22	; 0x13
    1a5a:	7c 8b       	std	Y+20, r23	; 0x14
    1a5c:	8d 8b       	std	Y+21, r24	; 0x15
    1a5e:	9e 8b       	std	Y+22, r25	; 0x16
    1a60:	2f 8b       	std	Y+23, r18	; 0x17
    1a62:	38 8f       	std	Y+24, r19	; 0x18
    1a64:	27 c3       	rjmp	.+1614   	; 0x20b4 <__moddi3+0xf7a>
    1a66:	00 e0       	ldi	r16, 0x00	; 0
    1a68:	a0 16       	cp	r10, r16
    1a6a:	00 e0       	ldi	r16, 0x00	; 0
    1a6c:	b0 06       	cpc	r11, r16
    1a6e:	01 e0       	ldi	r16, 0x01	; 1
    1a70:	c0 06       	cpc	r12, r16
    1a72:	00 e0       	ldi	r16, 0x00	; 0
    1a74:	d0 06       	cpc	r13, r16
    1a76:	88 f4       	brcc	.+34     	; 0x1a9a <__moddi3+0x960>
    1a78:	1f ef       	ldi	r17, 0xFF	; 255
    1a7a:	a1 16       	cp	r10, r17
    1a7c:	b1 04       	cpc	r11, r1
    1a7e:	c1 04       	cpc	r12, r1
    1a80:	d1 04       	cpc	r13, r1
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <__moddi3+0x958>
    1a84:	30 f0       	brcs	.+12     	; 0x1a92 <__moddi3+0x958>
    1a86:	28 e0       	ldi	r18, 0x08	; 8
    1a88:	e2 2e       	mov	r14, r18
    1a8a:	f1 2c       	mov	r15, r1
    1a8c:	01 2d       	mov	r16, r1
    1a8e:	11 2d       	mov	r17, r1
    1a90:	18 c0       	rjmp	.+48     	; 0x1ac2 <__moddi3+0x988>
    1a92:	ee 24       	eor	r14, r14
    1a94:	ff 24       	eor	r15, r15
    1a96:	87 01       	movw	r16, r14
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <__moddi3+0x988>
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	a2 16       	cp	r10, r18
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	b2 06       	cpc	r11, r18
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	c2 06       	cpc	r12, r18
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	d2 06       	cpc	r13, r18
    1aaa:	30 f0       	brcs	.+12     	; 0x1ab8 <__moddi3+0x97e>
    1aac:	98 e1       	ldi	r25, 0x18	; 24
    1aae:	e9 2e       	mov	r14, r25
    1ab0:	f1 2c       	mov	r15, r1
    1ab2:	01 2d       	mov	r16, r1
    1ab4:	11 2d       	mov	r17, r1
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <__moddi3+0x988>
    1ab8:	80 e1       	ldi	r24, 0x10	; 16
    1aba:	e8 2e       	mov	r14, r24
    1abc:	f1 2c       	mov	r15, r1
    1abe:	01 2d       	mov	r16, r1
    1ac0:	11 2d       	mov	r17, r1
    1ac2:	d6 01       	movw	r26, r12
    1ac4:	c5 01       	movw	r24, r10
    1ac6:	0e 2c       	mov	r0, r14
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <__moddi3+0x998>
    1aca:	b6 95       	lsr	r27
    1acc:	a7 95       	ror	r26
    1ace:	97 95       	ror	r25
    1ad0:	87 95       	ror	r24
    1ad2:	0a 94       	dec	r0
    1ad4:	d2 f7       	brpl	.-12     	; 0x1aca <__moddi3+0x990>
    1ad6:	86 50       	subi	r24, 0x06	; 6
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	dc 01       	movw	r26, r24
    1adc:	2c 91       	ld	r18, X
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	8e 19       	sub	r24, r14
    1ae8:	9f 09       	sbc	r25, r15
    1aea:	a0 0b       	sbc	r26, r16
    1aec:	b1 0b       	sbc	r27, r17
    1aee:	82 1b       	sub	r24, r18
    1af0:	91 09       	sbc	r25, r1
    1af2:	a1 09       	sbc	r26, r1
    1af4:	b1 09       	sbc	r27, r1
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	a1 05       	cpc	r26, r1
    1afa:	b1 05       	cpc	r27, r1
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <__moddi3+0x9c6>
    1afe:	59 c0       	rjmp	.+178    	; 0x1bb2 <__moddi3+0xa78>
    1b00:	a6 14       	cp	r10, r6
    1b02:	b7 04       	cpc	r11, r7
    1b04:	c8 04       	cpc	r12, r8
    1b06:	d9 04       	cpc	r13, r9
    1b08:	70 f0       	brcs	.+28     	; 0x1b26 <__moddi3+0x9ec>
    1b0a:	e8 96       	adiw	r28, 0x38	; 56
    1b0c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1b0e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1b10:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b12:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b14:	e8 97       	sbiw	r28, 0x38	; 56
    1b16:	e2 14       	cp	r14, r2
    1b18:	f3 04       	cpc	r15, r3
    1b1a:	04 05       	cpc	r16, r4
    1b1c:	15 05       	cpc	r17, r5
    1b1e:	18 f4       	brcc	.+6      	; 0x1b26 <__moddi3+0x9ec>
    1b20:	d8 01       	movw	r26, r16
    1b22:	c7 01       	movw	r24, r14
    1b24:	2f c0       	rjmp	.+94     	; 0x1b84 <__moddi3+0xa4a>
    1b26:	e8 96       	adiw	r28, 0x38	; 56
    1b28:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b30:	e8 97       	sbiw	r28, 0x38	; 56
    1b32:	82 19       	sub	r24, r2
    1b34:	93 09       	sbc	r25, r3
    1b36:	a4 09       	sbc	r26, r4
    1b38:	b5 09       	sbc	r27, r5
    1b3a:	a4 01       	movw	r20, r8
    1b3c:	93 01       	movw	r18, r6
    1b3e:	2a 19       	sub	r18, r10
    1b40:	3b 09       	sbc	r19, r11
    1b42:	4c 09       	sbc	r20, r12
    1b44:	5d 09       	sbc	r21, r13
    1b46:	aa 24       	eor	r10, r10
    1b48:	bb 24       	eor	r11, r11
    1b4a:	65 01       	movw	r12, r10
    1b4c:	e8 96       	adiw	r28, 0x38	; 56
    1b4e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1b50:	7d ac       	ldd	r7, Y+61	; 0x3d
    1b52:	8e ac       	ldd	r8, Y+62	; 0x3e
    1b54:	9f ac       	ldd	r9, Y+63	; 0x3f
    1b56:	e8 97       	sbiw	r28, 0x38	; 56
    1b58:	68 16       	cp	r6, r24
    1b5a:	79 06       	cpc	r7, r25
    1b5c:	8a 06       	cpc	r8, r26
    1b5e:	9b 06       	cpc	r9, r27
    1b60:	28 f4       	brcc	.+10     	; 0x1b6c <__moddi3+0xa32>
    1b62:	11 e0       	ldi	r17, 0x01	; 1
    1b64:	a1 2e       	mov	r10, r17
    1b66:	b1 2c       	mov	r11, r1
    1b68:	c1 2c       	mov	r12, r1
    1b6a:	d1 2c       	mov	r13, r1
    1b6c:	79 01       	movw	r14, r18
    1b6e:	8a 01       	movw	r16, r20
    1b70:	ea 18       	sub	r14, r10
    1b72:	fb 08       	sbc	r15, r11
    1b74:	0c 09       	sbc	r16, r12
    1b76:	1d 09       	sbc	r17, r13
    1b78:	61 96       	adiw	r28, 0x11	; 17
    1b7a:	ec ae       	std	Y+60, r14	; 0x3c
    1b7c:	fd ae       	std	Y+61, r15	; 0x3d
    1b7e:	0e af       	std	Y+62, r16	; 0x3e
    1b80:	1f af       	std	Y+63, r17	; 0x3f
    1b82:	61 97       	sbiw	r28, 0x11	; 17
    1b84:	89 a7       	std	Y+41, r24	; 0x29
    1b86:	9a a7       	std	Y+42, r25	; 0x2a
    1b88:	ab a7       	std	Y+43, r26	; 0x2b
    1b8a:	bc a7       	std	Y+44, r27	; 0x2c
    1b8c:	61 96       	adiw	r28, 0x11	; 17
    1b8e:	0c ad       	ldd	r16, Y+60	; 0x3c
    1b90:	1d ad       	ldd	r17, Y+61	; 0x3d
    1b92:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b94:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b96:	61 97       	sbiw	r28, 0x11	; 17
    1b98:	0d a7       	std	Y+45, r16	; 0x2d
    1b9a:	1e a7       	std	Y+46, r17	; 0x2e
    1b9c:	2f a7       	std	Y+47, r18	; 0x2f
    1b9e:	38 ab       	std	Y+48, r19	; 0x30
    1ba0:	89 8b       	std	Y+17, r24	; 0x11
    1ba2:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ba4:	8a 8b       	std	Y+18, r24	; 0x12
    1ba6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
    1baa:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bac:	8c 8b       	std	Y+20, r24	; 0x14
    1bae:	0d 8b       	std	Y+21, r16	; 0x15
    1bb0:	7b c2       	rjmp	.+1270   	; 0x20a8 <__moddi3+0xf6e>
    1bb2:	e3 96       	adiw	r28, 0x33	; 51
    1bb4:	8f af       	std	Y+63, r24	; 0x3f
    1bb6:	e3 97       	sbiw	r28, 0x33	; 51
    1bb8:	a6 01       	movw	r20, r12
    1bba:	95 01       	movw	r18, r10
    1bbc:	08 2e       	mov	r0, r24
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <__moddi3+0xa8e>
    1bc0:	22 0f       	add	r18, r18
    1bc2:	33 1f       	adc	r19, r19
    1bc4:	44 1f       	adc	r20, r20
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	0a 94       	dec	r0
    1bca:	d2 f7       	brpl	.-12     	; 0x1bc0 <__moddi3+0xa86>
    1bcc:	10 e2       	ldi	r17, 0x20	; 32
    1bce:	18 1b       	sub	r17, r24
    1bd0:	e2 96       	adiw	r28, 0x32	; 50
    1bd2:	1f af       	std	Y+63, r17	; 0x3f
    1bd4:	e2 97       	sbiw	r28, 0x32	; 50
    1bd6:	d2 01       	movw	r26, r4
    1bd8:	c1 01       	movw	r24, r2
    1bda:	01 2e       	mov	r0, r17
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <__moddi3+0xaac>
    1bde:	b6 95       	lsr	r27
    1be0:	a7 95       	ror	r26
    1be2:	97 95       	ror	r25
    1be4:	87 95       	ror	r24
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <__moddi3+0xaa4>
    1bea:	5c 01       	movw	r10, r24
    1bec:	6d 01       	movw	r12, r26
    1bee:	a2 2a       	or	r10, r18
    1bf0:	b3 2a       	or	r11, r19
    1bf2:	c4 2a       	or	r12, r20
    1bf4:	d5 2a       	or	r13, r21
    1bf6:	25 96       	adiw	r28, 0x05	; 5
    1bf8:	ac ae       	std	Y+60, r10	; 0x3c
    1bfa:	bd ae       	std	Y+61, r11	; 0x3d
    1bfc:	ce ae       	std	Y+62, r12	; 0x3e
    1bfe:	df ae       	std	Y+63, r13	; 0x3f
    1c00:	25 97       	sbiw	r28, 0x05	; 5
    1c02:	72 01       	movw	r14, r4
    1c04:	61 01       	movw	r12, r2
    1c06:	e3 96       	adiw	r28, 0x33	; 51
    1c08:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c0a:	e3 97       	sbiw	r28, 0x33	; 51
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <__moddi3+0xadc>
    1c0e:	cc 0c       	add	r12, r12
    1c10:	dd 1c       	adc	r13, r13
    1c12:	ee 1c       	adc	r14, r14
    1c14:	ff 1c       	adc	r15, r15
    1c16:	0a 94       	dec	r0
    1c18:	d2 f7       	brpl	.-12     	; 0x1c0e <__moddi3+0xad4>
    1c1a:	21 96       	adiw	r28, 0x01	; 1
    1c1c:	cc ae       	std	Y+60, r12	; 0x3c
    1c1e:	dd ae       	std	Y+61, r13	; 0x3d
    1c20:	ee ae       	std	Y+62, r14	; 0x3e
    1c22:	ff ae       	std	Y+63, r15	; 0x3f
    1c24:	21 97       	sbiw	r28, 0x01	; 1
    1c26:	64 01       	movw	r12, r8
    1c28:	53 01       	movw	r10, r6
    1c2a:	01 2e       	mov	r0, r17
    1c2c:	04 c0       	rjmp	.+8      	; 0x1c36 <__moddi3+0xafc>
    1c2e:	d6 94       	lsr	r13
    1c30:	c7 94       	ror	r12
    1c32:	b7 94       	ror	r11
    1c34:	a7 94       	ror	r10
    1c36:	0a 94       	dec	r0
    1c38:	d2 f7       	brpl	.-12     	; 0x1c2e <__moddi3+0xaf4>
    1c3a:	a4 01       	movw	r20, r8
    1c3c:	93 01       	movw	r18, r6
    1c3e:	e3 96       	adiw	r28, 0x33	; 51
    1c40:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c42:	e3 97       	sbiw	r28, 0x33	; 51
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <__moddi3+0xb14>
    1c46:	22 0f       	add	r18, r18
    1c48:	33 1f       	adc	r19, r19
    1c4a:	44 1f       	adc	r20, r20
    1c4c:	55 1f       	adc	r21, r21
    1c4e:	0a 94       	dec	r0
    1c50:	d2 f7       	brpl	.-12     	; 0x1c46 <__moddi3+0xb0c>
    1c52:	e8 96       	adiw	r28, 0x38	; 56
    1c54:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c56:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c58:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c5a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c5c:	e8 97       	sbiw	r28, 0x38	; 56
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <__moddi3+0xb2e>
    1c60:	b6 95       	lsr	r27
    1c62:	a7 95       	ror	r26
    1c64:	97 95       	ror	r25
    1c66:	87 95       	ror	r24
    1c68:	1a 95       	dec	r17
    1c6a:	d2 f7       	brpl	.-12     	; 0x1c60 <__moddi3+0xb26>
    1c6c:	7c 01       	movw	r14, r24
    1c6e:	8d 01       	movw	r16, r26
    1c70:	e2 2a       	or	r14, r18
    1c72:	f3 2a       	or	r15, r19
    1c74:	04 2b       	or	r16, r20
    1c76:	15 2b       	or	r17, r21
    1c78:	e9 ae       	std	Y+57, r14	; 0x39
    1c7a:	fa ae       	std	Y+58, r15	; 0x3a
    1c7c:	0b af       	std	Y+59, r16	; 0x3b
    1c7e:	1c af       	std	Y+60, r17	; 0x3c
    1c80:	e8 96       	adiw	r28, 0x38	; 56
    1c82:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c84:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c86:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c88:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c8a:	e8 97       	sbiw	r28, 0x38	; 56
    1c8c:	e3 96       	adiw	r28, 0x33	; 51
    1c8e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c90:	e3 97       	sbiw	r28, 0x33	; 51
    1c92:	04 c0       	rjmp	.+8      	; 0x1c9c <__moddi3+0xb62>
    1c94:	00 0f       	add	r16, r16
    1c96:	11 1f       	adc	r17, r17
    1c98:	22 1f       	adc	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	0a 94       	dec	r0
    1c9e:	d2 f7       	brpl	.-12     	; 0x1c94 <__moddi3+0xb5a>
    1ca0:	0d ab       	std	Y+53, r16	; 0x35
    1ca2:	1e ab       	std	Y+54, r17	; 0x36
    1ca4:	2f ab       	std	Y+55, r18	; 0x37
    1ca6:	38 af       	std	Y+56, r19	; 0x38
    1ca8:	25 96       	adiw	r28, 0x05	; 5
    1caa:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cac:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cae:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cb0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb2:	25 97       	sbiw	r28, 0x05	; 5
    1cb4:	3a 01       	movw	r6, r20
    1cb6:	88 24       	eor	r8, r8
    1cb8:	99 24       	eor	r9, r9
    1cba:	40 70       	andi	r20, 0x00	; 0
    1cbc:	50 70       	andi	r21, 0x00	; 0
    1cbe:	a5 96       	adiw	r28, 0x25	; 37
    1cc0:	2c af       	std	Y+60, r18	; 0x3c
    1cc2:	3d af       	std	Y+61, r19	; 0x3d
    1cc4:	4e af       	std	Y+62, r20	; 0x3e
    1cc6:	5f af       	std	Y+63, r21	; 0x3f
    1cc8:	a5 97       	sbiw	r28, 0x25	; 37
    1cca:	c6 01       	movw	r24, r12
    1ccc:	b5 01       	movw	r22, r10
    1cce:	a4 01       	movw	r20, r8
    1cd0:	93 01       	movw	r18, r6
    1cd2:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1cd6:	7b 01       	movw	r14, r22
    1cd8:	8c 01       	movw	r16, r24
    1cda:	c6 01       	movw	r24, r12
    1cdc:	b5 01       	movw	r22, r10
    1cde:	a4 01       	movw	r20, r8
    1ce0:	93 01       	movw	r18, r6
    1ce2:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1ce6:	c9 01       	movw	r24, r18
    1ce8:	da 01       	movw	r26, r20
    1cea:	1c 01       	movw	r2, r24
    1cec:	2d 01       	movw	r4, r26
    1cee:	c2 01       	movw	r24, r4
    1cf0:	b1 01       	movw	r22, r2
    1cf2:	a5 96       	adiw	r28, 0x25	; 37
    1cf4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cf6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cf8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cfa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cfc:	a5 97       	sbiw	r28, 0x25	; 37
    1cfe:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	87 01       	movw	r16, r14
    1d08:	ff 24       	eor	r15, r15
    1d0a:	ee 24       	eor	r14, r14
    1d0c:	a9 ac       	ldd	r10, Y+57	; 0x39
    1d0e:	ba ac       	ldd	r11, Y+58	; 0x3a
    1d10:	cb ac       	ldd	r12, Y+59	; 0x3b
    1d12:	dc ac       	ldd	r13, Y+60	; 0x3c
    1d14:	c6 01       	movw	r24, r12
    1d16:	aa 27       	eor	r26, r26
    1d18:	bb 27       	eor	r27, r27
    1d1a:	57 01       	movw	r10, r14
    1d1c:	68 01       	movw	r12, r16
    1d1e:	a8 2a       	or	r10, r24
    1d20:	b9 2a       	or	r11, r25
    1d22:	ca 2a       	or	r12, r26
    1d24:	db 2a       	or	r13, r27
    1d26:	a2 16       	cp	r10, r18
    1d28:	b3 06       	cpc	r11, r19
    1d2a:	c4 06       	cpc	r12, r20
    1d2c:	d5 06       	cpc	r13, r21
    1d2e:	10 f5       	brcc	.+68     	; 0x1d74 <__moddi3+0xc3a>
    1d30:	08 94       	sec
    1d32:	21 08       	sbc	r2, r1
    1d34:	31 08       	sbc	r3, r1
    1d36:	41 08       	sbc	r4, r1
    1d38:	51 08       	sbc	r5, r1
    1d3a:	25 96       	adiw	r28, 0x05	; 5
    1d3c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1d3e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1d40:	0e ad       	ldd	r16, Y+62	; 0x3e
    1d42:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d44:	25 97       	sbiw	r28, 0x05	; 5
    1d46:	ae 0c       	add	r10, r14
    1d48:	bf 1c       	adc	r11, r15
    1d4a:	c0 1e       	adc	r12, r16
    1d4c:	d1 1e       	adc	r13, r17
    1d4e:	ae 14       	cp	r10, r14
    1d50:	bf 04       	cpc	r11, r15
    1d52:	c0 06       	cpc	r12, r16
    1d54:	d1 06       	cpc	r13, r17
    1d56:	70 f0       	brcs	.+28     	; 0x1d74 <__moddi3+0xc3a>
    1d58:	a2 16       	cp	r10, r18
    1d5a:	b3 06       	cpc	r11, r19
    1d5c:	c4 06       	cpc	r12, r20
    1d5e:	d5 06       	cpc	r13, r21
    1d60:	48 f4       	brcc	.+18     	; 0x1d74 <__moddi3+0xc3a>
    1d62:	08 94       	sec
    1d64:	21 08       	sbc	r2, r1
    1d66:	31 08       	sbc	r3, r1
    1d68:	41 08       	sbc	r4, r1
    1d6a:	51 08       	sbc	r5, r1
    1d6c:	ae 0c       	add	r10, r14
    1d6e:	bf 1c       	adc	r11, r15
    1d70:	c0 1e       	adc	r12, r16
    1d72:	d1 1e       	adc	r13, r17
    1d74:	a2 1a       	sub	r10, r18
    1d76:	b3 0a       	sbc	r11, r19
    1d78:	c4 0a       	sbc	r12, r20
    1d7a:	d5 0a       	sbc	r13, r21
    1d7c:	c6 01       	movw	r24, r12
    1d7e:	b5 01       	movw	r22, r10
    1d80:	a4 01       	movw	r20, r8
    1d82:	93 01       	movw	r18, r6
    1d84:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1d88:	7b 01       	movw	r14, r22
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	c6 01       	movw	r24, r12
    1d8e:	b5 01       	movw	r22, r10
    1d90:	a4 01       	movw	r20, r8
    1d92:	93 01       	movw	r18, r6
    1d94:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    1d98:	c9 01       	movw	r24, r18
    1d9a:	da 01       	movw	r26, r20
    1d9c:	3c 01       	movw	r6, r24
    1d9e:	4d 01       	movw	r8, r26
    1da0:	c4 01       	movw	r24, r8
    1da2:	b3 01       	movw	r22, r6
    1da4:	a5 96       	adiw	r28, 0x25	; 37
    1da6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1da8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1daa:	4e ad       	ldd	r20, Y+62	; 0x3e
    1dac:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dae:	a5 97       	sbiw	r28, 0x25	; 37
    1db0:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    1db4:	9b 01       	movw	r18, r22
    1db6:	ac 01       	movw	r20, r24
    1db8:	87 01       	movw	r16, r14
    1dba:	ff 24       	eor	r15, r15
    1dbc:	ee 24       	eor	r14, r14
    1dbe:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dc2:	ab ad       	ldd	r26, Y+59	; 0x3b
    1dc4:	bc ad       	ldd	r27, Y+60	; 0x3c
    1dc6:	a0 70       	andi	r26, 0x00	; 0
    1dc8:	b0 70       	andi	r27, 0x00	; 0
    1dca:	57 01       	movw	r10, r14
    1dcc:	68 01       	movw	r12, r16
    1dce:	a8 2a       	or	r10, r24
    1dd0:	b9 2a       	or	r11, r25
    1dd2:	ca 2a       	or	r12, r26
    1dd4:	db 2a       	or	r13, r27
    1dd6:	a2 16       	cp	r10, r18
    1dd8:	b3 06       	cpc	r11, r19
    1dda:	c4 06       	cpc	r12, r20
    1ddc:	d5 06       	cpc	r13, r21
    1dde:	10 f5       	brcc	.+68     	; 0x1e24 <__moddi3+0xcea>
    1de0:	08 94       	sec
    1de2:	61 08       	sbc	r6, r1
    1de4:	71 08       	sbc	r7, r1
    1de6:	81 08       	sbc	r8, r1
    1de8:	91 08       	sbc	r9, r1
    1dea:	25 96       	adiw	r28, 0x05	; 5
    1dec:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dee:	7d ad       	ldd	r23, Y+61	; 0x3d
    1df0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1df2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1df4:	25 97       	sbiw	r28, 0x05	; 5
    1df6:	a6 0e       	add	r10, r22
    1df8:	b7 1e       	adc	r11, r23
    1dfa:	c8 1e       	adc	r12, r24
    1dfc:	d9 1e       	adc	r13, r25
    1dfe:	a6 16       	cp	r10, r22
    1e00:	b7 06       	cpc	r11, r23
    1e02:	c8 06       	cpc	r12, r24
    1e04:	d9 06       	cpc	r13, r25
    1e06:	70 f0       	brcs	.+28     	; 0x1e24 <__moddi3+0xcea>
    1e08:	a2 16       	cp	r10, r18
    1e0a:	b3 06       	cpc	r11, r19
    1e0c:	c4 06       	cpc	r12, r20
    1e0e:	d5 06       	cpc	r13, r21
    1e10:	48 f4       	brcc	.+18     	; 0x1e24 <__moddi3+0xcea>
    1e12:	08 94       	sec
    1e14:	61 08       	sbc	r6, r1
    1e16:	71 08       	sbc	r7, r1
    1e18:	81 08       	sbc	r8, r1
    1e1a:	91 08       	sbc	r9, r1
    1e1c:	a6 0e       	add	r10, r22
    1e1e:	b7 1e       	adc	r11, r23
    1e20:	c8 1e       	adc	r12, r24
    1e22:	d9 1e       	adc	r13, r25
    1e24:	d6 01       	movw	r26, r12
    1e26:	c5 01       	movw	r24, r10
    1e28:	82 1b       	sub	r24, r18
    1e2a:	93 0b       	sbc	r25, r19
    1e2c:	a4 0b       	sbc	r26, r20
    1e2e:	b5 0b       	sbc	r27, r21
    1e30:	89 ab       	std	Y+49, r24	; 0x31
    1e32:	9a ab       	std	Y+50, r25	; 0x32
    1e34:	ab ab       	std	Y+51, r26	; 0x33
    1e36:	bc ab       	std	Y+52, r27	; 0x34
    1e38:	d1 01       	movw	r26, r2
    1e3a:	99 27       	eor	r25, r25
    1e3c:	88 27       	eor	r24, r24
    1e3e:	84 01       	movw	r16, r8
    1e40:	73 01       	movw	r14, r6
    1e42:	e8 2a       	or	r14, r24
    1e44:	f9 2a       	or	r15, r25
    1e46:	0a 2b       	or	r16, r26
    1e48:	1b 2b       	or	r17, r27
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	a8 2e       	mov	r10, r24
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	b8 2e       	mov	r11, r24
    1e52:	c1 2c       	mov	r12, r1
    1e54:	d1 2c       	mov	r13, r1
    1e56:	ae 20       	and	r10, r14
    1e58:	bf 20       	and	r11, r15
    1e5a:	c0 22       	and	r12, r16
    1e5c:	d1 22       	and	r13, r17
    1e5e:	78 01       	movw	r14, r16
    1e60:	00 27       	eor	r16, r16
    1e62:	11 27       	eor	r17, r17
    1e64:	21 96       	adiw	r28, 0x01	; 1
    1e66:	6c ac       	ldd	r6, Y+60	; 0x3c
    1e68:	7d ac       	ldd	r7, Y+61	; 0x3d
    1e6a:	8e ac       	ldd	r8, Y+62	; 0x3e
    1e6c:	9f ac       	ldd	r9, Y+63	; 0x3f
    1e6e:	21 97       	sbiw	r28, 0x01	; 1
    1e70:	2f ef       	ldi	r18, 0xFF	; 255
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	62 22       	and	r6, r18
    1e7a:	73 22       	and	r7, r19
    1e7c:	84 22       	and	r8, r20
    1e7e:	95 22       	and	r9, r21
    1e80:	21 96       	adiw	r28, 0x01	; 1
    1e82:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e84:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e8a:	21 97       	sbiw	r28, 0x01	; 1
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	66 27       	eor	r22, r22
    1e90:	77 27       	eor	r23, r23
    1e92:	ad 96       	adiw	r28, 0x2d	; 45
    1e94:	4c af       	std	Y+60, r20	; 0x3c
    1e96:	5d af       	std	Y+61, r21	; 0x3d
    1e98:	6e af       	std	Y+62, r22	; 0x3e
    1e9a:	7f af       	std	Y+63, r23	; 0x3f
    1e9c:	ad 97       	sbiw	r28, 0x2d	; 45
    1e9e:	c6 01       	movw	r24, r12
    1ea0:	b5 01       	movw	r22, r10
    1ea2:	a4 01       	movw	r20, r8
    1ea4:	93 01       	movw	r18, r6
    1ea6:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    1eaa:	a9 96       	adiw	r28, 0x29	; 41
    1eac:	6c af       	std	Y+60, r22	; 0x3c
    1eae:	7d af       	std	Y+61, r23	; 0x3d
    1eb0:	8e af       	std	Y+62, r24	; 0x3e
    1eb2:	9f af       	std	Y+63, r25	; 0x3f
    1eb4:	a9 97       	sbiw	r28, 0x29	; 41
    1eb6:	c6 01       	movw	r24, r12
    1eb8:	b5 01       	movw	r22, r10
    1eba:	ad 96       	adiw	r28, 0x2d	; 45
    1ebc:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ebe:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ec0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ec2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ec4:	ad 97       	sbiw	r28, 0x2d	; 45
    1ec6:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    1eca:	1b 01       	movw	r2, r22
    1ecc:	2c 01       	movw	r4, r24
    1ece:	c8 01       	movw	r24, r16
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	a4 01       	movw	r20, r8
    1ed4:	93 01       	movw	r18, r6
    1ed6:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    1eda:	5b 01       	movw	r10, r22
    1edc:	6c 01       	movw	r12, r24
    1ede:	c8 01       	movw	r24, r16
    1ee0:	b7 01       	movw	r22, r14
    1ee2:	ad 96       	adiw	r28, 0x2d	; 45
    1ee4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ee6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ee8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eea:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eec:	ad 97       	sbiw	r28, 0x2d	; 45
    1eee:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    1ef2:	7b 01       	movw	r14, r22
    1ef4:	8c 01       	movw	r16, r24
    1ef6:	a6 01       	movw	r20, r12
    1ef8:	95 01       	movw	r18, r10
    1efa:	22 0d       	add	r18, r2
    1efc:	33 1d       	adc	r19, r3
    1efe:	44 1d       	adc	r20, r4
    1f00:	55 1d       	adc	r21, r5
    1f02:	a9 96       	adiw	r28, 0x29	; 41
    1f04:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f06:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f08:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f0a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f0c:	a9 97       	sbiw	r28, 0x29	; 41
    1f0e:	c4 01       	movw	r24, r8
    1f10:	aa 27       	eor	r26, r26
    1f12:	bb 27       	eor	r27, r27
    1f14:	28 0f       	add	r18, r24
    1f16:	39 1f       	adc	r19, r25
    1f18:	4a 1f       	adc	r20, r26
    1f1a:	5b 1f       	adc	r21, r27
    1f1c:	2a 15       	cp	r18, r10
    1f1e:	3b 05       	cpc	r19, r11
    1f20:	4c 05       	cpc	r20, r12
    1f22:	5d 05       	cpc	r21, r13
    1f24:	48 f4       	brcc	.+18     	; 0x1f38 <__moddi3+0xdfe>
    1f26:	81 2c       	mov	r8, r1
    1f28:	91 2c       	mov	r9, r1
    1f2a:	e1 e0       	ldi	r30, 0x01	; 1
    1f2c:	ae 2e       	mov	r10, r30
    1f2e:	b1 2c       	mov	r11, r1
    1f30:	e8 0c       	add	r14, r8
    1f32:	f9 1c       	adc	r15, r9
    1f34:	0a 1d       	adc	r16, r10
    1f36:	1b 1d       	adc	r17, r11
    1f38:	ca 01       	movw	r24, r20
    1f3a:	aa 27       	eor	r26, r26
    1f3c:	bb 27       	eor	r27, r27
    1f3e:	57 01       	movw	r10, r14
    1f40:	68 01       	movw	r12, r16
    1f42:	a8 0e       	add	r10, r24
    1f44:	b9 1e       	adc	r11, r25
    1f46:	ca 1e       	adc	r12, r26
    1f48:	db 1e       	adc	r13, r27
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	33 27       	eor	r19, r19
    1f4e:	22 27       	eor	r18, r18
    1f50:	a9 96       	adiw	r28, 0x29	; 41
    1f52:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f54:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f56:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f5a:	a9 97       	sbiw	r28, 0x29	; 41
    1f5c:	a0 70       	andi	r26, 0x00	; 0
    1f5e:	b0 70       	andi	r27, 0x00	; 0
    1f60:	28 0f       	add	r18, r24
    1f62:	39 1f       	adc	r19, r25
    1f64:	4a 1f       	adc	r20, r26
    1f66:	5b 1f       	adc	r21, r27
    1f68:	e9 a8       	ldd	r14, Y+49	; 0x31
    1f6a:	fa a8       	ldd	r15, Y+50	; 0x32
    1f6c:	0b a9       	ldd	r16, Y+51	; 0x33
    1f6e:	1c a9       	ldd	r17, Y+52	; 0x34
    1f70:	ea 14       	cp	r14, r10
    1f72:	fb 04       	cpc	r15, r11
    1f74:	0c 05       	cpc	r16, r12
    1f76:	1d 05       	cpc	r17, r13
    1f78:	70 f0       	brcs	.+28     	; 0x1f96 <__moddi3+0xe5c>
    1f7a:	ae 14       	cp	r10, r14
    1f7c:	bf 04       	cpc	r11, r15
    1f7e:	c0 06       	cpc	r12, r16
    1f80:	d1 06       	cpc	r13, r17
    1f82:	89 f5       	brne	.+98     	; 0x1fe6 <__moddi3+0xeac>
    1f84:	6d a9       	ldd	r22, Y+53	; 0x35
    1f86:	7e a9       	ldd	r23, Y+54	; 0x36
    1f88:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f8c:	62 17       	cp	r22, r18
    1f8e:	73 07       	cpc	r23, r19
    1f90:	84 07       	cpc	r24, r20
    1f92:	95 07       	cpc	r25, r21
    1f94:	40 f5       	brcc	.+80     	; 0x1fe6 <__moddi3+0xeac>
    1f96:	da 01       	movw	r26, r20
    1f98:	c9 01       	movw	r24, r18
    1f9a:	21 96       	adiw	r28, 0x01	; 1
    1f9c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f9e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1fa0:	8e ac       	ldd	r8, Y+62	; 0x3e
    1fa2:	9f ac       	ldd	r9, Y+63	; 0x3f
    1fa4:	21 97       	sbiw	r28, 0x01	; 1
    1fa6:	86 19       	sub	r24, r6
    1fa8:	97 09       	sbc	r25, r7
    1faa:	a8 09       	sbc	r26, r8
    1fac:	b9 09       	sbc	r27, r9
    1fae:	25 96       	adiw	r28, 0x05	; 5
    1fb0:	ec ac       	ldd	r14, Y+60	; 0x3c
    1fb2:	fd ac       	ldd	r15, Y+61	; 0x3d
    1fb4:	0e ad       	ldd	r16, Y+62	; 0x3e
    1fb6:	1f ad       	ldd	r17, Y+63	; 0x3f
    1fb8:	25 97       	sbiw	r28, 0x05	; 5
    1fba:	ae 18       	sub	r10, r14
    1fbc:	bf 08       	sbc	r11, r15
    1fbe:	c0 0a       	sbc	r12, r16
    1fc0:	d1 0a       	sbc	r13, r17
    1fc2:	ee 24       	eor	r14, r14
    1fc4:	ff 24       	eor	r15, r15
    1fc6:	87 01       	movw	r16, r14
    1fc8:	28 17       	cp	r18, r24
    1fca:	39 07       	cpc	r19, r25
    1fcc:	4a 07       	cpc	r20, r26
    1fce:	5b 07       	cpc	r21, r27
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <__moddi3+0xea2>
    1fd2:	21 e0       	ldi	r18, 0x01	; 1
    1fd4:	e2 2e       	mov	r14, r18
    1fd6:	f1 2c       	mov	r15, r1
    1fd8:	01 2d       	mov	r16, r1
    1fda:	11 2d       	mov	r17, r1
    1fdc:	ae 18       	sub	r10, r14
    1fde:	bf 08       	sbc	r11, r15
    1fe0:	c0 0a       	sbc	r12, r16
    1fe2:	d1 0a       	sbc	r13, r17
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <__moddi3+0xeb0>
    1fe6:	da 01       	movw	r26, r20
    1fe8:	c9 01       	movw	r24, r18
    1fea:	6d a8       	ldd	r6, Y+53	; 0x35
    1fec:	7e a8       	ldd	r7, Y+54	; 0x36
    1fee:	8f a8       	ldd	r8, Y+55	; 0x37
    1ff0:	98 ac       	ldd	r9, Y+56	; 0x38
    1ff2:	68 1a       	sub	r6, r24
    1ff4:	79 0a       	sbc	r7, r25
    1ff6:	8a 0a       	sbc	r8, r26
    1ff8:	9b 0a       	sbc	r9, r27
    1ffa:	09 a9       	ldd	r16, Y+49	; 0x31
    1ffc:	1a a9       	ldd	r17, Y+50	; 0x32
    1ffe:	2b a9       	ldd	r18, Y+51	; 0x33
    2000:	3c a9       	ldd	r19, Y+52	; 0x34
    2002:	0a 19       	sub	r16, r10
    2004:	1b 09       	sbc	r17, r11
    2006:	2c 09       	sbc	r18, r12
    2008:	3d 09       	sbc	r19, r13
    200a:	58 01       	movw	r10, r16
    200c:	69 01       	movw	r12, r18
    200e:	22 24       	eor	r2, r2
    2010:	33 24       	eor	r3, r3
    2012:	21 01       	movw	r4, r2
    2014:	2d a9       	ldd	r18, Y+53	; 0x35
    2016:	3e a9       	ldd	r19, Y+54	; 0x36
    2018:	4f a9       	ldd	r20, Y+55	; 0x37
    201a:	58 ad       	ldd	r21, Y+56	; 0x38
    201c:	26 15       	cp	r18, r6
    201e:	37 05       	cpc	r19, r7
    2020:	48 05       	cpc	r20, r8
    2022:	59 05       	cpc	r21, r9
    2024:	28 f4       	brcc	.+10     	; 0x2030 <__moddi3+0xef6>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	28 2e       	mov	r2, r24
    202a:	31 2c       	mov	r3, r1
    202c:	41 2c       	mov	r4, r1
    202e:	51 2c       	mov	r5, r1
    2030:	86 01       	movw	r16, r12
    2032:	75 01       	movw	r14, r10
    2034:	e2 18       	sub	r14, r2
    2036:	f3 08       	sbc	r15, r3
    2038:	04 09       	sbc	r16, r4
    203a:	15 09       	sbc	r17, r5
    203c:	a8 01       	movw	r20, r16
    203e:	97 01       	movw	r18, r14
    2040:	e2 96       	adiw	r28, 0x32	; 50
    2042:	0f ac       	ldd	r0, Y+63	; 0x3f
    2044:	e2 97       	sbiw	r28, 0x32	; 50
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <__moddi3+0xf16>
    2048:	22 0f       	add	r18, r18
    204a:	33 1f       	adc	r19, r19
    204c:	44 1f       	adc	r20, r20
    204e:	55 1f       	adc	r21, r21
    2050:	0a 94       	dec	r0
    2052:	d2 f7       	brpl	.-12     	; 0x2048 <__moddi3+0xf0e>
    2054:	d4 01       	movw	r26, r8
    2056:	c3 01       	movw	r24, r6
    2058:	e3 96       	adiw	r28, 0x33	; 51
    205a:	0f ac       	ldd	r0, Y+63	; 0x3f
    205c:	e3 97       	sbiw	r28, 0x33	; 51
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <__moddi3+0xf2e>
    2060:	b6 95       	lsr	r27
    2062:	a7 95       	ror	r26
    2064:	97 95       	ror	r25
    2066:	87 95       	ror	r24
    2068:	0a 94       	dec	r0
    206a:	d2 f7       	brpl	.-12     	; 0x2060 <__moddi3+0xf26>
    206c:	28 2b       	or	r18, r24
    206e:	39 2b       	or	r19, r25
    2070:	4a 2b       	or	r20, r26
    2072:	5b 2b       	or	r21, r27
    2074:	29 a7       	std	Y+41, r18	; 0x29
    2076:	3a a7       	std	Y+42, r19	; 0x2a
    2078:	4b a7       	std	Y+43, r20	; 0x2b
    207a:	5c a7       	std	Y+44, r21	; 0x2c
    207c:	e3 96       	adiw	r28, 0x33	; 51
    207e:	0f ac       	ldd	r0, Y+63	; 0x3f
    2080:	e3 97       	sbiw	r28, 0x33	; 51
    2082:	04 c0       	rjmp	.+8      	; 0x208c <__moddi3+0xf52>
    2084:	16 95       	lsr	r17
    2086:	07 95       	ror	r16
    2088:	f7 94       	ror	r15
    208a:	e7 94       	ror	r14
    208c:	0a 94       	dec	r0
    208e:	d2 f7       	brpl	.-12     	; 0x2084 <__moddi3+0xf4a>
    2090:	ed a6       	std	Y+45, r14	; 0x2d
    2092:	fe a6       	std	Y+46, r15	; 0x2e
    2094:	0f a7       	std	Y+47, r16	; 0x2f
    2096:	18 ab       	std	Y+48, r17	; 0x30
    2098:	29 8b       	std	Y+17, r18	; 0x11
    209a:	8a a5       	ldd	r24, Y+42	; 0x2a
    209c:	8a 8b       	std	Y+18, r24	; 0x12
    209e:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a0:	8b 8b       	std	Y+19, r24	; 0x13
    20a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    20a4:	8c 8b       	std	Y+20, r24	; 0x14
    20a6:	ed 8a       	std	Y+21, r14	; 0x15
    20a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    20aa:	8e 8b       	std	Y+22, r24	; 0x16
    20ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ae:	8f 8b       	std	Y+23, r24	; 0x17
    20b0:	88 a9       	ldd	r24, Y+48	; 0x30
    20b2:	88 8f       	std	Y+24, r24	; 0x18
    20b4:	e1 96       	adiw	r28, 0x31	; 49
    20b6:	4c ad       	ldd	r20, Y+60	; 0x3c
    20b8:	5d ad       	ldd	r21, Y+61	; 0x3d
    20ba:	6e ad       	ldd	r22, Y+62	; 0x3e
    20bc:	7f ad       	ldd	r23, Y+63	; 0x3f
    20be:	e1 97       	sbiw	r28, 0x31	; 49
    20c0:	41 15       	cp	r20, r1
    20c2:	51 05       	cpc	r21, r1
    20c4:	61 05       	cpc	r22, r1
    20c6:	71 05       	cpc	r23, r1
    20c8:	09 f4       	brne	.+2      	; 0x20cc <__moddi3+0xf92>
    20ca:	67 c0       	rjmp	.+206    	; 0x219a <__moddi3+0x1060>
    20cc:	89 89       	ldd	r24, Y+17	; 0x11
    20ce:	2a 89       	ldd	r18, Y+18	; 0x12
    20d0:	3b 89       	ldd	r19, Y+19	; 0x13
    20d2:	4c 89       	ldd	r20, Y+20	; 0x14
    20d4:	5d 89       	ldd	r21, Y+21	; 0x15
    20d6:	ae 89       	ldd	r26, Y+22	; 0x16
    20d8:	bf 89       	ldd	r27, Y+23	; 0x17
    20da:	18 8d       	ldd	r17, Y+24	; 0x18
    20dc:	f8 2f       	mov	r31, r24
    20de:	f1 95       	neg	r31
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	1f 16       	cp	r1, r31
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <__moddi3+0xfae>
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	82 2f       	mov	r24, r18
    20ea:	81 95       	neg	r24
    20ec:	21 e0       	ldi	r18, 0x01	; 1
    20ee:	18 16       	cp	r1, r24
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <__moddi3+0xfba>
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	e8 2f       	mov	r30, r24
    20f6:	e9 1b       	sub	r30, r25
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	8e 17       	cp	r24, r30
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <__moddi3+0xfc6>
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	29 2b       	or	r18, r25
    2102:	83 2f       	mov	r24, r19
    2104:	81 95       	neg	r24
    2106:	31 e0       	ldi	r19, 0x01	; 1
    2108:	18 16       	cp	r1, r24
    210a:	08 f0       	brcs	.+2      	; 0x210e <__moddi3+0xfd4>
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	78 2f       	mov	r23, r24
    2110:	72 1b       	sub	r23, r18
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	87 17       	cp	r24, r23
    2116:	08 f0       	brcs	.+2      	; 0x211a <__moddi3+0xfe0>
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	39 2b       	or	r19, r25
    211c:	84 2f       	mov	r24, r20
    211e:	81 95       	neg	r24
    2120:	21 e0       	ldi	r18, 0x01	; 1
    2122:	18 16       	cp	r1, r24
    2124:	08 f0       	brcs	.+2      	; 0x2128 <__moddi3+0xfee>
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	68 2f       	mov	r22, r24
    212a:	63 1b       	sub	r22, r19
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	86 17       	cp	r24, r22
    2130:	08 f0       	brcs	.+2      	; 0x2134 <__moddi3+0xffa>
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	29 2b       	or	r18, r25
    2136:	85 2f       	mov	r24, r21
    2138:	81 95       	neg	r24
    213a:	31 e0       	ldi	r19, 0x01	; 1
    213c:	18 16       	cp	r1, r24
    213e:	08 f0       	brcs	.+2      	; 0x2142 <__moddi3+0x1008>
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	58 2f       	mov	r21, r24
    2144:	52 1b       	sub	r21, r18
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	85 17       	cp	r24, r21
    214a:	08 f0       	brcs	.+2      	; 0x214e <__moddi3+0x1014>
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	39 2b       	or	r19, r25
    2150:	8a 2f       	mov	r24, r26
    2152:	81 95       	neg	r24
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	18 16       	cp	r1, r24
    2158:	08 f0       	brcs	.+2      	; 0x215c <__moddi3+0x1022>
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	48 2f       	mov	r20, r24
    215e:	43 1b       	sub	r20, r19
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	84 17       	cp	r24, r20
    2164:	08 f0       	brcs	.+2      	; 0x2168 <__moddi3+0x102e>
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	29 2b       	or	r18, r25
    216a:	8b 2f       	mov	r24, r27
    216c:	81 95       	neg	r24
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	18 16       	cp	r1, r24
    2172:	08 f0       	brcs	.+2      	; 0x2176 <__moddi3+0x103c>
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	38 2f       	mov	r19, r24
    2178:	32 1b       	sub	r19, r18
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	83 17       	cp	r24, r19
    217e:	08 f0       	brcs	.+2      	; 0x2182 <__moddi3+0x1048>
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	92 2b       	or	r25, r18
    2184:	81 2f       	mov	r24, r17
    2186:	81 95       	neg	r24
    2188:	89 1b       	sub	r24, r25
    218a:	f9 8b       	std	Y+17, r31	; 0x11
    218c:	ea 8b       	std	Y+18, r30	; 0x12
    218e:	7b 8b       	std	Y+19, r23	; 0x13
    2190:	6c 8b       	std	Y+20, r22	; 0x14
    2192:	5d 8b       	std	Y+21, r21	; 0x15
    2194:	4e 8b       	std	Y+22, r20	; 0x16
    2196:	3f 8b       	std	Y+23, r19	; 0x17
    2198:	88 8f       	std	Y+24, r24	; 0x18
    219a:	29 89       	ldd	r18, Y+17	; 0x11
    219c:	3a 89       	ldd	r19, Y+18	; 0x12
    219e:	4b 89       	ldd	r20, Y+19	; 0x13
    21a0:	5c 89       	ldd	r21, Y+20	; 0x14
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	c9 58       	subi	r28, 0x89	; 137
    21ac:	df 4f       	sbci	r29, 0xFF	; 255
    21ae:	e2 e1       	ldi	r30, 0x12	; 18
    21b0:	0c 94 79 3d 	jmp	0x7af2	; 0x7af2 <__epilogue_restores__>

000021b4 <_fpadd_parts>:
    21b4:	a0 e0       	ldi	r26, 0x00	; 0
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 ee       	ldi	r30, 0xE0	; 224
    21ba:	f0 e1       	ldi	r31, 0x10	; 16
    21bc:	0c 94 5d 3d 	jmp	0x7aba	; 0x7aba <__prologue_saves__>
    21c0:	dc 01       	movw	r26, r24
    21c2:	2b 01       	movw	r4, r22
    21c4:	fa 01       	movw	r30, r20
    21c6:	9c 91       	ld	r25, X
    21c8:	92 30       	cpi	r25, 0x02	; 2
    21ca:	08 f4       	brcc	.+2      	; 0x21ce <_fpadd_parts+0x1a>
    21cc:	39 c1       	rjmp	.+626    	; 0x2440 <_fpadd_parts+0x28c>
    21ce:	eb 01       	movw	r28, r22
    21d0:	88 81       	ld	r24, Y
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	08 f4       	brcc	.+2      	; 0x21d8 <_fpadd_parts+0x24>
    21d6:	33 c1       	rjmp	.+614    	; 0x243e <_fpadd_parts+0x28a>
    21d8:	94 30       	cpi	r25, 0x04	; 4
    21da:	69 f4       	brne	.+26     	; 0x21f6 <_fpadd_parts+0x42>
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	09 f0       	breq	.+2      	; 0x21e2 <_fpadd_parts+0x2e>
    21e0:	2f c1       	rjmp	.+606    	; 0x2440 <_fpadd_parts+0x28c>
    21e2:	11 96       	adiw	r26, 0x01	; 1
    21e4:	9c 91       	ld	r25, X
    21e6:	11 97       	sbiw	r26, 0x01	; 1
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	98 17       	cp	r25, r24
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <_fpadd_parts+0x3c>
    21ee:	28 c1       	rjmp	.+592    	; 0x2440 <_fpadd_parts+0x28c>
    21f0:	a2 ef       	ldi	r26, 0xF2	; 242
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	25 c1       	rjmp	.+586    	; 0x2440 <_fpadd_parts+0x28c>
    21f6:	84 30       	cpi	r24, 0x04	; 4
    21f8:	09 f4       	brne	.+2      	; 0x21fc <_fpadd_parts+0x48>
    21fa:	21 c1       	rjmp	.+578    	; 0x243e <_fpadd_parts+0x28a>
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	a9 f4       	brne	.+42     	; 0x222a <_fpadd_parts+0x76>
    2200:	92 30       	cpi	r25, 0x02	; 2
    2202:	09 f0       	breq	.+2      	; 0x2206 <_fpadd_parts+0x52>
    2204:	1d c1       	rjmp	.+570    	; 0x2440 <_fpadd_parts+0x28c>
    2206:	9a 01       	movw	r18, r20
    2208:	ad 01       	movw	r20, r26
    220a:	88 e0       	ldi	r24, 0x08	; 8
    220c:	ea 01       	movw	r28, r20
    220e:	09 90       	ld	r0, Y+
    2210:	ae 01       	movw	r20, r28
    2212:	e9 01       	movw	r28, r18
    2214:	09 92       	st	Y+, r0
    2216:	9e 01       	movw	r18, r28
    2218:	81 50       	subi	r24, 0x01	; 1
    221a:	c1 f7       	brne	.-16     	; 0x220c <_fpadd_parts+0x58>
    221c:	e2 01       	movw	r28, r4
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	11 96       	adiw	r26, 0x01	; 1
    2222:	9c 91       	ld	r25, X
    2224:	89 23       	and	r24, r25
    2226:	81 83       	std	Z+1, r24	; 0x01
    2228:	08 c1       	rjmp	.+528    	; 0x243a <_fpadd_parts+0x286>
    222a:	92 30       	cpi	r25, 0x02	; 2
    222c:	09 f4       	brne	.+2      	; 0x2230 <_fpadd_parts+0x7c>
    222e:	07 c1       	rjmp	.+526    	; 0x243e <_fpadd_parts+0x28a>
    2230:	12 96       	adiw	r26, 0x02	; 2
    2232:	2d 90       	ld	r2, X+
    2234:	3c 90       	ld	r3, X
    2236:	13 97       	sbiw	r26, 0x03	; 3
    2238:	eb 01       	movw	r28, r22
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	14 96       	adiw	r26, 0x04	; 4
    2240:	ad 90       	ld	r10, X+
    2242:	bd 90       	ld	r11, X+
    2244:	cd 90       	ld	r12, X+
    2246:	dc 90       	ld	r13, X
    2248:	17 97       	sbiw	r26, 0x07	; 7
    224a:	ec 80       	ldd	r14, Y+4	; 0x04
    224c:	fd 80       	ldd	r15, Y+5	; 0x05
    224e:	0e 81       	ldd	r16, Y+6	; 0x06
    2250:	1f 81       	ldd	r17, Y+7	; 0x07
    2252:	91 01       	movw	r18, r2
    2254:	28 1b       	sub	r18, r24
    2256:	39 0b       	sbc	r19, r25
    2258:	b9 01       	movw	r22, r18
    225a:	37 ff       	sbrs	r19, 7
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <_fpadd_parts+0xb2>
    225e:	66 27       	eor	r22, r22
    2260:	77 27       	eor	r23, r23
    2262:	62 1b       	sub	r22, r18
    2264:	73 0b       	sbc	r23, r19
    2266:	60 32       	cpi	r22, 0x20	; 32
    2268:	71 05       	cpc	r23, r1
    226a:	0c f0       	brlt	.+2      	; 0x226e <_fpadd_parts+0xba>
    226c:	61 c0       	rjmp	.+194    	; 0x2330 <_fpadd_parts+0x17c>
    226e:	12 16       	cp	r1, r18
    2270:	13 06       	cpc	r1, r19
    2272:	6c f5       	brge	.+90     	; 0x22ce <_fpadd_parts+0x11a>
    2274:	37 01       	movw	r6, r14
    2276:	48 01       	movw	r8, r16
    2278:	06 2e       	mov	r0, r22
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <_fpadd_parts+0xd0>
    227c:	96 94       	lsr	r9
    227e:	87 94       	ror	r8
    2280:	77 94       	ror	r7
    2282:	67 94       	ror	r6
    2284:	0a 94       	dec	r0
    2286:	d2 f7       	brpl	.-12     	; 0x227c <_fpadd_parts+0xc8>
    2288:	21 e0       	ldi	r18, 0x01	; 1
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	04 c0       	rjmp	.+8      	; 0x229a <_fpadd_parts+0xe6>
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	44 1f       	adc	r20, r20
    2298:	55 1f       	adc	r21, r21
    229a:	6a 95       	dec	r22
    229c:	d2 f7       	brpl	.-12     	; 0x2292 <_fpadd_parts+0xde>
    229e:	21 50       	subi	r18, 0x01	; 1
    22a0:	30 40       	sbci	r19, 0x00	; 0
    22a2:	40 40       	sbci	r20, 0x00	; 0
    22a4:	50 40       	sbci	r21, 0x00	; 0
    22a6:	2e 21       	and	r18, r14
    22a8:	3f 21       	and	r19, r15
    22aa:	40 23       	and	r20, r16
    22ac:	51 23       	and	r21, r17
    22ae:	21 15       	cp	r18, r1
    22b0:	31 05       	cpc	r19, r1
    22b2:	41 05       	cpc	r20, r1
    22b4:	51 05       	cpc	r21, r1
    22b6:	21 f0       	breq	.+8      	; 0x22c0 <_fpadd_parts+0x10c>
    22b8:	21 e0       	ldi	r18, 0x01	; 1
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	79 01       	movw	r14, r18
    22c2:	8a 01       	movw	r16, r20
    22c4:	e6 28       	or	r14, r6
    22c6:	f7 28       	or	r15, r7
    22c8:	08 29       	or	r16, r8
    22ca:	19 29       	or	r17, r9
    22cc:	3c c0       	rjmp	.+120    	; 0x2346 <_fpadd_parts+0x192>
    22ce:	23 2b       	or	r18, r19
    22d0:	d1 f1       	breq	.+116    	; 0x2346 <_fpadd_parts+0x192>
    22d2:	26 0e       	add	r2, r22
    22d4:	37 1e       	adc	r3, r23
    22d6:	35 01       	movw	r6, r10
    22d8:	46 01       	movw	r8, r12
    22da:	06 2e       	mov	r0, r22
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <_fpadd_parts+0x132>
    22de:	96 94       	lsr	r9
    22e0:	87 94       	ror	r8
    22e2:	77 94       	ror	r7
    22e4:	67 94       	ror	r6
    22e6:	0a 94       	dec	r0
    22e8:	d2 f7       	brpl	.-12     	; 0x22de <_fpadd_parts+0x12a>
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <_fpadd_parts+0x148>
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	44 1f       	adc	r20, r20
    22fa:	55 1f       	adc	r21, r21
    22fc:	6a 95       	dec	r22
    22fe:	d2 f7       	brpl	.-12     	; 0x22f4 <_fpadd_parts+0x140>
    2300:	21 50       	subi	r18, 0x01	; 1
    2302:	30 40       	sbci	r19, 0x00	; 0
    2304:	40 40       	sbci	r20, 0x00	; 0
    2306:	50 40       	sbci	r21, 0x00	; 0
    2308:	2a 21       	and	r18, r10
    230a:	3b 21       	and	r19, r11
    230c:	4c 21       	and	r20, r12
    230e:	5d 21       	and	r21, r13
    2310:	21 15       	cp	r18, r1
    2312:	31 05       	cpc	r19, r1
    2314:	41 05       	cpc	r20, r1
    2316:	51 05       	cpc	r21, r1
    2318:	21 f0       	breq	.+8      	; 0x2322 <_fpadd_parts+0x16e>
    231a:	21 e0       	ldi	r18, 0x01	; 1
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	59 01       	movw	r10, r18
    2324:	6a 01       	movw	r12, r20
    2326:	a6 28       	or	r10, r6
    2328:	b7 28       	or	r11, r7
    232a:	c8 28       	or	r12, r8
    232c:	d9 28       	or	r13, r9
    232e:	0b c0       	rjmp	.+22     	; 0x2346 <_fpadd_parts+0x192>
    2330:	82 15       	cp	r24, r2
    2332:	93 05       	cpc	r25, r3
    2334:	2c f0       	brlt	.+10     	; 0x2340 <_fpadd_parts+0x18c>
    2336:	1c 01       	movw	r2, r24
    2338:	aa 24       	eor	r10, r10
    233a:	bb 24       	eor	r11, r11
    233c:	65 01       	movw	r12, r10
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <_fpadd_parts+0x192>
    2340:	ee 24       	eor	r14, r14
    2342:	ff 24       	eor	r15, r15
    2344:	87 01       	movw	r16, r14
    2346:	11 96       	adiw	r26, 0x01	; 1
    2348:	9c 91       	ld	r25, X
    234a:	d2 01       	movw	r26, r4
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	8c 91       	ld	r24, X
    2350:	98 17       	cp	r25, r24
    2352:	09 f4       	brne	.+2      	; 0x2356 <_fpadd_parts+0x1a2>
    2354:	45 c0       	rjmp	.+138    	; 0x23e0 <_fpadd_parts+0x22c>
    2356:	99 23       	and	r25, r25
    2358:	39 f0       	breq	.+14     	; 0x2368 <_fpadd_parts+0x1b4>
    235a:	a8 01       	movw	r20, r16
    235c:	97 01       	movw	r18, r14
    235e:	2a 19       	sub	r18, r10
    2360:	3b 09       	sbc	r19, r11
    2362:	4c 09       	sbc	r20, r12
    2364:	5d 09       	sbc	r21, r13
    2366:	06 c0       	rjmp	.+12     	; 0x2374 <_fpadd_parts+0x1c0>
    2368:	a6 01       	movw	r20, r12
    236a:	95 01       	movw	r18, r10
    236c:	2e 19       	sub	r18, r14
    236e:	3f 09       	sbc	r19, r15
    2370:	40 0b       	sbc	r20, r16
    2372:	51 0b       	sbc	r21, r17
    2374:	57 fd       	sbrc	r21, 7
    2376:	08 c0       	rjmp	.+16     	; 0x2388 <_fpadd_parts+0x1d4>
    2378:	11 82       	std	Z+1, r1	; 0x01
    237a:	33 82       	std	Z+3, r3	; 0x03
    237c:	22 82       	std	Z+2, r2	; 0x02
    237e:	24 83       	std	Z+4, r18	; 0x04
    2380:	35 83       	std	Z+5, r19	; 0x05
    2382:	46 83       	std	Z+6, r20	; 0x06
    2384:	57 83       	std	Z+7, r21	; 0x07
    2386:	1d c0       	rjmp	.+58     	; 0x23c2 <_fpadd_parts+0x20e>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	81 83       	std	Z+1, r24	; 0x01
    238c:	33 82       	std	Z+3, r3	; 0x03
    238e:	22 82       	std	Z+2, r2	; 0x02
    2390:	88 27       	eor	r24, r24
    2392:	99 27       	eor	r25, r25
    2394:	dc 01       	movw	r26, r24
    2396:	82 1b       	sub	r24, r18
    2398:	93 0b       	sbc	r25, r19
    239a:	a4 0b       	sbc	r26, r20
    239c:	b5 0b       	sbc	r27, r21
    239e:	84 83       	std	Z+4, r24	; 0x04
    23a0:	95 83       	std	Z+5, r25	; 0x05
    23a2:	a6 83       	std	Z+6, r26	; 0x06
    23a4:	b7 83       	std	Z+7, r27	; 0x07
    23a6:	0d c0       	rjmp	.+26     	; 0x23c2 <_fpadd_parts+0x20e>
    23a8:	22 0f       	add	r18, r18
    23aa:	33 1f       	adc	r19, r19
    23ac:	44 1f       	adc	r20, r20
    23ae:	55 1f       	adc	r21, r21
    23b0:	24 83       	std	Z+4, r18	; 0x04
    23b2:	35 83       	std	Z+5, r19	; 0x05
    23b4:	46 83       	std	Z+6, r20	; 0x06
    23b6:	57 83       	std	Z+7, r21	; 0x07
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	93 83       	std	Z+3, r25	; 0x03
    23c0:	82 83       	std	Z+2, r24	; 0x02
    23c2:	24 81       	ldd	r18, Z+4	; 0x04
    23c4:	35 81       	ldd	r19, Z+5	; 0x05
    23c6:	46 81       	ldd	r20, Z+6	; 0x06
    23c8:	57 81       	ldd	r21, Z+7	; 0x07
    23ca:	da 01       	movw	r26, r20
    23cc:	c9 01       	movw	r24, r18
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	a1 09       	sbc	r26, r1
    23d2:	b1 09       	sbc	r27, r1
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	af 4f       	sbci	r26, 0xFF	; 255
    23da:	bf 43       	sbci	r27, 0x3F	; 63
    23dc:	28 f3       	brcs	.-54     	; 0x23a8 <_fpadd_parts+0x1f4>
    23de:	0b c0       	rjmp	.+22     	; 0x23f6 <_fpadd_parts+0x242>
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	33 82       	std	Z+3, r3	; 0x03
    23e4:	22 82       	std	Z+2, r2	; 0x02
    23e6:	ea 0c       	add	r14, r10
    23e8:	fb 1c       	adc	r15, r11
    23ea:	0c 1d       	adc	r16, r12
    23ec:	1d 1d       	adc	r17, r13
    23ee:	e4 82       	std	Z+4, r14	; 0x04
    23f0:	f5 82       	std	Z+5, r15	; 0x05
    23f2:	06 83       	std	Z+6, r16	; 0x06
    23f4:	17 83       	std	Z+7, r17	; 0x07
    23f6:	83 e0       	ldi	r24, 0x03	; 3
    23f8:	80 83       	st	Z, r24
    23fa:	24 81       	ldd	r18, Z+4	; 0x04
    23fc:	35 81       	ldd	r19, Z+5	; 0x05
    23fe:	46 81       	ldd	r20, Z+6	; 0x06
    2400:	57 81       	ldd	r21, Z+7	; 0x07
    2402:	57 ff       	sbrs	r21, 7
    2404:	1a c0       	rjmp	.+52     	; 0x243a <_fpadd_parts+0x286>
    2406:	c9 01       	movw	r24, r18
    2408:	aa 27       	eor	r26, r26
    240a:	97 fd       	sbrc	r25, 7
    240c:	a0 95       	com	r26
    240e:	ba 2f       	mov	r27, r26
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	a0 70       	andi	r26, 0x00	; 0
    2416:	b0 70       	andi	r27, 0x00	; 0
    2418:	56 95       	lsr	r21
    241a:	47 95       	ror	r20
    241c:	37 95       	ror	r19
    241e:	27 95       	ror	r18
    2420:	82 2b       	or	r24, r18
    2422:	93 2b       	or	r25, r19
    2424:	a4 2b       	or	r26, r20
    2426:	b5 2b       	or	r27, r21
    2428:	84 83       	std	Z+4, r24	; 0x04
    242a:	95 83       	std	Z+5, r25	; 0x05
    242c:	a6 83       	std	Z+6, r26	; 0x06
    242e:	b7 83       	std	Z+7, r27	; 0x07
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	93 83       	std	Z+3, r25	; 0x03
    2438:	82 83       	std	Z+2, r24	; 0x02
    243a:	df 01       	movw	r26, r30
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <_fpadd_parts+0x28c>
    243e:	d2 01       	movw	r26, r4
    2440:	cd 01       	movw	r24, r26
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	e2 e1       	ldi	r30, 0x12	; 18
    2448:	0c 94 79 3d 	jmp	0x7af2	; 0x7af2 <__epilogue_restores__>

0000244c <__subsf3>:
    244c:	a0 e2       	ldi	r26, 0x20	; 32
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	ec e2       	ldi	r30, 0x2C	; 44
    2452:	f2 e1       	ldi	r31, 0x12	; 18
    2454:	0c 94 69 3d 	jmp	0x7ad2	; 0x7ad2 <__prologue_saves__+0x18>
    2458:	69 83       	std	Y+1, r22	; 0x01
    245a:	7a 83       	std	Y+2, r23	; 0x02
    245c:	8b 83       	std	Y+3, r24	; 0x03
    245e:	9c 83       	std	Y+4, r25	; 0x04
    2460:	2d 83       	std	Y+5, r18	; 0x05
    2462:	3e 83       	std	Y+6, r19	; 0x06
    2464:	4f 83       	std	Y+7, r20	; 0x07
    2466:	58 87       	std	Y+8, r21	; 0x08
    2468:	e9 e0       	ldi	r30, 0x09	; 9
    246a:	ee 2e       	mov	r14, r30
    246c:	f1 2c       	mov	r15, r1
    246e:	ec 0e       	add	r14, r28
    2470:	fd 1e       	adc	r15, r29
    2472:	ce 01       	movw	r24, r28
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	b7 01       	movw	r22, r14
    2478:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    247c:	8e 01       	movw	r16, r28
    247e:	0f 5e       	subi	r16, 0xEF	; 239
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	ce 01       	movw	r24, r28
    2484:	05 96       	adiw	r24, 0x05	; 5
    2486:	b8 01       	movw	r22, r16
    2488:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    248c:	8a 89       	ldd	r24, Y+18	; 0x12
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	89 27       	eor	r24, r25
    2492:	8a 8b       	std	Y+18, r24	; 0x12
    2494:	c7 01       	movw	r24, r14
    2496:	b8 01       	movw	r22, r16
    2498:	ae 01       	movw	r20, r28
    249a:	47 5e       	subi	r20, 0xE7	; 231
    249c:	5f 4f       	sbci	r21, 0xFF	; 255
    249e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24a2:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__pack_f>
    24a6:	a0 96       	adiw	r28, 0x20	; 32
    24a8:	e6 e0       	ldi	r30, 0x06	; 6
    24aa:	0c 94 85 3d 	jmp	0x7b0a	; 0x7b0a <__epilogue_restores__+0x18>

000024ae <__addsf3>:
    24ae:	a0 e2       	ldi	r26, 0x20	; 32
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ed e5       	ldi	r30, 0x5D	; 93
    24b4:	f2 e1       	ldi	r31, 0x12	; 18
    24b6:	0c 94 69 3d 	jmp	0x7ad2	; 0x7ad2 <__prologue_saves__+0x18>
    24ba:	69 83       	std	Y+1, r22	; 0x01
    24bc:	7a 83       	std	Y+2, r23	; 0x02
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	2d 83       	std	Y+5, r18	; 0x05
    24c4:	3e 83       	std	Y+6, r19	; 0x06
    24c6:	4f 83       	std	Y+7, r20	; 0x07
    24c8:	58 87       	std	Y+8, r21	; 0x08
    24ca:	f9 e0       	ldi	r31, 0x09	; 9
    24cc:	ef 2e       	mov	r14, r31
    24ce:	f1 2c       	mov	r15, r1
    24d0:	ec 0e       	add	r14, r28
    24d2:	fd 1e       	adc	r15, r29
    24d4:	ce 01       	movw	r24, r28
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	b7 01       	movw	r22, r14
    24da:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    24de:	8e 01       	movw	r16, r28
    24e0:	0f 5e       	subi	r16, 0xEF	; 239
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	ce 01       	movw	r24, r28
    24e6:	05 96       	adiw	r24, 0x05	; 5
    24e8:	b8 01       	movw	r22, r16
    24ea:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    24ee:	c7 01       	movw	r24, r14
    24f0:	b8 01       	movw	r22, r16
    24f2:	ae 01       	movw	r20, r28
    24f4:	47 5e       	subi	r20, 0xE7	; 231
    24f6:	5f 4f       	sbci	r21, 0xFF	; 255
    24f8:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24fc:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__pack_f>
    2500:	a0 96       	adiw	r28, 0x20	; 32
    2502:	e6 e0       	ldi	r30, 0x06	; 6
    2504:	0c 94 85 3d 	jmp	0x7b0a	; 0x7b0a <__epilogue_restores__+0x18>

00002508 <__mulsf3>:
    2508:	a0 e2       	ldi	r26, 0x20	; 32
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ea e8       	ldi	r30, 0x8A	; 138
    250e:	f2 e1       	ldi	r31, 0x12	; 18
    2510:	0c 94 5d 3d 	jmp	0x7aba	; 0x7aba <__prologue_saves__>
    2514:	69 83       	std	Y+1, r22	; 0x01
    2516:	7a 83       	std	Y+2, r23	; 0x02
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	2d 83       	std	Y+5, r18	; 0x05
    251e:	3e 83       	std	Y+6, r19	; 0x06
    2520:	4f 83       	std	Y+7, r20	; 0x07
    2522:	58 87       	std	Y+8, r21	; 0x08
    2524:	ce 01       	movw	r24, r28
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	be 01       	movw	r22, r28
    252a:	67 5f       	subi	r22, 0xF7	; 247
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    2532:	ce 01       	movw	r24, r28
    2534:	05 96       	adiw	r24, 0x05	; 5
    2536:	be 01       	movw	r22, r28
    2538:	6f 5e       	subi	r22, 0xEF	; 239
    253a:	7f 4f       	sbci	r23, 0xFF	; 255
    253c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    2540:	99 85       	ldd	r25, Y+9	; 0x09
    2542:	92 30       	cpi	r25, 0x02	; 2
    2544:	88 f0       	brcs	.+34     	; 0x2568 <__mulsf3+0x60>
    2546:	89 89       	ldd	r24, Y+17	; 0x11
    2548:	82 30       	cpi	r24, 0x02	; 2
    254a:	c8 f0       	brcs	.+50     	; 0x257e <__mulsf3+0x76>
    254c:	94 30       	cpi	r25, 0x04	; 4
    254e:	19 f4       	brne	.+6      	; 0x2556 <__mulsf3+0x4e>
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	51 f4       	brne	.+20     	; 0x2568 <__mulsf3+0x60>
    2554:	04 c0       	rjmp	.+8      	; 0x255e <__mulsf3+0x56>
    2556:	84 30       	cpi	r24, 0x04	; 4
    2558:	29 f4       	brne	.+10     	; 0x2564 <__mulsf3+0x5c>
    255a:	92 30       	cpi	r25, 0x02	; 2
    255c:	81 f4       	brne	.+32     	; 0x257e <__mulsf3+0x76>
    255e:	82 ef       	ldi	r24, 0xF2	; 242
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	c6 c0       	rjmp	.+396    	; 0x26f0 <__mulsf3+0x1e8>
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	49 f4       	brne	.+18     	; 0x257a <__mulsf3+0x72>
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	8a 89       	ldd	r24, Y+18	; 0x12
    256e:	98 13       	cpse	r25, r24
    2570:	21 e0       	ldi	r18, 0x01	; 1
    2572:	2a 87       	std	Y+10, r18	; 0x0a
    2574:	ce 01       	movw	r24, r28
    2576:	09 96       	adiw	r24, 0x09	; 9
    2578:	bb c0       	rjmp	.+374    	; 0x26f0 <__mulsf3+0x1e8>
    257a:	82 30       	cpi	r24, 0x02	; 2
    257c:	49 f4       	brne	.+18     	; 0x2590 <__mulsf3+0x88>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	8a 89       	ldd	r24, Y+18	; 0x12
    2584:	98 13       	cpse	r25, r24
    2586:	21 e0       	ldi	r18, 0x01	; 1
    2588:	2a 8b       	std	Y+18, r18	; 0x12
    258a:	ce 01       	movw	r24, r28
    258c:	41 96       	adiw	r24, 0x11	; 17
    258e:	b0 c0       	rjmp	.+352    	; 0x26f0 <__mulsf3+0x1e8>
    2590:	2d 84       	ldd	r2, Y+13	; 0x0d
    2592:	3e 84       	ldd	r3, Y+14	; 0x0e
    2594:	4f 84       	ldd	r4, Y+15	; 0x0f
    2596:	58 88       	ldd	r5, Y+16	; 0x10
    2598:	6d 88       	ldd	r6, Y+21	; 0x15
    259a:	7e 88       	ldd	r7, Y+22	; 0x16
    259c:	8f 88       	ldd	r8, Y+23	; 0x17
    259e:	98 8c       	ldd	r9, Y+24	; 0x18
    25a0:	ee 24       	eor	r14, r14
    25a2:	ff 24       	eor	r15, r15
    25a4:	87 01       	movw	r16, r14
    25a6:	aa 24       	eor	r10, r10
    25a8:	bb 24       	eor	r11, r11
    25aa:	65 01       	movw	r12, r10
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	e0 e0       	ldi	r30, 0x00	; 0
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	c1 01       	movw	r24, r2
    25ba:	81 70       	andi	r24, 0x01	; 1
    25bc:	90 70       	andi	r25, 0x00	; 0
    25be:	89 2b       	or	r24, r25
    25c0:	e9 f0       	breq	.+58     	; 0x25fc <__mulsf3+0xf4>
    25c2:	e6 0c       	add	r14, r6
    25c4:	f7 1c       	adc	r15, r7
    25c6:	08 1d       	adc	r16, r8
    25c8:	19 1d       	adc	r17, r9
    25ca:	9a 01       	movw	r18, r20
    25cc:	ab 01       	movw	r20, r22
    25ce:	2a 0d       	add	r18, r10
    25d0:	3b 1d       	adc	r19, r11
    25d2:	4c 1d       	adc	r20, r12
    25d4:	5d 1d       	adc	r21, r13
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e6 14       	cp	r14, r6
    25e0:	f7 04       	cpc	r15, r7
    25e2:	08 05       	cpc	r16, r8
    25e4:	19 05       	cpc	r17, r9
    25e6:	20 f4       	brcc	.+8      	; 0x25f0 <__mulsf3+0xe8>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e0       	ldi	r26, 0x00	; 0
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	ba 01       	movw	r22, r20
    25f2:	a9 01       	movw	r20, r18
    25f4:	48 0f       	add	r20, r24
    25f6:	59 1f       	adc	r21, r25
    25f8:	6a 1f       	adc	r22, r26
    25fa:	7b 1f       	adc	r23, r27
    25fc:	aa 0c       	add	r10, r10
    25fe:	bb 1c       	adc	r11, r11
    2600:	cc 1c       	adc	r12, r12
    2602:	dd 1c       	adc	r13, r13
    2604:	97 fe       	sbrs	r9, 7
    2606:	08 c0       	rjmp	.+16     	; 0x2618 <__mulsf3+0x110>
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	a8 2a       	or	r10, r24
    2612:	b9 2a       	or	r11, r25
    2614:	ca 2a       	or	r12, r26
    2616:	db 2a       	or	r13, r27
    2618:	31 96       	adiw	r30, 0x01	; 1
    261a:	e0 32       	cpi	r30, 0x20	; 32
    261c:	f1 05       	cpc	r31, r1
    261e:	49 f0       	breq	.+18     	; 0x2632 <__mulsf3+0x12a>
    2620:	66 0c       	add	r6, r6
    2622:	77 1c       	adc	r7, r7
    2624:	88 1c       	adc	r8, r8
    2626:	99 1c       	adc	r9, r9
    2628:	56 94       	lsr	r5
    262a:	47 94       	ror	r4
    262c:	37 94       	ror	r3
    262e:	27 94       	ror	r2
    2630:	c3 cf       	rjmp	.-122    	; 0x25b8 <__mulsf3+0xb0>
    2632:	fa 85       	ldd	r31, Y+10	; 0x0a
    2634:	ea 89       	ldd	r30, Y+18	; 0x12
    2636:	2b 89       	ldd	r18, Y+19	; 0x13
    2638:	3c 89       	ldd	r19, Y+20	; 0x14
    263a:	8b 85       	ldd	r24, Y+11	; 0x0b
    263c:	9c 85       	ldd	r25, Y+12	; 0x0c
    263e:	28 0f       	add	r18, r24
    2640:	39 1f       	adc	r19, r25
    2642:	2e 5f       	subi	r18, 0xFE	; 254
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	17 c0       	rjmp	.+46     	; 0x2676 <__mulsf3+0x16e>
    2648:	ca 01       	movw	r24, r20
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	89 2b       	or	r24, r25
    2650:	61 f0       	breq	.+24     	; 0x266a <__mulsf3+0x162>
    2652:	16 95       	lsr	r17
    2654:	07 95       	ror	r16
    2656:	f7 94       	ror	r15
    2658:	e7 94       	ror	r14
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a0 e0       	ldi	r26, 0x00	; 0
    2660:	b0 e8       	ldi	r27, 0x80	; 128
    2662:	e8 2a       	or	r14, r24
    2664:	f9 2a       	or	r15, r25
    2666:	0a 2b       	or	r16, r26
    2668:	1b 2b       	or	r17, r27
    266a:	76 95       	lsr	r23
    266c:	67 95       	ror	r22
    266e:	57 95       	ror	r21
    2670:	47 95       	ror	r20
    2672:	2f 5f       	subi	r18, 0xFF	; 255
    2674:	3f 4f       	sbci	r19, 0xFF	; 255
    2676:	77 fd       	sbrc	r23, 7
    2678:	e7 cf       	rjmp	.-50     	; 0x2648 <__mulsf3+0x140>
    267a:	0c c0       	rjmp	.+24     	; 0x2694 <__mulsf3+0x18c>
    267c:	44 0f       	add	r20, r20
    267e:	55 1f       	adc	r21, r21
    2680:	66 1f       	adc	r22, r22
    2682:	77 1f       	adc	r23, r23
    2684:	17 fd       	sbrc	r17, 7
    2686:	41 60       	ori	r20, 0x01	; 1
    2688:	ee 0c       	add	r14, r14
    268a:	ff 1c       	adc	r15, r15
    268c:	00 1f       	adc	r16, r16
    268e:	11 1f       	adc	r17, r17
    2690:	21 50       	subi	r18, 0x01	; 1
    2692:	30 40       	sbci	r19, 0x00	; 0
    2694:	40 30       	cpi	r20, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	59 07       	cpc	r21, r25
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	69 07       	cpc	r22, r25
    269e:	90 e4       	ldi	r25, 0x40	; 64
    26a0:	79 07       	cpc	r23, r25
    26a2:	60 f3       	brcs	.-40     	; 0x267c <__mulsf3+0x174>
    26a4:	2b 8f       	std	Y+27, r18	; 0x1b
    26a6:	3c 8f       	std	Y+28, r19	; 0x1c
    26a8:	db 01       	movw	r26, r22
    26aa:	ca 01       	movw	r24, r20
    26ac:	8f 77       	andi	r24, 0x7F	; 127
    26ae:	90 70       	andi	r25, 0x00	; 0
    26b0:	a0 70       	andi	r26, 0x00	; 0
    26b2:	b0 70       	andi	r27, 0x00	; 0
    26b4:	80 34       	cpi	r24, 0x40	; 64
    26b6:	91 05       	cpc	r25, r1
    26b8:	a1 05       	cpc	r26, r1
    26ba:	b1 05       	cpc	r27, r1
    26bc:	61 f4       	brne	.+24     	; 0x26d6 <__mulsf3+0x1ce>
    26be:	47 fd       	sbrc	r20, 7
    26c0:	0a c0       	rjmp	.+20     	; 0x26d6 <__mulsf3+0x1ce>
    26c2:	e1 14       	cp	r14, r1
    26c4:	f1 04       	cpc	r15, r1
    26c6:	01 05       	cpc	r16, r1
    26c8:	11 05       	cpc	r17, r1
    26ca:	29 f0       	breq	.+10     	; 0x26d6 <__mulsf3+0x1ce>
    26cc:	40 5c       	subi	r20, 0xC0	; 192
    26ce:	5f 4f       	sbci	r21, 0xFF	; 255
    26d0:	6f 4f       	sbci	r22, 0xFF	; 255
    26d2:	7f 4f       	sbci	r23, 0xFF	; 255
    26d4:	40 78       	andi	r20, 0x80	; 128
    26d6:	1a 8e       	std	Y+26, r1	; 0x1a
    26d8:	fe 17       	cp	r31, r30
    26da:	11 f0       	breq	.+4      	; 0x26e0 <__mulsf3+0x1d8>
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	8a 8f       	std	Y+26, r24	; 0x1a
    26e0:	4d 8f       	std	Y+29, r20	; 0x1d
    26e2:	5e 8f       	std	Y+30, r21	; 0x1e
    26e4:	6f 8f       	std	Y+31, r22	; 0x1f
    26e6:	78 a3       	std	Y+32, r23	; 0x20
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	89 8f       	std	Y+25, r24	; 0x19
    26ec:	ce 01       	movw	r24, r28
    26ee:	49 96       	adiw	r24, 0x19	; 25
    26f0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__pack_f>
    26f4:	a0 96       	adiw	r28, 0x20	; 32
    26f6:	e2 e1       	ldi	r30, 0x12	; 18
    26f8:	0c 94 79 3d 	jmp	0x7af2	; 0x7af2 <__epilogue_restores__>

000026fc <__divsf3>:
    26fc:	a8 e1       	ldi	r26, 0x18	; 24
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e4 e8       	ldi	r30, 0x84	; 132
    2702:	f3 e1       	ldi	r31, 0x13	; 19
    2704:	0c 94 65 3d 	jmp	0x7aca	; 0x7aca <__prologue_saves__+0x10>
    2708:	69 83       	std	Y+1, r22	; 0x01
    270a:	7a 83       	std	Y+2, r23	; 0x02
    270c:	8b 83       	std	Y+3, r24	; 0x03
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	2d 83       	std	Y+5, r18	; 0x05
    2712:	3e 83       	std	Y+6, r19	; 0x06
    2714:	4f 83       	std	Y+7, r20	; 0x07
    2716:	58 87       	std	Y+8, r21	; 0x08
    2718:	b9 e0       	ldi	r27, 0x09	; 9
    271a:	eb 2e       	mov	r14, r27
    271c:	f1 2c       	mov	r15, r1
    271e:	ec 0e       	add	r14, r28
    2720:	fd 1e       	adc	r15, r29
    2722:	ce 01       	movw	r24, r28
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	b7 01       	movw	r22, r14
    2728:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    272c:	8e 01       	movw	r16, r28
    272e:	0f 5e       	subi	r16, 0xEF	; 239
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	ce 01       	movw	r24, r28
    2734:	05 96       	adiw	r24, 0x05	; 5
    2736:	b8 01       	movw	r22, r16
    2738:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    273c:	29 85       	ldd	r18, Y+9	; 0x09
    273e:	22 30       	cpi	r18, 0x02	; 2
    2740:	08 f4       	brcc	.+2      	; 0x2744 <__divsf3+0x48>
    2742:	7e c0       	rjmp	.+252    	; 0x2840 <__divsf3+0x144>
    2744:	39 89       	ldd	r19, Y+17	; 0x11
    2746:	32 30       	cpi	r19, 0x02	; 2
    2748:	10 f4       	brcc	.+4      	; 0x274e <__divsf3+0x52>
    274a:	b8 01       	movw	r22, r16
    274c:	7c c0       	rjmp	.+248    	; 0x2846 <__divsf3+0x14a>
    274e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2750:	9a 89       	ldd	r25, Y+18	; 0x12
    2752:	89 27       	eor	r24, r25
    2754:	8a 87       	std	Y+10, r24	; 0x0a
    2756:	24 30       	cpi	r18, 0x04	; 4
    2758:	11 f0       	breq	.+4      	; 0x275e <__divsf3+0x62>
    275a:	22 30       	cpi	r18, 0x02	; 2
    275c:	31 f4       	brne	.+12     	; 0x276a <__divsf3+0x6e>
    275e:	23 17       	cp	r18, r19
    2760:	09 f0       	breq	.+2      	; 0x2764 <__divsf3+0x68>
    2762:	6e c0       	rjmp	.+220    	; 0x2840 <__divsf3+0x144>
    2764:	62 ef       	ldi	r22, 0xF2	; 242
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	6e c0       	rjmp	.+220    	; 0x2846 <__divsf3+0x14a>
    276a:	34 30       	cpi	r19, 0x04	; 4
    276c:	39 f4       	brne	.+14     	; 0x277c <__divsf3+0x80>
    276e:	1d 86       	std	Y+13, r1	; 0x0d
    2770:	1e 86       	std	Y+14, r1	; 0x0e
    2772:	1f 86       	std	Y+15, r1	; 0x0f
    2774:	18 8a       	std	Y+16, r1	; 0x10
    2776:	1c 86       	std	Y+12, r1	; 0x0c
    2778:	1b 86       	std	Y+11, r1	; 0x0b
    277a:	04 c0       	rjmp	.+8      	; 0x2784 <__divsf3+0x88>
    277c:	32 30       	cpi	r19, 0x02	; 2
    277e:	21 f4       	brne	.+8      	; 0x2788 <__divsf3+0x8c>
    2780:	84 e0       	ldi	r24, 0x04	; 4
    2782:	89 87       	std	Y+9, r24	; 0x09
    2784:	b7 01       	movw	r22, r14
    2786:	5f c0       	rjmp	.+190    	; 0x2846 <__divsf3+0x14a>
    2788:	2b 85       	ldd	r18, Y+11	; 0x0b
    278a:	3c 85       	ldd	r19, Y+12	; 0x0c
    278c:	8b 89       	ldd	r24, Y+19	; 0x13
    278e:	9c 89       	ldd	r25, Y+20	; 0x14
    2790:	28 1b       	sub	r18, r24
    2792:	39 0b       	sbc	r19, r25
    2794:	3c 87       	std	Y+12, r19	; 0x0c
    2796:	2b 87       	std	Y+11, r18	; 0x0b
    2798:	ed 84       	ldd	r14, Y+13	; 0x0d
    279a:	fe 84       	ldd	r15, Y+14	; 0x0e
    279c:	0f 85       	ldd	r16, Y+15	; 0x0f
    279e:	18 89       	ldd	r17, Y+16	; 0x10
    27a0:	ad 88       	ldd	r10, Y+21	; 0x15
    27a2:	be 88       	ldd	r11, Y+22	; 0x16
    27a4:	cf 88       	ldd	r12, Y+23	; 0x17
    27a6:	d8 8c       	ldd	r13, Y+24	; 0x18
    27a8:	ea 14       	cp	r14, r10
    27aa:	fb 04       	cpc	r15, r11
    27ac:	0c 05       	cpc	r16, r12
    27ae:	1d 05       	cpc	r17, r13
    27b0:	40 f4       	brcc	.+16     	; 0x27c2 <__divsf3+0xc6>
    27b2:	ee 0c       	add	r14, r14
    27b4:	ff 1c       	adc	r15, r15
    27b6:	00 1f       	adc	r16, r16
    27b8:	11 1f       	adc	r17, r17
    27ba:	21 50       	subi	r18, 0x01	; 1
    27bc:	30 40       	sbci	r19, 0x00	; 0
    27be:	3c 87       	std	Y+12, r19	; 0x0c
    27c0:	2b 87       	std	Y+11, r18	; 0x0b
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	a0 e0       	ldi	r26, 0x00	; 0
    27d0:	b0 e4       	ldi	r27, 0x40	; 64
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	ea 14       	cp	r14, r10
    27d8:	fb 04       	cpc	r15, r11
    27da:	0c 05       	cpc	r16, r12
    27dc:	1d 05       	cpc	r17, r13
    27de:	40 f0       	brcs	.+16     	; 0x27f0 <__divsf3+0xf4>
    27e0:	28 2b       	or	r18, r24
    27e2:	39 2b       	or	r19, r25
    27e4:	4a 2b       	or	r20, r26
    27e6:	5b 2b       	or	r21, r27
    27e8:	ea 18       	sub	r14, r10
    27ea:	fb 08       	sbc	r15, r11
    27ec:	0c 09       	sbc	r16, r12
    27ee:	1d 09       	sbc	r17, r13
    27f0:	b6 95       	lsr	r27
    27f2:	a7 95       	ror	r26
    27f4:	97 95       	ror	r25
    27f6:	87 95       	ror	r24
    27f8:	ee 0c       	add	r14, r14
    27fa:	ff 1c       	adc	r15, r15
    27fc:	00 1f       	adc	r16, r16
    27fe:	11 1f       	adc	r17, r17
    2800:	6f 5f       	subi	r22, 0xFF	; 255
    2802:	7f 4f       	sbci	r23, 0xFF	; 255
    2804:	6f 31       	cpi	r22, 0x1F	; 31
    2806:	71 05       	cpc	r23, r1
    2808:	31 f7       	brne	.-52     	; 0x27d6 <__divsf3+0xda>
    280a:	da 01       	movw	r26, r20
    280c:	c9 01       	movw	r24, r18
    280e:	8f 77       	andi	r24, 0x7F	; 127
    2810:	90 70       	andi	r25, 0x00	; 0
    2812:	a0 70       	andi	r26, 0x00	; 0
    2814:	b0 70       	andi	r27, 0x00	; 0
    2816:	80 34       	cpi	r24, 0x40	; 64
    2818:	91 05       	cpc	r25, r1
    281a:	a1 05       	cpc	r26, r1
    281c:	b1 05       	cpc	r27, r1
    281e:	61 f4       	brne	.+24     	; 0x2838 <__divsf3+0x13c>
    2820:	27 fd       	sbrc	r18, 7
    2822:	0a c0       	rjmp	.+20     	; 0x2838 <__divsf3+0x13c>
    2824:	e1 14       	cp	r14, r1
    2826:	f1 04       	cpc	r15, r1
    2828:	01 05       	cpc	r16, r1
    282a:	11 05       	cpc	r17, r1
    282c:	29 f0       	breq	.+10     	; 0x2838 <__divsf3+0x13c>
    282e:	20 5c       	subi	r18, 0xC0	; 192
    2830:	3f 4f       	sbci	r19, 0xFF	; 255
    2832:	4f 4f       	sbci	r20, 0xFF	; 255
    2834:	5f 4f       	sbci	r21, 0xFF	; 255
    2836:	20 78       	andi	r18, 0x80	; 128
    2838:	2d 87       	std	Y+13, r18	; 0x0d
    283a:	3e 87       	std	Y+14, r19	; 0x0e
    283c:	4f 87       	std	Y+15, r20	; 0x0f
    283e:	58 8b       	std	Y+16, r21	; 0x10
    2840:	be 01       	movw	r22, r28
    2842:	67 5f       	subi	r22, 0xF7	; 247
    2844:	7f 4f       	sbci	r23, 0xFF	; 255
    2846:	cb 01       	movw	r24, r22
    2848:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__pack_f>
    284c:	68 96       	adiw	r28, 0x18	; 24
    284e:	ea e0       	ldi	r30, 0x0A	; 10
    2850:	0c 94 81 3d 	jmp	0x7b02	; 0x7b02 <__epilogue_restores__+0x10>

00002854 <__gtsf2>:
    2854:	a8 e1       	ldi	r26, 0x18	; 24
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e0 e3       	ldi	r30, 0x30	; 48
    285a:	f4 e1       	ldi	r31, 0x14	; 20
    285c:	0c 94 69 3d 	jmp	0x7ad2	; 0x7ad2 <__prologue_saves__+0x18>
    2860:	69 83       	std	Y+1, r22	; 0x01
    2862:	7a 83       	std	Y+2, r23	; 0x02
    2864:	8b 83       	std	Y+3, r24	; 0x03
    2866:	9c 83       	std	Y+4, r25	; 0x04
    2868:	2d 83       	std	Y+5, r18	; 0x05
    286a:	3e 83       	std	Y+6, r19	; 0x06
    286c:	4f 83       	std	Y+7, r20	; 0x07
    286e:	58 87       	std	Y+8, r21	; 0x08
    2870:	89 e0       	ldi	r24, 0x09	; 9
    2872:	e8 2e       	mov	r14, r24
    2874:	f1 2c       	mov	r15, r1
    2876:	ec 0e       	add	r14, r28
    2878:	fd 1e       	adc	r15, r29
    287a:	ce 01       	movw	r24, r28
    287c:	01 96       	adiw	r24, 0x01	; 1
    287e:	b7 01       	movw	r22, r14
    2880:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    2884:	8e 01       	movw	r16, r28
    2886:	0f 5e       	subi	r16, 0xEF	; 239
    2888:	1f 4f       	sbci	r17, 0xFF	; 255
    288a:	ce 01       	movw	r24, r28
    288c:	05 96       	adiw	r24, 0x05	; 5
    288e:	b8 01       	movw	r22, r16
    2890:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    2894:	89 85       	ldd	r24, Y+9	; 0x09
    2896:	82 30       	cpi	r24, 0x02	; 2
    2898:	40 f0       	brcs	.+16     	; 0x28aa <__gtsf2+0x56>
    289a:	89 89       	ldd	r24, Y+17	; 0x11
    289c:	82 30       	cpi	r24, 0x02	; 2
    289e:	28 f0       	brcs	.+10     	; 0x28aa <__gtsf2+0x56>
    28a0:	c7 01       	movw	r24, r14
    28a2:	b8 01       	movw	r22, r16
    28a4:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__fpcmp_parts_f>
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <__gtsf2+0x58>
    28aa:	8f ef       	ldi	r24, 0xFF	; 255
    28ac:	68 96       	adiw	r28, 0x18	; 24
    28ae:	e6 e0       	ldi	r30, 0x06	; 6
    28b0:	0c 94 85 3d 	jmp	0x7b0a	; 0x7b0a <__epilogue_restores__+0x18>

000028b4 <__gesf2>:
    28b4:	a8 e1       	ldi	r26, 0x18	; 24
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e0 e6       	ldi	r30, 0x60	; 96
    28ba:	f4 e1       	ldi	r31, 0x14	; 20
    28bc:	0c 94 69 3d 	jmp	0x7ad2	; 0x7ad2 <__prologue_saves__+0x18>
    28c0:	69 83       	std	Y+1, r22	; 0x01
    28c2:	7a 83       	std	Y+2, r23	; 0x02
    28c4:	8b 83       	std	Y+3, r24	; 0x03
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	2d 83       	std	Y+5, r18	; 0x05
    28ca:	3e 83       	std	Y+6, r19	; 0x06
    28cc:	4f 83       	std	Y+7, r20	; 0x07
    28ce:	58 87       	std	Y+8, r21	; 0x08
    28d0:	89 e0       	ldi	r24, 0x09	; 9
    28d2:	e8 2e       	mov	r14, r24
    28d4:	f1 2c       	mov	r15, r1
    28d6:	ec 0e       	add	r14, r28
    28d8:	fd 1e       	adc	r15, r29
    28da:	ce 01       	movw	r24, r28
    28dc:	01 96       	adiw	r24, 0x01	; 1
    28de:	b7 01       	movw	r22, r14
    28e0:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    28e4:	8e 01       	movw	r16, r28
    28e6:	0f 5e       	subi	r16, 0xEF	; 239
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	ce 01       	movw	r24, r28
    28ec:	05 96       	adiw	r24, 0x05	; 5
    28ee:	b8 01       	movw	r22, r16
    28f0:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    28f4:	89 85       	ldd	r24, Y+9	; 0x09
    28f6:	82 30       	cpi	r24, 0x02	; 2
    28f8:	40 f0       	brcs	.+16     	; 0x290a <__gesf2+0x56>
    28fa:	89 89       	ldd	r24, Y+17	; 0x11
    28fc:	82 30       	cpi	r24, 0x02	; 2
    28fe:	28 f0       	brcs	.+10     	; 0x290a <__gesf2+0x56>
    2900:	c7 01       	movw	r24, r14
    2902:	b8 01       	movw	r22, r16
    2904:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__fpcmp_parts_f>
    2908:	01 c0       	rjmp	.+2      	; 0x290c <__gesf2+0x58>
    290a:	8f ef       	ldi	r24, 0xFF	; 255
    290c:	68 96       	adiw	r28, 0x18	; 24
    290e:	e6 e0       	ldi	r30, 0x06	; 6
    2910:	0c 94 85 3d 	jmp	0x7b0a	; 0x7b0a <__epilogue_restores__+0x18>

00002914 <__ltsf2>:
    2914:	a8 e1       	ldi	r26, 0x18	; 24
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	e0 e9       	ldi	r30, 0x90	; 144
    291a:	f4 e1       	ldi	r31, 0x14	; 20
    291c:	0c 94 69 3d 	jmp	0x7ad2	; 0x7ad2 <__prologue_saves__+0x18>
    2920:	69 83       	std	Y+1, r22	; 0x01
    2922:	7a 83       	std	Y+2, r23	; 0x02
    2924:	8b 83       	std	Y+3, r24	; 0x03
    2926:	9c 83       	std	Y+4, r25	; 0x04
    2928:	2d 83       	std	Y+5, r18	; 0x05
    292a:	3e 83       	std	Y+6, r19	; 0x06
    292c:	4f 83       	std	Y+7, r20	; 0x07
    292e:	58 87       	std	Y+8, r21	; 0x08
    2930:	89 e0       	ldi	r24, 0x09	; 9
    2932:	e8 2e       	mov	r14, r24
    2934:	f1 2c       	mov	r15, r1
    2936:	ec 0e       	add	r14, r28
    2938:	fd 1e       	adc	r15, r29
    293a:	ce 01       	movw	r24, r28
    293c:	01 96       	adiw	r24, 0x01	; 1
    293e:	b7 01       	movw	r22, r14
    2940:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    2944:	8e 01       	movw	r16, r28
    2946:	0f 5e       	subi	r16, 0xEF	; 239
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	ce 01       	movw	r24, r28
    294c:	05 96       	adiw	r24, 0x05	; 5
    294e:	b8 01       	movw	r22, r16
    2950:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    2954:	89 85       	ldd	r24, Y+9	; 0x09
    2956:	82 30       	cpi	r24, 0x02	; 2
    2958:	40 f0       	brcs	.+16     	; 0x296a <__ltsf2+0x56>
    295a:	89 89       	ldd	r24, Y+17	; 0x11
    295c:	82 30       	cpi	r24, 0x02	; 2
    295e:	28 f0       	brcs	.+10     	; 0x296a <__ltsf2+0x56>
    2960:	c7 01       	movw	r24, r14
    2962:	b8 01       	movw	r22, r16
    2964:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__fpcmp_parts_f>
    2968:	01 c0       	rjmp	.+2      	; 0x296c <__ltsf2+0x58>
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	68 96       	adiw	r28, 0x18	; 24
    296e:	e6 e0       	ldi	r30, 0x06	; 6
    2970:	0c 94 85 3d 	jmp	0x7b0a	; 0x7b0a <__epilogue_restores__+0x18>

00002974 <__fixsfsi>:
    2974:	ac e0       	ldi	r26, 0x0C	; 12
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e0 ec       	ldi	r30, 0xC0	; 192
    297a:	f4 e1       	ldi	r31, 0x14	; 20
    297c:	0c 94 6d 3d 	jmp	0x7ada	; 0x7ada <__prologue_saves__+0x20>
    2980:	69 83       	std	Y+1, r22	; 0x01
    2982:	7a 83       	std	Y+2, r23	; 0x02
    2984:	8b 83       	std	Y+3, r24	; 0x03
    2986:	9c 83       	std	Y+4, r25	; 0x04
    2988:	ce 01       	movw	r24, r28
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	be 01       	movw	r22, r28
    298e:	6b 5f       	subi	r22, 0xFB	; 251
    2990:	7f 4f       	sbci	r23, 0xFF	; 255
    2992:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__unpack_f>
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	82 30       	cpi	r24, 0x02	; 2
    299a:	61 f1       	breq	.+88     	; 0x29f4 <__fixsfsi+0x80>
    299c:	82 30       	cpi	r24, 0x02	; 2
    299e:	50 f1       	brcs	.+84     	; 0x29f4 <__fixsfsi+0x80>
    29a0:	84 30       	cpi	r24, 0x04	; 4
    29a2:	21 f4       	brne	.+8      	; 0x29ac <__fixsfsi+0x38>
    29a4:	8e 81       	ldd	r24, Y+6	; 0x06
    29a6:	88 23       	and	r24, r24
    29a8:	51 f1       	breq	.+84     	; 0x29fe <__fixsfsi+0x8a>
    29aa:	2e c0       	rjmp	.+92     	; 0x2a08 <__fixsfsi+0x94>
    29ac:	2f 81       	ldd	r18, Y+7	; 0x07
    29ae:	38 85       	ldd	r19, Y+8	; 0x08
    29b0:	37 fd       	sbrc	r19, 7
    29b2:	20 c0       	rjmp	.+64     	; 0x29f4 <__fixsfsi+0x80>
    29b4:	6e 81       	ldd	r22, Y+6	; 0x06
    29b6:	2f 31       	cpi	r18, 0x1F	; 31
    29b8:	31 05       	cpc	r19, r1
    29ba:	1c f0       	brlt	.+6      	; 0x29c2 <__fixsfsi+0x4e>
    29bc:	66 23       	and	r22, r22
    29be:	f9 f0       	breq	.+62     	; 0x29fe <__fixsfsi+0x8a>
    29c0:	23 c0       	rjmp	.+70     	; 0x2a08 <__fixsfsi+0x94>
    29c2:	8e e1       	ldi	r24, 0x1E	; 30
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	82 1b       	sub	r24, r18
    29c8:	93 0b       	sbc	r25, r19
    29ca:	29 85       	ldd	r18, Y+9	; 0x09
    29cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    29ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    29d0:	5c 85       	ldd	r21, Y+12	; 0x0c
    29d2:	04 c0       	rjmp	.+8      	; 0x29dc <__fixsfsi+0x68>
    29d4:	56 95       	lsr	r21
    29d6:	47 95       	ror	r20
    29d8:	37 95       	ror	r19
    29da:	27 95       	ror	r18
    29dc:	8a 95       	dec	r24
    29de:	d2 f7       	brpl	.-12     	; 0x29d4 <__fixsfsi+0x60>
    29e0:	66 23       	and	r22, r22
    29e2:	b1 f0       	breq	.+44     	; 0x2a10 <__fixsfsi+0x9c>
    29e4:	50 95       	com	r21
    29e6:	40 95       	com	r20
    29e8:	30 95       	com	r19
    29ea:	21 95       	neg	r18
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
    29ee:	4f 4f       	sbci	r20, 0xFF	; 255
    29f0:	5f 4f       	sbci	r21, 0xFF	; 255
    29f2:	0e c0       	rjmp	.+28     	; 0x2a10 <__fixsfsi+0x9c>
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	09 c0       	rjmp	.+18     	; 0x2a10 <__fixsfsi+0x9c>
    29fe:	2f ef       	ldi	r18, 0xFF	; 255
    2a00:	3f ef       	ldi	r19, 0xFF	; 255
    2a02:	4f ef       	ldi	r20, 0xFF	; 255
    2a04:	5f e7       	ldi	r21, 0x7F	; 127
    2a06:	04 c0       	rjmp	.+8      	; 0x2a10 <__fixsfsi+0x9c>
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	50 e8       	ldi	r21, 0x80	; 128
    2a10:	b9 01       	movw	r22, r18
    2a12:	ca 01       	movw	r24, r20
    2a14:	2c 96       	adiw	r28, 0x0c	; 12
    2a16:	e2 e0       	ldi	r30, 0x02	; 2
    2a18:	0c 94 89 3d 	jmp	0x7b12	; 0x7b12 <__epilogue_restores__+0x20>

00002a1c <__pack_f>:
    2a1c:	df 92       	push	r13
    2a1e:	ef 92       	push	r14
    2a20:	ff 92       	push	r15
    2a22:	0f 93       	push	r16
    2a24:	1f 93       	push	r17
    2a26:	fc 01       	movw	r30, r24
    2a28:	e4 80       	ldd	r14, Z+4	; 0x04
    2a2a:	f5 80       	ldd	r15, Z+5	; 0x05
    2a2c:	06 81       	ldd	r16, Z+6	; 0x06
    2a2e:	17 81       	ldd	r17, Z+7	; 0x07
    2a30:	d1 80       	ldd	r13, Z+1	; 0x01
    2a32:	80 81       	ld	r24, Z
    2a34:	82 30       	cpi	r24, 0x02	; 2
    2a36:	48 f4       	brcc	.+18     	; 0x2a4a <__pack_f+0x2e>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 e1       	ldi	r26, 0x10	; 16
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	e8 2a       	or	r14, r24
    2a42:	f9 2a       	or	r15, r25
    2a44:	0a 2b       	or	r16, r26
    2a46:	1b 2b       	or	r17, r27
    2a48:	a5 c0       	rjmp	.+330    	; 0x2b94 <__pack_f+0x178>
    2a4a:	84 30       	cpi	r24, 0x04	; 4
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <__pack_f+0x34>
    2a4e:	9f c0       	rjmp	.+318    	; 0x2b8e <__pack_f+0x172>
    2a50:	82 30       	cpi	r24, 0x02	; 2
    2a52:	21 f4       	brne	.+8      	; 0x2a5c <__pack_f+0x40>
    2a54:	ee 24       	eor	r14, r14
    2a56:	ff 24       	eor	r15, r15
    2a58:	87 01       	movw	r16, r14
    2a5a:	05 c0       	rjmp	.+10     	; 0x2a66 <__pack_f+0x4a>
    2a5c:	e1 14       	cp	r14, r1
    2a5e:	f1 04       	cpc	r15, r1
    2a60:	01 05       	cpc	r16, r1
    2a62:	11 05       	cpc	r17, r1
    2a64:	19 f4       	brne	.+6      	; 0x2a6c <__pack_f+0x50>
    2a66:	e0 e0       	ldi	r30, 0x00	; 0
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	96 c0       	rjmp	.+300    	; 0x2b98 <__pack_f+0x17c>
    2a6c:	62 81       	ldd	r22, Z+2	; 0x02
    2a6e:	73 81       	ldd	r23, Z+3	; 0x03
    2a70:	9f ef       	ldi	r25, 0xFF	; 255
    2a72:	62 38       	cpi	r22, 0x82	; 130
    2a74:	79 07       	cpc	r23, r25
    2a76:	0c f0       	brlt	.+2      	; 0x2a7a <__pack_f+0x5e>
    2a78:	5b c0       	rjmp	.+182    	; 0x2b30 <__pack_f+0x114>
    2a7a:	22 e8       	ldi	r18, 0x82	; 130
    2a7c:	3f ef       	ldi	r19, 0xFF	; 255
    2a7e:	26 1b       	sub	r18, r22
    2a80:	37 0b       	sbc	r19, r23
    2a82:	2a 31       	cpi	r18, 0x1A	; 26
    2a84:	31 05       	cpc	r19, r1
    2a86:	2c f0       	brlt	.+10     	; 0x2a92 <__pack_f+0x76>
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e0       	ldi	r20, 0x00	; 0
    2a8e:	50 e0       	ldi	r21, 0x00	; 0
    2a90:	2a c0       	rjmp	.+84     	; 0x2ae6 <__pack_f+0xca>
    2a92:	b8 01       	movw	r22, r16
    2a94:	a7 01       	movw	r20, r14
    2a96:	02 2e       	mov	r0, r18
    2a98:	04 c0       	rjmp	.+8      	; 0x2aa2 <__pack_f+0x86>
    2a9a:	76 95       	lsr	r23
    2a9c:	67 95       	ror	r22
    2a9e:	57 95       	ror	r21
    2aa0:	47 95       	ror	r20
    2aa2:	0a 94       	dec	r0
    2aa4:	d2 f7       	brpl	.-12     	; 0x2a9a <__pack_f+0x7e>
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	a0 e0       	ldi	r26, 0x00	; 0
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	04 c0       	rjmp	.+8      	; 0x2ab8 <__pack_f+0x9c>
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	aa 1f       	adc	r26, r26
    2ab6:	bb 1f       	adc	r27, r27
    2ab8:	2a 95       	dec	r18
    2aba:	d2 f7       	brpl	.-12     	; 0x2ab0 <__pack_f+0x94>
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	a1 09       	sbc	r26, r1
    2ac0:	b1 09       	sbc	r27, r1
    2ac2:	8e 21       	and	r24, r14
    2ac4:	9f 21       	and	r25, r15
    2ac6:	a0 23       	and	r26, r16
    2ac8:	b1 23       	and	r27, r17
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	a1 05       	cpc	r26, r1
    2ace:	b1 05       	cpc	r27, r1
    2ad0:	21 f0       	breq	.+8      	; 0x2ada <__pack_f+0xbe>
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 e0       	ldi	r26, 0x00	; 0
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	9a 01       	movw	r18, r20
    2adc:	ab 01       	movw	r20, r22
    2ade:	28 2b       	or	r18, r24
    2ae0:	39 2b       	or	r19, r25
    2ae2:	4a 2b       	or	r20, r26
    2ae4:	5b 2b       	or	r21, r27
    2ae6:	da 01       	movw	r26, r20
    2ae8:	c9 01       	movw	r24, r18
    2aea:	8f 77       	andi	r24, 0x7F	; 127
    2aec:	90 70       	andi	r25, 0x00	; 0
    2aee:	a0 70       	andi	r26, 0x00	; 0
    2af0:	b0 70       	andi	r27, 0x00	; 0
    2af2:	80 34       	cpi	r24, 0x40	; 64
    2af4:	91 05       	cpc	r25, r1
    2af6:	a1 05       	cpc	r26, r1
    2af8:	b1 05       	cpc	r27, r1
    2afa:	39 f4       	brne	.+14     	; 0x2b0a <__pack_f+0xee>
    2afc:	27 ff       	sbrs	r18, 7
    2afe:	09 c0       	rjmp	.+18     	; 0x2b12 <__pack_f+0xf6>
    2b00:	20 5c       	subi	r18, 0xC0	; 192
    2b02:	3f 4f       	sbci	r19, 0xFF	; 255
    2b04:	4f 4f       	sbci	r20, 0xFF	; 255
    2b06:	5f 4f       	sbci	r21, 0xFF	; 255
    2b08:	04 c0       	rjmp	.+8      	; 0x2b12 <__pack_f+0xf6>
    2b0a:	21 5c       	subi	r18, 0xC1	; 193
    2b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0e:	4f 4f       	sbci	r20, 0xFF	; 255
    2b10:	5f 4f       	sbci	r21, 0xFF	; 255
    2b12:	e0 e0       	ldi	r30, 0x00	; 0
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	20 30       	cpi	r18, 0x00	; 0
    2b18:	a0 e0       	ldi	r26, 0x00	; 0
    2b1a:	3a 07       	cpc	r19, r26
    2b1c:	a0 e0       	ldi	r26, 0x00	; 0
    2b1e:	4a 07       	cpc	r20, r26
    2b20:	a0 e4       	ldi	r26, 0x40	; 64
    2b22:	5a 07       	cpc	r21, r26
    2b24:	10 f0       	brcs	.+4      	; 0x2b2a <__pack_f+0x10e>
    2b26:	e1 e0       	ldi	r30, 0x01	; 1
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	79 01       	movw	r14, r18
    2b2c:	8a 01       	movw	r16, r20
    2b2e:	27 c0       	rjmp	.+78     	; 0x2b7e <__pack_f+0x162>
    2b30:	60 38       	cpi	r22, 0x80	; 128
    2b32:	71 05       	cpc	r23, r1
    2b34:	64 f5       	brge	.+88     	; 0x2b8e <__pack_f+0x172>
    2b36:	fb 01       	movw	r30, r22
    2b38:	e1 58       	subi	r30, 0x81	; 129
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	d8 01       	movw	r26, r16
    2b3e:	c7 01       	movw	r24, r14
    2b40:	8f 77       	andi	r24, 0x7F	; 127
    2b42:	90 70       	andi	r25, 0x00	; 0
    2b44:	a0 70       	andi	r26, 0x00	; 0
    2b46:	b0 70       	andi	r27, 0x00	; 0
    2b48:	80 34       	cpi	r24, 0x40	; 64
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	a1 05       	cpc	r26, r1
    2b4e:	b1 05       	cpc	r27, r1
    2b50:	39 f4       	brne	.+14     	; 0x2b60 <__pack_f+0x144>
    2b52:	e7 fe       	sbrs	r14, 7
    2b54:	0d c0       	rjmp	.+26     	; 0x2b70 <__pack_f+0x154>
    2b56:	80 e4       	ldi	r24, 0x40	; 64
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	a0 e0       	ldi	r26, 0x00	; 0
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	04 c0       	rjmp	.+8      	; 0x2b68 <__pack_f+0x14c>
    2b60:	8f e3       	ldi	r24, 0x3F	; 63
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a0 e0       	ldi	r26, 0x00	; 0
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e8 0e       	add	r14, r24
    2b6a:	f9 1e       	adc	r15, r25
    2b6c:	0a 1f       	adc	r16, r26
    2b6e:	1b 1f       	adc	r17, r27
    2b70:	17 ff       	sbrs	r17, 7
    2b72:	05 c0       	rjmp	.+10     	; 0x2b7e <__pack_f+0x162>
    2b74:	16 95       	lsr	r17
    2b76:	07 95       	ror	r16
    2b78:	f7 94       	ror	r15
    2b7a:	e7 94       	ror	r14
    2b7c:	31 96       	adiw	r30, 0x01	; 1
    2b7e:	87 e0       	ldi	r24, 0x07	; 7
    2b80:	16 95       	lsr	r17
    2b82:	07 95       	ror	r16
    2b84:	f7 94       	ror	r15
    2b86:	e7 94       	ror	r14
    2b88:	8a 95       	dec	r24
    2b8a:	d1 f7       	brne	.-12     	; 0x2b80 <__pack_f+0x164>
    2b8c:	05 c0       	rjmp	.+10     	; 0x2b98 <__pack_f+0x17c>
    2b8e:	ee 24       	eor	r14, r14
    2b90:	ff 24       	eor	r15, r15
    2b92:	87 01       	movw	r16, r14
    2b94:	ef ef       	ldi	r30, 0xFF	; 255
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	6e 2f       	mov	r22, r30
    2b9a:	67 95       	ror	r22
    2b9c:	66 27       	eor	r22, r22
    2b9e:	67 95       	ror	r22
    2ba0:	90 2f       	mov	r25, r16
    2ba2:	9f 77       	andi	r25, 0x7F	; 127
    2ba4:	d7 94       	ror	r13
    2ba6:	dd 24       	eor	r13, r13
    2ba8:	d7 94       	ror	r13
    2baa:	8e 2f       	mov	r24, r30
    2bac:	86 95       	lsr	r24
    2bae:	49 2f       	mov	r20, r25
    2bb0:	46 2b       	or	r20, r22
    2bb2:	58 2f       	mov	r21, r24
    2bb4:	5d 29       	or	r21, r13
    2bb6:	b7 01       	movw	r22, r14
    2bb8:	ca 01       	movw	r24, r20
    2bba:	1f 91       	pop	r17
    2bbc:	0f 91       	pop	r16
    2bbe:	ff 90       	pop	r15
    2bc0:	ef 90       	pop	r14
    2bc2:	df 90       	pop	r13
    2bc4:	08 95       	ret

00002bc6 <__unpack_f>:
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	db 01       	movw	r26, r22
    2bca:	40 81       	ld	r20, Z
    2bcc:	51 81       	ldd	r21, Z+1	; 0x01
    2bce:	22 81       	ldd	r18, Z+2	; 0x02
    2bd0:	62 2f       	mov	r22, r18
    2bd2:	6f 77       	andi	r22, 0x7F	; 127
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	22 1f       	adc	r18, r18
    2bd8:	22 27       	eor	r18, r18
    2bda:	22 1f       	adc	r18, r18
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	89 2f       	mov	r24, r25
    2be0:	88 0f       	add	r24, r24
    2be2:	82 2b       	or	r24, r18
    2be4:	28 2f       	mov	r18, r24
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	99 1f       	adc	r25, r25
    2bea:	99 27       	eor	r25, r25
    2bec:	99 1f       	adc	r25, r25
    2bee:	11 96       	adiw	r26, 0x01	; 1
    2bf0:	9c 93       	st	X, r25
    2bf2:	11 97       	sbiw	r26, 0x01	; 1
    2bf4:	21 15       	cp	r18, r1
    2bf6:	31 05       	cpc	r19, r1
    2bf8:	a9 f5       	brne	.+106    	; 0x2c64 <__unpack_f+0x9e>
    2bfa:	41 15       	cp	r20, r1
    2bfc:	51 05       	cpc	r21, r1
    2bfe:	61 05       	cpc	r22, r1
    2c00:	71 05       	cpc	r23, r1
    2c02:	11 f4       	brne	.+4      	; 0x2c08 <__unpack_f+0x42>
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	37 c0       	rjmp	.+110    	; 0x2c76 <__unpack_f+0xb0>
    2c08:	82 e8       	ldi	r24, 0x82	; 130
    2c0a:	9f ef       	ldi	r25, 0xFF	; 255
    2c0c:	13 96       	adiw	r26, 0x03	; 3
    2c0e:	9c 93       	st	X, r25
    2c10:	8e 93       	st	-X, r24
    2c12:	12 97       	sbiw	r26, 0x02	; 2
    2c14:	9a 01       	movw	r18, r20
    2c16:	ab 01       	movw	r20, r22
    2c18:	67 e0       	ldi	r22, 0x07	; 7
    2c1a:	22 0f       	add	r18, r18
    2c1c:	33 1f       	adc	r19, r19
    2c1e:	44 1f       	adc	r20, r20
    2c20:	55 1f       	adc	r21, r21
    2c22:	6a 95       	dec	r22
    2c24:	d1 f7       	brne	.-12     	; 0x2c1a <__unpack_f+0x54>
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	8c 93       	st	X, r24
    2c2a:	0d c0       	rjmp	.+26     	; 0x2c46 <__unpack_f+0x80>
    2c2c:	22 0f       	add	r18, r18
    2c2e:	33 1f       	adc	r19, r19
    2c30:	44 1f       	adc	r20, r20
    2c32:	55 1f       	adc	r21, r21
    2c34:	12 96       	adiw	r26, 0x02	; 2
    2c36:	8d 91       	ld	r24, X+
    2c38:	9c 91       	ld	r25, X
    2c3a:	13 97       	sbiw	r26, 0x03	; 3
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	13 96       	adiw	r26, 0x03	; 3
    2c40:	9c 93       	st	X, r25
    2c42:	8e 93       	st	-X, r24
    2c44:	12 97       	sbiw	r26, 0x02	; 2
    2c46:	20 30       	cpi	r18, 0x00	; 0
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	38 07       	cpc	r19, r24
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	48 07       	cpc	r20, r24
    2c50:	80 e4       	ldi	r24, 0x40	; 64
    2c52:	58 07       	cpc	r21, r24
    2c54:	58 f3       	brcs	.-42     	; 0x2c2c <__unpack_f+0x66>
    2c56:	14 96       	adiw	r26, 0x04	; 4
    2c58:	2d 93       	st	X+, r18
    2c5a:	3d 93       	st	X+, r19
    2c5c:	4d 93       	st	X+, r20
    2c5e:	5c 93       	st	X, r21
    2c60:	17 97       	sbiw	r26, 0x07	; 7
    2c62:	08 95       	ret
    2c64:	2f 3f       	cpi	r18, 0xFF	; 255
    2c66:	31 05       	cpc	r19, r1
    2c68:	79 f4       	brne	.+30     	; 0x2c88 <__unpack_f+0xc2>
    2c6a:	41 15       	cp	r20, r1
    2c6c:	51 05       	cpc	r21, r1
    2c6e:	61 05       	cpc	r22, r1
    2c70:	71 05       	cpc	r23, r1
    2c72:	19 f4       	brne	.+6      	; 0x2c7a <__unpack_f+0xb4>
    2c74:	84 e0       	ldi	r24, 0x04	; 4
    2c76:	8c 93       	st	X, r24
    2c78:	08 95       	ret
    2c7a:	64 ff       	sbrs	r22, 4
    2c7c:	03 c0       	rjmp	.+6      	; 0x2c84 <__unpack_f+0xbe>
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	8c 93       	st	X, r24
    2c82:	12 c0       	rjmp	.+36     	; 0x2ca8 <__unpack_f+0xe2>
    2c84:	1c 92       	st	X, r1
    2c86:	10 c0       	rjmp	.+32     	; 0x2ca8 <__unpack_f+0xe2>
    2c88:	2f 57       	subi	r18, 0x7F	; 127
    2c8a:	30 40       	sbci	r19, 0x00	; 0
    2c8c:	13 96       	adiw	r26, 0x03	; 3
    2c8e:	3c 93       	st	X, r19
    2c90:	2e 93       	st	-X, r18
    2c92:	12 97       	sbiw	r26, 0x02	; 2
    2c94:	83 e0       	ldi	r24, 0x03	; 3
    2c96:	8c 93       	st	X, r24
    2c98:	87 e0       	ldi	r24, 0x07	; 7
    2c9a:	44 0f       	add	r20, r20
    2c9c:	55 1f       	adc	r21, r21
    2c9e:	66 1f       	adc	r22, r22
    2ca0:	77 1f       	adc	r23, r23
    2ca2:	8a 95       	dec	r24
    2ca4:	d1 f7       	brne	.-12     	; 0x2c9a <__unpack_f+0xd4>
    2ca6:	70 64       	ori	r23, 0x40	; 64
    2ca8:	14 96       	adiw	r26, 0x04	; 4
    2caa:	4d 93       	st	X+, r20
    2cac:	5d 93       	st	X+, r21
    2cae:	6d 93       	st	X+, r22
    2cb0:	7c 93       	st	X, r23
    2cb2:	17 97       	sbiw	r26, 0x07	; 7
    2cb4:	08 95       	ret

00002cb6 <__fpcmp_parts_f>:
    2cb6:	1f 93       	push	r17
    2cb8:	dc 01       	movw	r26, r24
    2cba:	fb 01       	movw	r30, r22
    2cbc:	9c 91       	ld	r25, X
    2cbe:	92 30       	cpi	r25, 0x02	; 2
    2cc0:	08 f4       	brcc	.+2      	; 0x2cc4 <__fpcmp_parts_f+0xe>
    2cc2:	47 c0       	rjmp	.+142    	; 0x2d52 <__fpcmp_parts_f+0x9c>
    2cc4:	80 81       	ld	r24, Z
    2cc6:	82 30       	cpi	r24, 0x02	; 2
    2cc8:	08 f4       	brcc	.+2      	; 0x2ccc <__fpcmp_parts_f+0x16>
    2cca:	43 c0       	rjmp	.+134    	; 0x2d52 <__fpcmp_parts_f+0x9c>
    2ccc:	94 30       	cpi	r25, 0x04	; 4
    2cce:	51 f4       	brne	.+20     	; 0x2ce4 <__fpcmp_parts_f+0x2e>
    2cd0:	11 96       	adiw	r26, 0x01	; 1
    2cd2:	1c 91       	ld	r17, X
    2cd4:	84 30       	cpi	r24, 0x04	; 4
    2cd6:	99 f5       	brne	.+102    	; 0x2d3e <__fpcmp_parts_f+0x88>
    2cd8:	81 81       	ldd	r24, Z+1	; 0x01
    2cda:	68 2f       	mov	r22, r24
    2cdc:	70 e0       	ldi	r23, 0x00	; 0
    2cde:	61 1b       	sub	r22, r17
    2ce0:	71 09       	sbc	r23, r1
    2ce2:	3f c0       	rjmp	.+126    	; 0x2d62 <__fpcmp_parts_f+0xac>
    2ce4:	84 30       	cpi	r24, 0x04	; 4
    2ce6:	21 f0       	breq	.+8      	; 0x2cf0 <__fpcmp_parts_f+0x3a>
    2ce8:	92 30       	cpi	r25, 0x02	; 2
    2cea:	31 f4       	brne	.+12     	; 0x2cf8 <__fpcmp_parts_f+0x42>
    2cec:	82 30       	cpi	r24, 0x02	; 2
    2cee:	b9 f1       	breq	.+110    	; 0x2d5e <__fpcmp_parts_f+0xa8>
    2cf0:	81 81       	ldd	r24, Z+1	; 0x01
    2cf2:	88 23       	and	r24, r24
    2cf4:	89 f1       	breq	.+98     	; 0x2d58 <__fpcmp_parts_f+0xa2>
    2cf6:	2d c0       	rjmp	.+90     	; 0x2d52 <__fpcmp_parts_f+0x9c>
    2cf8:	11 96       	adiw	r26, 0x01	; 1
    2cfa:	1c 91       	ld	r17, X
    2cfc:	11 97       	sbiw	r26, 0x01	; 1
    2cfe:	82 30       	cpi	r24, 0x02	; 2
    2d00:	f1 f0       	breq	.+60     	; 0x2d3e <__fpcmp_parts_f+0x88>
    2d02:	81 81       	ldd	r24, Z+1	; 0x01
    2d04:	18 17       	cp	r17, r24
    2d06:	d9 f4       	brne	.+54     	; 0x2d3e <__fpcmp_parts_f+0x88>
    2d08:	12 96       	adiw	r26, 0x02	; 2
    2d0a:	2d 91       	ld	r18, X+
    2d0c:	3c 91       	ld	r19, X
    2d0e:	13 97       	sbiw	r26, 0x03	; 3
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	82 17       	cp	r24, r18
    2d16:	93 07       	cpc	r25, r19
    2d18:	94 f0       	brlt	.+36     	; 0x2d3e <__fpcmp_parts_f+0x88>
    2d1a:	28 17       	cp	r18, r24
    2d1c:	39 07       	cpc	r19, r25
    2d1e:	bc f0       	brlt	.+46     	; 0x2d4e <__fpcmp_parts_f+0x98>
    2d20:	14 96       	adiw	r26, 0x04	; 4
    2d22:	8d 91       	ld	r24, X+
    2d24:	9d 91       	ld	r25, X+
    2d26:	0d 90       	ld	r0, X+
    2d28:	bc 91       	ld	r27, X
    2d2a:	a0 2d       	mov	r26, r0
    2d2c:	24 81       	ldd	r18, Z+4	; 0x04
    2d2e:	35 81       	ldd	r19, Z+5	; 0x05
    2d30:	46 81       	ldd	r20, Z+6	; 0x06
    2d32:	57 81       	ldd	r21, Z+7	; 0x07
    2d34:	28 17       	cp	r18, r24
    2d36:	39 07       	cpc	r19, r25
    2d38:	4a 07       	cpc	r20, r26
    2d3a:	5b 07       	cpc	r21, r27
    2d3c:	18 f4       	brcc	.+6      	; 0x2d44 <__fpcmp_parts_f+0x8e>
    2d3e:	11 23       	and	r17, r17
    2d40:	41 f0       	breq	.+16     	; 0x2d52 <__fpcmp_parts_f+0x9c>
    2d42:	0a c0       	rjmp	.+20     	; 0x2d58 <__fpcmp_parts_f+0xa2>
    2d44:	82 17       	cp	r24, r18
    2d46:	93 07       	cpc	r25, r19
    2d48:	a4 07       	cpc	r26, r20
    2d4a:	b5 07       	cpc	r27, r21
    2d4c:	40 f4       	brcc	.+16     	; 0x2d5e <__fpcmp_parts_f+0xa8>
    2d4e:	11 23       	and	r17, r17
    2d50:	19 f0       	breq	.+6      	; 0x2d58 <__fpcmp_parts_f+0xa2>
    2d52:	61 e0       	ldi	r22, 0x01	; 1
    2d54:	70 e0       	ldi	r23, 0x00	; 0
    2d56:	05 c0       	rjmp	.+10     	; 0x2d62 <__fpcmp_parts_f+0xac>
    2d58:	6f ef       	ldi	r22, 0xFF	; 255
    2d5a:	7f ef       	ldi	r23, 0xFF	; 255
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <__fpcmp_parts_f+0xac>
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	70 e0       	ldi	r23, 0x00	; 0
    2d62:	cb 01       	movw	r24, r22
    2d64:	1f 91       	pop	r17
    2d66:	08 95       	ret

00002d68 <ADC_Init>:
#if ADC_MODE==SINGLE_CONERSION



void ADC_Init(void)
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62



   #elif ADC_VREF==VREF_AVCC

	CLR_BIT(ADMUX,REFS1);
    2d70:	a7 e2       	ldi	r26, 0x27	; 39
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	e7 e2       	ldi	r30, 0x27	; 39
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	8f 77       	andi	r24, 0x7F	; 127
    2d7c:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
    2d7e:	a7 e2       	ldi	r26, 0x27	; 39
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	e7 e2       	ldi	r30, 0x27	; 39
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	80 64       	ori	r24, 0x40	; 64
    2d8a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);

   #endif

	//prescaler
	ADCSRA&=0xF8;
    2d8c:	a6 e2       	ldi	r26, 0x26	; 38
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e6 e2       	ldi	r30, 0x26	; 38
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	88 7f       	andi	r24, 0xF8	; 248
    2d98:	8c 93       	st	X, r24
	ADCSRA|=ADC_PRESCALER;
    2d9a:	a6 e2       	ldi	r26, 0x26	; 38
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	e6 e2       	ldi	r30, 0x26	; 38
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	87 60       	ori	r24, 0x07	; 7
    2da6:	8c 93       	st	X, r24


	//ADC_Enable
	SET_BIT(ADCSRA,ADEN);
    2da8:	a6 e2       	ldi	r26, 0x26	; 38
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	e6 e2       	ldi	r30, 0x26	; 38
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	80 68       	ori	r24, 0x80	; 128
    2db4:	8c 93       	st	X, r24


}
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <ADC_Read>:

//busy wait
u16 ADC_Read(u8 channel)
{
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	0f 92       	push	r0
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    2dc6:	89 83       	std	Y+1, r24	; 0x01

	//choose channel
	ADMUX&=0xE0;
    2dc8:	a7 e2       	ldi	r26, 0x27	; 39
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e7 e2       	ldi	r30, 0x27	; 39
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	80 7e       	andi	r24, 0xE0	; 224
    2dd4:	8c 93       	st	X, r24
	ADMUX|=channel;
    2dd6:	a7 e2       	ldi	r26, 0x27	; 39
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	e7 e2       	ldi	r30, 0x27	; 39
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	90 81       	ld	r25, Z
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	89 2b       	or	r24, r25
    2de4:	8c 93       	st	X, r24

	//start_conversion
	SET_BIT(ADCSRA,ADSC);
    2de6:	a6 e2       	ldi	r26, 0x26	; 38
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e6 e2       	ldi	r30, 0x26	; 38
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	80 64       	ori	r24, 0x40	; 64
    2df2:	8c 93       	st	X, r24
	//wait for flag to be set
	while(READ_BIT(ADCSRA,ADSC)==1);
    2df4:	e6 e2       	ldi	r30, 0x26	; 38
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	82 95       	swap	r24
    2dfc:	86 95       	lsr	r24
    2dfe:	86 95       	lsr	r24
    2e00:	83 70       	andi	r24, 0x03	; 3
    2e02:	88 2f       	mov	r24, r24
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	81 70       	andi	r24, 0x01	; 1
    2e08:	90 70       	andi	r25, 0x00	; 0
    2e0a:	88 23       	and	r24, r24
    2e0c:	99 f7       	brne	.-26     	; 0x2df4 <ADC_Read+0x38>


	return ADC_Reg;
    2e0e:	e4 e2       	ldi	r30, 0x24	; 36
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	91 81       	ldd	r25, Z+1	; 0x01

}
    2e16:	0f 90       	pop	r0
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	08 95       	ret

00002e1e <ADC_Volt_Read>:

u16 ADC_Volt_Read(u8 channel)
{
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	00 d0       	rcall	.+0      	; 0x2e24 <ADC_Volt_Read+0x6>
    2e24:	00 d0       	rcall	.+0      	; 0x2e26 <ADC_Volt_Read+0x8>
    2e26:	0f 92       	push	r0
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	8d 83       	std	Y+5, r24	; 0x05
	u16 adc,volt;

	adc=ADC_Read(channel);
    2e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e30:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <ADC_Read>
    2e34:	9c 83       	std	Y+4, r25	; 0x04
    2e36:	8b 83       	std	Y+3, r24	; 0x03
	volt=((u32)adc *VREF)/1024;
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3c:	cc 01       	movw	r24, r24
    2e3e:	a0 e0       	ldi	r26, 0x00	; 0
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	28 e8       	ldi	r18, 0x88	; 136
    2e44:	33 e1       	ldi	r19, 0x13	; 19
    2e46:	40 e0       	ldi	r20, 0x00	; 0
    2e48:	50 e0       	ldi	r21, 0x00	; 0
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	cd 01       	movw	r24, r26
    2e4e:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	07 2e       	mov	r0, r23
    2e58:	7a e0       	ldi	r23, 0x0A	; 10
    2e5a:	b6 95       	lsr	r27
    2e5c:	a7 95       	ror	r26
    2e5e:	97 95       	ror	r25
    2e60:	87 95       	ror	r24
    2e62:	7a 95       	dec	r23
    2e64:	d1 f7       	brne	.-12     	; 0x2e5a <ADC_Volt_Read+0x3c>
    2e66:	70 2d       	mov	r23, r0
    2e68:	9a 83       	std	Y+2, r25	; 0x02
    2e6a:	89 83       	std	Y+1, r24	; 0x01
   return volt;
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <ADC_StartConversion>:


//INT

void ADC_StartConversion(u8 channel)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	0f 92       	push	r0
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
    2e8a:	89 83       	std	Y+1, r24	; 0x01
	//choose channel
		ADMUX&=0xE0;
    2e8c:	a7 e2       	ldi	r26, 0x27	; 39
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	e7 e2       	ldi	r30, 0x27	; 39
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	80 7e       	andi	r24, 0xE0	; 224
    2e98:	8c 93       	st	X, r24
		ADMUX|=channel;
    2e9a:	a7 e2       	ldi	r26, 0x27	; 39
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e7 e2       	ldi	r30, 0x27	; 39
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	90 81       	ld	r25, Z
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	89 2b       	or	r24, r25
    2ea8:	8c 93       	st	X, r24

	//start_conversion
	SET_BIT(ADCSRA,ADSC);
    2eaa:	a6 e2       	ldi	r26, 0x26	; 38
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e6 e2       	ldi	r30, 0x26	; 38
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	80 64       	ori	r24, 0x40	; 64
    2eb6:	8c 93       	st	X, r24
}
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <ADC_IntEnable>:

void ADC_IntEnable(void)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    2ec8:	a6 e2       	ldi	r26, 0x26	; 38
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	e6 e2       	ldi	r30, 0x26	; 38
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	88 60       	ori	r24, 0x08	; 8
    2ed4:	8c 93       	st	X, r24
}
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <ADC_IntDisable>:

void ADC_IntDisable(void)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIE);
    2ee4:	a6 e2       	ldi	r26, 0x26	; 38
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	e6 e2       	ldi	r30, 0x26	; 38
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	87 7f       	andi	r24, 0xF7	; 247
    2ef0:	8c 93       	st	X, r24
}
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <ADC_SetCallback>:
void ADC_SetCallback(void(*local_fptr)(void))
{
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <ADC_SetCallback+0x6>
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	89 83       	std	Y+1, r24	; 0x01
  ADC_Fptr=local_fptr;
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0a:	90 93 37 02 	sts	0x0237, r25
    2f0e:	80 93 36 02 	sts	0x0236, r24
}
    2f12:	0f 90       	pop	r0
    2f14:	0f 90       	pop	r0
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	08 95       	ret

00002f1c <__vector_16>:

ISR(ADC_vect)
{
    2f1c:	1f 92       	push	r1
    2f1e:	0f 92       	push	r0
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	0f 92       	push	r0
    2f24:	11 24       	eor	r1, r1
    2f26:	2f 93       	push	r18
    2f28:	3f 93       	push	r19
    2f2a:	4f 93       	push	r20
    2f2c:	5f 93       	push	r21
    2f2e:	6f 93       	push	r22
    2f30:	7f 93       	push	r23
    2f32:	8f 93       	push	r24
    2f34:	9f 93       	push	r25
    2f36:	af 93       	push	r26
    2f38:	bf 93       	push	r27
    2f3a:	ef 93       	push	r30
    2f3c:	ff 93       	push	r31
    2f3e:	df 93       	push	r29
    2f40:	cf 93       	push	r28
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
	if(ADC_Fptr!=0)
    2f46:	80 91 36 02 	lds	r24, 0x0236
    2f4a:	90 91 37 02 	lds	r25, 0x0237
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	29 f0       	breq	.+10     	; 0x2f5c <__vector_16+0x40>
	{
		ADC_Fptr();
    2f52:	e0 91 36 02 	lds	r30, 0x0236
    2f56:	f0 91 37 02 	lds	r31, 0x0237
    2f5a:	09 95       	icall
	}
}
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	ff 91       	pop	r31
    2f62:	ef 91       	pop	r30
    2f64:	bf 91       	pop	r27
    2f66:	af 91       	pop	r26
    2f68:	9f 91       	pop	r25
    2f6a:	8f 91       	pop	r24
    2f6c:	7f 91       	pop	r23
    2f6e:	6f 91       	pop	r22
    2f70:	5f 91       	pop	r21
    2f72:	4f 91       	pop	r20
    2f74:	3f 91       	pop	r19
    2f76:	2f 91       	pop	r18
    2f78:	0f 90       	pop	r0
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	0f 90       	pop	r0
    2f7e:	1f 90       	pop	r1
    2f80:	18 95       	reti

00002f82 <DIO_InitPin>:
#include "DIO_Interface.h"
#include "DIO_Private.h"
#include "DIO_Cfg.h" 

static void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type status)
{
    2f82:	df 93       	push	r29
    2f84:	cf 93       	push	r28
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	2c 97       	sbiw	r28, 0x0c	; 12
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	f8 94       	cli
    2f90:	de bf       	out	0x3e, r29	; 62
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	cd bf       	out	0x3d, r28	; 61
    2f96:	8b 83       	std	Y+3, r24	; 0x03
    2f98:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port_type port=pin/8;
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	86 95       	lsr	r24
    2f9e:	86 95       	lsr	r24
    2fa0:	86 95       	lsr	r24
    2fa2:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num=pin%8;
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	87 70       	andi	r24, 0x07	; 7
    2fa8:	89 83       	std	Y+1, r24	; 0x01
	
	switch(status)
    2faa:	8c 81       	ldd	r24, Y+4	; 0x04
    2fac:	28 2f       	mov	r18, r24
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	3c 87       	std	Y+12, r19	; 0x0c
    2fb2:	2b 87       	std	Y+11, r18	; 0x0b
    2fb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fb8:	81 30       	cpi	r24, 0x01	; 1
    2fba:	91 05       	cpc	r25, r1
    2fbc:	09 f4       	brne	.+2      	; 0x2fc0 <DIO_InitPin+0x3e>
    2fbe:	c9 c0       	rjmp	.+402    	; 0x3152 <DIO_InitPin+0x1d0>
    2fc0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2fc2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2fc4:	22 30       	cpi	r18, 0x02	; 2
    2fc6:	31 05       	cpc	r19, r1
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <DIO_InitPin+0x4a>
    2fca:	85 c1       	rjmp	.+778    	; 0x32d6 <DIO_InitPin+0x354>
    2fcc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fce:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	09 f0       	breq	.+2      	; 0x2fd6 <DIO_InitPin+0x54>
    2fd4:	3d c2       	rjmp	.+1146   	; 0x3450 <DIO_InitPin+0x4ce>
	{
		
		case OUTPUT :
		
		switch(port)
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	28 2f       	mov	r18, r24
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	3a 87       	std	Y+10, r19	; 0x0a
    2fde:	29 87       	std	Y+9, r18	; 0x09
    2fe0:	89 85       	ldd	r24, Y+9	; 0x09
    2fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe4:	81 30       	cpi	r24, 0x01	; 1
    2fe6:	91 05       	cpc	r25, r1
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <DIO_InitPin+0x6a>
    2fea:	3e c0       	rjmp	.+124    	; 0x3068 <DIO_InitPin+0xe6>
    2fec:	29 85       	ldd	r18, Y+9	; 0x09
    2fee:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ff0:	22 30       	cpi	r18, 0x02	; 2
    2ff2:	31 05       	cpc	r19, r1
    2ff4:	2c f4       	brge	.+10     	; 0x3000 <DIO_InitPin+0x7e>
    2ff6:	89 85       	ldd	r24, Y+9	; 0x09
    2ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	71 f0       	breq	.+28     	; 0x301a <DIO_InitPin+0x98>
    2ffe:	28 c2       	rjmp	.+1104   	; 0x3450 <DIO_InitPin+0x4ce>
    3000:	29 85       	ldd	r18, Y+9	; 0x09
    3002:	3a 85       	ldd	r19, Y+10	; 0x0a
    3004:	22 30       	cpi	r18, 0x02	; 2
    3006:	31 05       	cpc	r19, r1
    3008:	09 f4       	brne	.+2      	; 0x300c <DIO_InitPin+0x8a>
    300a:	55 c0       	rjmp	.+170    	; 0x30b6 <DIO_InitPin+0x134>
    300c:	89 85       	ldd	r24, Y+9	; 0x09
    300e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3010:	83 30       	cpi	r24, 0x03	; 3
    3012:	91 05       	cpc	r25, r1
    3014:	09 f4       	brne	.+2      	; 0x3018 <DIO_InitPin+0x96>
    3016:	76 c0       	rjmp	.+236    	; 0x3104 <DIO_InitPin+0x182>
    3018:	1b c2       	rjmp	.+1078   	; 0x3450 <DIO_InitPin+0x4ce>
		{
			case PA :
			SET_BIT(DDRA,pin_num);
    301a:	aa e3       	ldi	r26, 0x3A	; 58
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	ea e3       	ldi	r30, 0x3A	; 58
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	48 2f       	mov	r20, r24
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	28 2f       	mov	r18, r24
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	02 c0       	rjmp	.+4      	; 0x3036 <DIO_InitPin+0xb4>
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	2a 95       	dec	r18
    3038:	e2 f7       	brpl	.-8      	; 0x3032 <DIO_InitPin+0xb0>
    303a:	84 2b       	or	r24, r20
    303c:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin_num);
    303e:	ab e3       	ldi	r26, 0x3B	; 59
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	eb e3       	ldi	r30, 0x3B	; 59
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	48 2f       	mov	r20, r24
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	28 2f       	mov	r18, r24
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	02 2e       	mov	r0, r18
    3056:	02 c0       	rjmp	.+4      	; 0x305c <DIO_InitPin+0xda>
    3058:	88 0f       	add	r24, r24
    305a:	99 1f       	adc	r25, r25
    305c:	0a 94       	dec	r0
    305e:	e2 f7       	brpl	.-8      	; 0x3058 <DIO_InitPin+0xd6>
    3060:	80 95       	com	r24
    3062:	84 23       	and	r24, r20
    3064:	8c 93       	st	X, r24
    3066:	f4 c1       	rjmp	.+1000   	; 0x3450 <DIO_InitPin+0x4ce>

			break;
			
			case PB :
			SET_BIT(DDRB,pin_num);
    3068:	a7 e3       	ldi	r26, 0x37	; 55
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	e7 e3       	ldi	r30, 0x37	; 55
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	48 2f       	mov	r20, r24
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	28 2f       	mov	r18, r24
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <DIO_InitPin+0x102>
    3080:	88 0f       	add	r24, r24
    3082:	99 1f       	adc	r25, r25
    3084:	2a 95       	dec	r18
    3086:	e2 f7       	brpl	.-8      	; 0x3080 <DIO_InitPin+0xfe>
    3088:	84 2b       	or	r24, r20
    308a:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
    308c:	a8 e3       	ldi	r26, 0x38	; 56
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e8 e3       	ldi	r30, 0x38	; 56
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	48 2f       	mov	r20, r24
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	28 2f       	mov	r18, r24
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	02 2e       	mov	r0, r18
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <DIO_InitPin+0x128>
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	0a 94       	dec	r0
    30ac:	e2 f7       	brpl	.-8      	; 0x30a6 <DIO_InitPin+0x124>
    30ae:	80 95       	com	r24
    30b0:	84 23       	and	r24, r20
    30b2:	8c 93       	st	X, r24
    30b4:	cd c1       	rjmp	.+922    	; 0x3450 <DIO_InitPin+0x4ce>

			break;
			
			case PC :
			SET_BIT(DDRC,pin_num);
    30b6:	a4 e3       	ldi	r26, 0x34	; 52
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	e4 e3       	ldi	r30, 0x34	; 52
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	48 2f       	mov	r20, r24
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	28 2f       	mov	r18, r24
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	02 c0       	rjmp	.+4      	; 0x30d2 <DIO_InitPin+0x150>
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	2a 95       	dec	r18
    30d4:	e2 f7       	brpl	.-8      	; 0x30ce <DIO_InitPin+0x14c>
    30d6:	84 2b       	or	r24, r20
    30d8:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
    30da:	a5 e3       	ldi	r26, 0x35	; 53
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	e5 e3       	ldi	r30, 0x35	; 53
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	48 2f       	mov	r20, r24
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	28 2f       	mov	r18, r24
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	02 2e       	mov	r0, r18
    30f2:	02 c0       	rjmp	.+4      	; 0x30f8 <DIO_InitPin+0x176>
    30f4:	88 0f       	add	r24, r24
    30f6:	99 1f       	adc	r25, r25
    30f8:	0a 94       	dec	r0
    30fa:	e2 f7       	brpl	.-8      	; 0x30f4 <DIO_InitPin+0x172>
    30fc:	80 95       	com	r24
    30fe:	84 23       	and	r24, r20
    3100:	8c 93       	st	X, r24
    3102:	a6 c1       	rjmp	.+844    	; 0x3450 <DIO_InitPin+0x4ce>

			break;
			
			case PD :
			SET_BIT(DDRD,pin_num);
    3104:	a1 e3       	ldi	r26, 0x31	; 49
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e1 e3       	ldi	r30, 0x31	; 49
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	48 2f       	mov	r20, r24
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <DIO_InitPin+0x19e>
    311c:	88 0f       	add	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	2a 95       	dec	r18
    3122:	e2 f7       	brpl	.-8      	; 0x311c <DIO_InitPin+0x19a>
    3124:	84 2b       	or	r24, r20
    3126:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
    3128:	a2 e3       	ldi	r26, 0x32	; 50
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	e2 e3       	ldi	r30, 0x32	; 50
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	48 2f       	mov	r20, r24
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	28 2f       	mov	r18, r24
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	02 2e       	mov	r0, r18
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <DIO_InitPin+0x1c4>
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	0a 94       	dec	r0
    3148:	e2 f7       	brpl	.-8      	; 0x3142 <DIO_InitPin+0x1c0>
    314a:	80 95       	com	r24
    314c:	84 23       	and	r24, r20
    314e:	8c 93       	st	X, r24
    3150:	7f c1       	rjmp	.+766    	; 0x3450 <DIO_InitPin+0x4ce>
		}
		break;
		
		case INFREE :
		
		switch(port)
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	28 2f       	mov	r18, r24
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	38 87       	std	Y+8, r19	; 0x08
    315a:	2f 83       	std	Y+7, r18	; 0x07
    315c:	8f 81       	ldd	r24, Y+7	; 0x07
    315e:	98 85       	ldd	r25, Y+8	; 0x08
    3160:	81 30       	cpi	r24, 0x01	; 1
    3162:	91 05       	cpc	r25, r1
    3164:	09 f4       	brne	.+2      	; 0x3168 <DIO_InitPin+0x1e6>
    3166:	3f c0       	rjmp	.+126    	; 0x31e6 <DIO_InitPin+0x264>
    3168:	2f 81       	ldd	r18, Y+7	; 0x07
    316a:	38 85       	ldd	r19, Y+8	; 0x08
    316c:	22 30       	cpi	r18, 0x02	; 2
    316e:	31 05       	cpc	r19, r1
    3170:	2c f4       	brge	.+10     	; 0x317c <DIO_InitPin+0x1fa>
    3172:	8f 81       	ldd	r24, Y+7	; 0x07
    3174:	98 85       	ldd	r25, Y+8	; 0x08
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	71 f0       	breq	.+28     	; 0x3196 <DIO_InitPin+0x214>
    317a:	6a c1       	rjmp	.+724    	; 0x3450 <DIO_InitPin+0x4ce>
    317c:	2f 81       	ldd	r18, Y+7	; 0x07
    317e:	38 85       	ldd	r19, Y+8	; 0x08
    3180:	22 30       	cpi	r18, 0x02	; 2
    3182:	31 05       	cpc	r19, r1
    3184:	09 f4       	brne	.+2      	; 0x3188 <DIO_InitPin+0x206>
    3186:	57 c0       	rjmp	.+174    	; 0x3236 <DIO_InitPin+0x2b4>
    3188:	8f 81       	ldd	r24, Y+7	; 0x07
    318a:	98 85       	ldd	r25, Y+8	; 0x08
    318c:	83 30       	cpi	r24, 0x03	; 3
    318e:	91 05       	cpc	r25, r1
    3190:	09 f4       	brne	.+2      	; 0x3194 <DIO_InitPin+0x212>
    3192:	79 c0       	rjmp	.+242    	; 0x3286 <DIO_InitPin+0x304>
    3194:	5d c1       	rjmp	.+698    	; 0x3450 <DIO_InitPin+0x4ce>
		{
			case PA :
			CLR_BIT(DDRA,pin_num);
    3196:	aa e3       	ldi	r26, 0x3A	; 58
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	ea e3       	ldi	r30, 0x3A	; 58
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	48 2f       	mov	r20, r24
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	28 2f       	mov	r18, r24
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	02 c0       	rjmp	.+4      	; 0x31b2 <DIO_InitPin+0x230>
    31ae:	88 0f       	add	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	2a 95       	dec	r18
    31b4:	e2 f7       	brpl	.-8      	; 0x31ae <DIO_InitPin+0x22c>
    31b6:	80 95       	com	r24
    31b8:	84 23       	and	r24, r20
    31ba:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin_num);
    31bc:	ab e3       	ldi	r26, 0x3B	; 59
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	eb e3       	ldi	r30, 0x3B	; 59
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	48 2f       	mov	r20, r24
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	28 2f       	mov	r18, r24
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	02 2e       	mov	r0, r18
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <DIO_InitPin+0x258>
    31d6:	88 0f       	add	r24, r24
    31d8:	99 1f       	adc	r25, r25
    31da:	0a 94       	dec	r0
    31dc:	e2 f7       	brpl	.-8      	; 0x31d6 <DIO_InitPin+0x254>
    31de:	80 95       	com	r24
    31e0:	84 23       	and	r24, r20
    31e2:	8c 93       	st	X, r24
    31e4:	35 c1       	rjmp	.+618    	; 0x3450 <DIO_InitPin+0x4ce>
			break;
			
			case PB :
			CLR_BIT(DDRB,pin_num);
    31e6:	a7 e3       	ldi	r26, 0x37	; 55
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	e7 e3       	ldi	r30, 0x37	; 55
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 81       	ld	r24, Z
    31f0:	48 2f       	mov	r20, r24
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	28 2f       	mov	r18, r24
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	02 c0       	rjmp	.+4      	; 0x3202 <DIO_InitPin+0x280>
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	2a 95       	dec	r18
    3204:	e2 f7       	brpl	.-8      	; 0x31fe <DIO_InitPin+0x27c>
    3206:	80 95       	com	r24
    3208:	84 23       	and	r24, r20
    320a:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
    320c:	a8 e3       	ldi	r26, 0x38	; 56
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	e8 e3       	ldi	r30, 0x38	; 56
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	48 2f       	mov	r20, r24
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	28 2f       	mov	r18, r24
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	02 2e       	mov	r0, r18
    3224:	02 c0       	rjmp	.+4      	; 0x322a <DIO_InitPin+0x2a8>
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	0a 94       	dec	r0
    322c:	e2 f7       	brpl	.-8      	; 0x3226 <DIO_InitPin+0x2a4>
    322e:	80 95       	com	r24
    3230:	84 23       	and	r24, r20
    3232:	8c 93       	st	X, r24
    3234:	0d c1       	rjmp	.+538    	; 0x3450 <DIO_InitPin+0x4ce>
			break;
			
			case PC :
			CLR_BIT(DDRC,pin_num);
    3236:	a4 e3       	ldi	r26, 0x34	; 52
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	e4 e3       	ldi	r30, 0x34	; 52
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	48 2f       	mov	r20, r24
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	02 c0       	rjmp	.+4      	; 0x3252 <DIO_InitPin+0x2d0>
    324e:	88 0f       	add	r24, r24
    3250:	99 1f       	adc	r25, r25
    3252:	2a 95       	dec	r18
    3254:	e2 f7       	brpl	.-8      	; 0x324e <DIO_InitPin+0x2cc>
    3256:	80 95       	com	r24
    3258:	84 23       	and	r24, r20
    325a:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
    325c:	a5 e3       	ldi	r26, 0x35	; 53
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	e5 e3       	ldi	r30, 0x35	; 53
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	48 2f       	mov	r20, r24
    3268:	89 81       	ldd	r24, Y+1	; 0x01
    326a:	28 2f       	mov	r18, r24
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	02 2e       	mov	r0, r18
    3274:	02 c0       	rjmp	.+4      	; 0x327a <DIO_InitPin+0x2f8>
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	0a 94       	dec	r0
    327c:	e2 f7       	brpl	.-8      	; 0x3276 <DIO_InitPin+0x2f4>
    327e:	80 95       	com	r24
    3280:	84 23       	and	r24, r20
    3282:	8c 93       	st	X, r24
    3284:	e5 c0       	rjmp	.+458    	; 0x3450 <DIO_InitPin+0x4ce>
			break;
			
			case PD :
			CLR_BIT(DDRD,pin_num);
    3286:	a1 e3       	ldi	r26, 0x31	; 49
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	e1 e3       	ldi	r30, 0x31	; 49
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	48 2f       	mov	r20, r24
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	28 2f       	mov	r18, r24
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	02 c0       	rjmp	.+4      	; 0x32a2 <DIO_InitPin+0x320>
    329e:	88 0f       	add	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	2a 95       	dec	r18
    32a4:	e2 f7       	brpl	.-8      	; 0x329e <DIO_InitPin+0x31c>
    32a6:	80 95       	com	r24
    32a8:	84 23       	and	r24, r20
    32aa:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
    32ac:	a2 e3       	ldi	r26, 0x32	; 50
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	e2 e3       	ldi	r30, 0x32	; 50
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	48 2f       	mov	r20, r24
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	28 2f       	mov	r18, r24
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	02 2e       	mov	r0, r18
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <DIO_InitPin+0x348>
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	0a 94       	dec	r0
    32cc:	e2 f7       	brpl	.-8      	; 0x32c6 <DIO_InitPin+0x344>
    32ce:	80 95       	com	r24
    32d0:	84 23       	and	r24, r20
    32d2:	8c 93       	st	X, r24
    32d4:	bd c0       	rjmp	.+378    	; 0x3450 <DIO_InitPin+0x4ce>
		}
		break;
		
		case INPULL :
		
		switch(port)
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	28 2f       	mov	r18, r24
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	3e 83       	std	Y+6, r19	; 0x06
    32de:	2d 83       	std	Y+5, r18	; 0x05
    32e0:	8d 81       	ldd	r24, Y+5	; 0x05
    32e2:	9e 81       	ldd	r25, Y+6	; 0x06
    32e4:	81 30       	cpi	r24, 0x01	; 1
    32e6:	91 05       	cpc	r25, r1
    32e8:	09 f4       	brne	.+2      	; 0x32ec <DIO_InitPin+0x36a>
    32ea:	3e c0       	rjmp	.+124    	; 0x3368 <DIO_InitPin+0x3e6>
    32ec:	2d 81       	ldd	r18, Y+5	; 0x05
    32ee:	3e 81       	ldd	r19, Y+6	; 0x06
    32f0:	22 30       	cpi	r18, 0x02	; 2
    32f2:	31 05       	cpc	r19, r1
    32f4:	2c f4       	brge	.+10     	; 0x3300 <DIO_InitPin+0x37e>
    32f6:	8d 81       	ldd	r24, Y+5	; 0x05
    32f8:	9e 81       	ldd	r25, Y+6	; 0x06
    32fa:	00 97       	sbiw	r24, 0x00	; 0
    32fc:	71 f0       	breq	.+28     	; 0x331a <DIO_InitPin+0x398>
    32fe:	a8 c0       	rjmp	.+336    	; 0x3450 <DIO_InitPin+0x4ce>
    3300:	2d 81       	ldd	r18, Y+5	; 0x05
    3302:	3e 81       	ldd	r19, Y+6	; 0x06
    3304:	22 30       	cpi	r18, 0x02	; 2
    3306:	31 05       	cpc	r19, r1
    3308:	09 f4       	brne	.+2      	; 0x330c <DIO_InitPin+0x38a>
    330a:	55 c0       	rjmp	.+170    	; 0x33b6 <DIO_InitPin+0x434>
    330c:	8d 81       	ldd	r24, Y+5	; 0x05
    330e:	9e 81       	ldd	r25, Y+6	; 0x06
    3310:	83 30       	cpi	r24, 0x03	; 3
    3312:	91 05       	cpc	r25, r1
    3314:	09 f4       	brne	.+2      	; 0x3318 <DIO_InitPin+0x396>
    3316:	76 c0       	rjmp	.+236    	; 0x3404 <DIO_InitPin+0x482>
    3318:	9b c0       	rjmp	.+310    	; 0x3450 <DIO_InitPin+0x4ce>
		{
			case PA :
			CLR_BIT(DDRA,pin_num);
    331a:	aa e3       	ldi	r26, 0x3A	; 58
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	ea e3       	ldi	r30, 0x3A	; 58
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	48 2f       	mov	r20, r24
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <DIO_InitPin+0x3b4>
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	2a 95       	dec	r18
    3338:	e2 f7       	brpl	.-8      	; 0x3332 <DIO_InitPin+0x3b0>
    333a:	80 95       	com	r24
    333c:	84 23       	and	r24, r20
    333e:	8c 93       	st	X, r24
			SET_BIT(PORTA,pin_num);
    3340:	ab e3       	ldi	r26, 0x3B	; 59
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	eb e3       	ldi	r30, 0x3B	; 59
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	48 2f       	mov	r20, r24
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	28 2f       	mov	r18, r24
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	02 2e       	mov	r0, r18
    3358:	02 c0       	rjmp	.+4      	; 0x335e <DIO_InitPin+0x3dc>
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	0a 94       	dec	r0
    3360:	e2 f7       	brpl	.-8      	; 0x335a <DIO_InitPin+0x3d8>
    3362:	84 2b       	or	r24, r20
    3364:	8c 93       	st	X, r24
    3366:	74 c0       	rjmp	.+232    	; 0x3450 <DIO_InitPin+0x4ce>
			break;
			
			case PB :
			CLR_BIT(DDRB,pin_num);
    3368:	a7 e3       	ldi	r26, 0x37	; 55
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e7 e3       	ldi	r30, 0x37	; 55
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	48 2f       	mov	r20, r24
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	28 2f       	mov	r18, r24
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <DIO_InitPin+0x402>
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	2a 95       	dec	r18
    3386:	e2 f7       	brpl	.-8      	; 0x3380 <DIO_InitPin+0x3fe>
    3388:	80 95       	com	r24
    338a:	84 23       	and	r24, r20
    338c:	8c 93       	st	X, r24
			SET_BIT(PORTB,pin_num);
    338e:	a8 e3       	ldi	r26, 0x38	; 56
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	e8 e3       	ldi	r30, 0x38	; 56
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	48 2f       	mov	r20, r24
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	02 2e       	mov	r0, r18
    33a6:	02 c0       	rjmp	.+4      	; 0x33ac <DIO_InitPin+0x42a>
    33a8:	88 0f       	add	r24, r24
    33aa:	99 1f       	adc	r25, r25
    33ac:	0a 94       	dec	r0
    33ae:	e2 f7       	brpl	.-8      	; 0x33a8 <DIO_InitPin+0x426>
    33b0:	84 2b       	or	r24, r20
    33b2:	8c 93       	st	X, r24
    33b4:	4d c0       	rjmp	.+154    	; 0x3450 <DIO_InitPin+0x4ce>
			break;
			
			case PC :
			CLR_BIT(DDRC,pin_num);
    33b6:	a4 e3       	ldi	r26, 0x34	; 52
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	e4 e3       	ldi	r30, 0x34	; 52
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	80 81       	ld	r24, Z
    33c0:	48 2f       	mov	r20, r24
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	28 2f       	mov	r18, r24
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	02 c0       	rjmp	.+4      	; 0x33d2 <DIO_InitPin+0x450>
    33ce:	88 0f       	add	r24, r24
    33d0:	99 1f       	adc	r25, r25
    33d2:	2a 95       	dec	r18
    33d4:	e2 f7       	brpl	.-8      	; 0x33ce <DIO_InitPin+0x44c>
    33d6:	80 95       	com	r24
    33d8:	84 23       	and	r24, r20
    33da:	8c 93       	st	X, r24
			SET_BIT(PORTC,pin_num);
    33dc:	a5 e3       	ldi	r26, 0x35	; 53
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	e5 e3       	ldi	r30, 0x35	; 53
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	80 81       	ld	r24, Z
    33e6:	48 2f       	mov	r20, r24
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	28 2f       	mov	r18, r24
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	02 2e       	mov	r0, r18
    33f4:	02 c0       	rjmp	.+4      	; 0x33fa <DIO_InitPin+0x478>
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	0a 94       	dec	r0
    33fc:	e2 f7       	brpl	.-8      	; 0x33f6 <DIO_InitPin+0x474>
    33fe:	84 2b       	or	r24, r20
    3400:	8c 93       	st	X, r24
    3402:	26 c0       	rjmp	.+76     	; 0x3450 <DIO_InitPin+0x4ce>
			break;
			
			case PD :
			CLR_BIT(DDRD,pin_num);
    3404:	a1 e3       	ldi	r26, 0x31	; 49
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	e1 e3       	ldi	r30, 0x31	; 49
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	80 81       	ld	r24, Z
    340e:	48 2f       	mov	r20, r24
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	28 2f       	mov	r18, r24
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <DIO_InitPin+0x49e>
    341c:	88 0f       	add	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	2a 95       	dec	r18
    3422:	e2 f7       	brpl	.-8      	; 0x341c <DIO_InitPin+0x49a>
    3424:	80 95       	com	r24
    3426:	84 23       	and	r24, r20
    3428:	8c 93       	st	X, r24
			SET_BIT(PORTD,pin_num);
    342a:	a2 e3       	ldi	r26, 0x32	; 50
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	e2 e3       	ldi	r30, 0x32	; 50
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	48 2f       	mov	r20, r24
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	28 2f       	mov	r18, r24
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	02 2e       	mov	r0, r18
    3442:	02 c0       	rjmp	.+4      	; 0x3448 <DIO_InitPin+0x4c6>
    3444:	88 0f       	add	r24, r24
    3446:	99 1f       	adc	r25, r25
    3448:	0a 94       	dec	r0
    344a:	e2 f7       	brpl	.-8      	; 0x3444 <DIO_InitPin+0x4c2>
    344c:	84 2b       	or	r24, r20
    344e:	8c 93       	st	X, r24
		
		
		
	}
	
}
    3450:	2c 96       	adiw	r28, 0x0c	; 12
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	cf 91       	pop	r28
    345e:	df 91       	pop	r29
    3460:	08 95       	ret

00003462 <DIO_Init>:
	
}
}
*/
void DIO_Init(void)
{
    3462:	df 93       	push	r29
    3464:	cf 93       	push	r28
    3466:	0f 92       	push	r0
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
	DIO_Pin_type i;
	for(i=PINA0;i<TOTAL_PINS;i++)
    346c:	19 82       	std	Y+1, r1	; 0x01
    346e:	0e c0       	rjmp	.+28     	; 0x348c <DIO_Init+0x2a>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	88 2f       	mov	r24, r24
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	fc 01       	movw	r30, r24
    3478:	e6 50       	subi	r30, 0x06	; 6
    347a:	fe 4f       	sbci	r31, 0xFE	; 254
    347c:	90 81       	ld	r25, Z
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	69 2f       	mov	r22, r25
    3482:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <DIO_InitPin>
}
*/
void DIO_Init(void)
{
	DIO_Pin_type i;
	for(i=PINA0;i<TOTAL_PINS;i++)
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	8f 5f       	subi	r24, 0xFF	; 255
    348a:	89 83       	std	Y+1, r24	; 0x01
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	80 32       	cpi	r24, 0x20	; 32
    3490:	78 f3       	brcs	.-34     	; 0x3470 <DIO_Init+0xe>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
	}
	
}
    3492:	0f 90       	pop	r0
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	08 95       	ret

0000349a <DIO_WritePin>:
void DIO_WritePin( DIO_Pin_type pin,DIO_PinVoltage_type volt)
{
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	00 d0       	rcall	.+0      	; 0x34a0 <DIO_WritePin+0x6>
    34a0:	00 d0       	rcall	.+0      	; 0x34a2 <DIO_WritePin+0x8>
    34a2:	00 d0       	rcall	.+0      	; 0x34a4 <DIO_WritePin+0xa>
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
    34a8:	8b 83       	std	Y+3, r24	; 0x03
    34aa:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port_type port=pin/8;
    34ac:	8b 81       	ldd	r24, Y+3	; 0x03
    34ae:	86 95       	lsr	r24
    34b0:	86 95       	lsr	r24
    34b2:	86 95       	lsr	r24
    34b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num=pin%8;
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	87 70       	andi	r24, 0x07	; 7
    34ba:	89 83       	std	Y+1, r24	; 0x01
	
	if(volt==HIGH||volt==LOW)
    34bc:	8c 81       	ldd	r24, Y+4	; 0x04
    34be:	81 30       	cpi	r24, 0x01	; 1
    34c0:	21 f0       	breq	.+8      	; 0x34ca <DIO_WritePin+0x30>
    34c2:	8c 81       	ldd	r24, Y+4	; 0x04
    34c4:	88 23       	and	r24, r24
    34c6:	09 f0       	breq	.+2      	; 0x34ca <DIO_WritePin+0x30>
    34c8:	a9 c0       	rjmp	.+338    	; 0x361c <DIO_WritePin+0x182>
	{
		switch(port)
    34ca:	8a 81       	ldd	r24, Y+2	; 0x02
    34cc:	28 2f       	mov	r18, r24
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	3e 83       	std	Y+6, r19	; 0x06
    34d2:	2d 83       	std	Y+5, r18	; 0x05
    34d4:	6d 81       	ldd	r22, Y+5	; 0x05
    34d6:	7e 81       	ldd	r23, Y+6	; 0x06
    34d8:	61 30       	cpi	r22, 0x01	; 1
    34da:	71 05       	cpc	r23, r1
    34dc:	d1 f1       	breq	.+116    	; 0x3552 <DIO_WritePin+0xb8>
    34de:	8d 81       	ldd	r24, Y+5	; 0x05
    34e0:	9e 81       	ldd	r25, Y+6	; 0x06
    34e2:	82 30       	cpi	r24, 0x02	; 2
    34e4:	91 05       	cpc	r25, r1
    34e6:	34 f4       	brge	.+12     	; 0x34f4 <DIO_WritePin+0x5a>
    34e8:	2d 81       	ldd	r18, Y+5	; 0x05
    34ea:	3e 81       	ldd	r19, Y+6	; 0x06
    34ec:	21 15       	cp	r18, r1
    34ee:	31 05       	cpc	r19, r1
    34f0:	71 f0       	breq	.+28     	; 0x350e <DIO_WritePin+0x74>
    34f2:	94 c0       	rjmp	.+296    	; 0x361c <DIO_WritePin+0x182>
    34f4:	6d 81       	ldd	r22, Y+5	; 0x05
    34f6:	7e 81       	ldd	r23, Y+6	; 0x06
    34f8:	62 30       	cpi	r22, 0x02	; 2
    34fa:	71 05       	cpc	r23, r1
    34fc:	09 f4       	brne	.+2      	; 0x3500 <DIO_WritePin+0x66>
    34fe:	4b c0       	rjmp	.+150    	; 0x3596 <DIO_WritePin+0xfc>
    3500:	8d 81       	ldd	r24, Y+5	; 0x05
    3502:	9e 81       	ldd	r25, Y+6	; 0x06
    3504:	83 30       	cpi	r24, 0x03	; 3
    3506:	91 05       	cpc	r25, r1
    3508:	09 f4       	brne	.+2      	; 0x350c <DIO_WritePin+0x72>
    350a:	67 c0       	rjmp	.+206    	; 0x35da <DIO_WritePin+0x140>
    350c:	87 c0       	rjmp	.+270    	; 0x361c <DIO_WritePin+0x182>
		{
			case PA :
			WRITE_BIT(PORTA,pin_num,volt);
    350e:	ab e3       	ldi	r26, 0x3B	; 59
    3510:	b0 e0       	ldi	r27, 0x00	; 0
    3512:	eb e3       	ldi	r30, 0x3B	; 59
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	80 81       	ld	r24, Z
    3518:	48 2f       	mov	r20, r24
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	28 2f       	mov	r18, r24
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	02 c0       	rjmp	.+4      	; 0x352a <DIO_WritePin+0x90>
    3526:	88 0f       	add	r24, r24
    3528:	99 1f       	adc	r25, r25
    352a:	2a 95       	dec	r18
    352c:	e2 f7       	brpl	.-8      	; 0x3526 <DIO_WritePin+0x8c>
    352e:	80 95       	com	r24
    3530:	48 23       	and	r20, r24
    3532:	8c 81       	ldd	r24, Y+4	; 0x04
    3534:	28 2f       	mov	r18, r24
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	88 2f       	mov	r24, r24
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	b9 01       	movw	r22, r18
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <DIO_WritePin+0xac>
    3542:	66 0f       	add	r22, r22
    3544:	77 1f       	adc	r23, r23
    3546:	8a 95       	dec	r24
    3548:	e2 f7       	brpl	.-8      	; 0x3542 <DIO_WritePin+0xa8>
    354a:	cb 01       	movw	r24, r22
    354c:	84 2b       	or	r24, r20
    354e:	8c 93       	st	X, r24
    3550:	65 c0       	rjmp	.+202    	; 0x361c <DIO_WritePin+0x182>
			break;
			
			case PB :
			WRITE_BIT(PORTB,pin_num,volt);
    3552:	a8 e3       	ldi	r26, 0x38	; 56
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	e8 e3       	ldi	r30, 0x38	; 56
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	80 81       	ld	r24, Z
    355c:	48 2f       	mov	r20, r24
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	28 2f       	mov	r18, r24
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	02 c0       	rjmp	.+4      	; 0x356e <DIO_WritePin+0xd4>
    356a:	88 0f       	add	r24, r24
    356c:	99 1f       	adc	r25, r25
    356e:	2a 95       	dec	r18
    3570:	e2 f7       	brpl	.-8      	; 0x356a <DIO_WritePin+0xd0>
    3572:	80 95       	com	r24
    3574:	48 23       	and	r20, r24
    3576:	8c 81       	ldd	r24, Y+4	; 0x04
    3578:	28 2f       	mov	r18, r24
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	88 2f       	mov	r24, r24
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	b9 01       	movw	r22, r18
    3584:	02 c0       	rjmp	.+4      	; 0x358a <DIO_WritePin+0xf0>
    3586:	66 0f       	add	r22, r22
    3588:	77 1f       	adc	r23, r23
    358a:	8a 95       	dec	r24
    358c:	e2 f7       	brpl	.-8      	; 0x3586 <DIO_WritePin+0xec>
    358e:	cb 01       	movw	r24, r22
    3590:	84 2b       	or	r24, r20
    3592:	8c 93       	st	X, r24
    3594:	43 c0       	rjmp	.+134    	; 0x361c <DIO_WritePin+0x182>
			break;
			
			case PC :
			WRITE_BIT(PORTC,pin_num,volt);
    3596:	a5 e3       	ldi	r26, 0x35	; 53
    3598:	b0 e0       	ldi	r27, 0x00	; 0
    359a:	e5 e3       	ldi	r30, 0x35	; 53
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
    35a0:	48 2f       	mov	r20, r24
    35a2:	89 81       	ldd	r24, Y+1	; 0x01
    35a4:	28 2f       	mov	r18, r24
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	02 c0       	rjmp	.+4      	; 0x35b2 <DIO_WritePin+0x118>
    35ae:	88 0f       	add	r24, r24
    35b0:	99 1f       	adc	r25, r25
    35b2:	2a 95       	dec	r18
    35b4:	e2 f7       	brpl	.-8      	; 0x35ae <DIO_WritePin+0x114>
    35b6:	80 95       	com	r24
    35b8:	48 23       	and	r20, r24
    35ba:	8c 81       	ldd	r24, Y+4	; 0x04
    35bc:	28 2f       	mov	r18, r24
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	88 2f       	mov	r24, r24
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	b9 01       	movw	r22, r18
    35c8:	02 c0       	rjmp	.+4      	; 0x35ce <DIO_WritePin+0x134>
    35ca:	66 0f       	add	r22, r22
    35cc:	77 1f       	adc	r23, r23
    35ce:	8a 95       	dec	r24
    35d0:	e2 f7       	brpl	.-8      	; 0x35ca <DIO_WritePin+0x130>
    35d2:	cb 01       	movw	r24, r22
    35d4:	84 2b       	or	r24, r20
    35d6:	8c 93       	st	X, r24
    35d8:	21 c0       	rjmp	.+66     	; 0x361c <DIO_WritePin+0x182>
			break;
			
			case PD :
			WRITE_BIT(PORTD,pin_num,volt);
    35da:	a2 e3       	ldi	r26, 0x32	; 50
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	e2 e3       	ldi	r30, 0x32	; 50
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 81       	ld	r24, Z
    35e4:	48 2f       	mov	r20, r24
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	28 2f       	mov	r18, r24
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	02 c0       	rjmp	.+4      	; 0x35f6 <DIO_WritePin+0x15c>
    35f2:	88 0f       	add	r24, r24
    35f4:	99 1f       	adc	r25, r25
    35f6:	2a 95       	dec	r18
    35f8:	e2 f7       	brpl	.-8      	; 0x35f2 <DIO_WritePin+0x158>
    35fa:	80 95       	com	r24
    35fc:	48 23       	and	r20, r24
    35fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3600:	28 2f       	mov	r18, r24
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	88 2f       	mov	r24, r24
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	b9 01       	movw	r22, r18
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <DIO_WritePin+0x178>
    360e:	66 0f       	add	r22, r22
    3610:	77 1f       	adc	r23, r23
    3612:	8a 95       	dec	r24
    3614:	e2 f7       	brpl	.-8      	; 0x360e <DIO_WritePin+0x174>
    3616:	cb 01       	movw	r24, r22
    3618:	84 2b       	or	r24, r20
    361a:	8c 93       	st	X, r24
	
	
	
	
	
}
    361c:	26 96       	adiw	r28, 0x06	; 6
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	f8 94       	cli
    3622:	de bf       	out	0x3e, r29	; 62
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	cd bf       	out	0x3d, r28	; 61
    3628:	cf 91       	pop	r28
    362a:	df 91       	pop	r29
    362c:	08 95       	ret

0000362e <DIO_ReadPin>:
	}
	
}
*/
DIO_PinVoltage_type DIO_ReadPin( DIO_Pin_type pin)
{
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	00 d0       	rcall	.+0      	; 0x3634 <DIO_ReadPin+0x6>
    3634:	00 d0       	rcall	.+0      	; 0x3636 <DIO_ReadPin+0x8>
    3636:	00 d0       	rcall	.+0      	; 0x3638 <DIO_ReadPin+0xa>
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	8c 83       	std	Y+4, r24	; 0x04
	DIO_Port_type port=pin/8;
    363e:	8c 81       	ldd	r24, Y+4	; 0x04
    3640:	86 95       	lsr	r24
    3642:	86 95       	lsr	r24
    3644:	86 95       	lsr	r24
    3646:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin_num=pin%8;
    3648:	8c 81       	ldd	r24, Y+4	; 0x04
    364a:	87 70       	andi	r24, 0x07	; 7
    364c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinVoltage_type volt=LOW;
    364e:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    3650:	8b 81       	ldd	r24, Y+3	; 0x03
    3652:	28 2f       	mov	r18, r24
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	3e 83       	std	Y+6, r19	; 0x06
    3658:	2d 83       	std	Y+5, r18	; 0x05
    365a:	4d 81       	ldd	r20, Y+5	; 0x05
    365c:	5e 81       	ldd	r21, Y+6	; 0x06
    365e:	41 30       	cpi	r20, 0x01	; 1
    3660:	51 05       	cpc	r21, r1
    3662:	41 f1       	breq	.+80     	; 0x36b4 <DIO_ReadPin+0x86>
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	82 30       	cpi	r24, 0x02	; 2
    366a:	91 05       	cpc	r25, r1
    366c:	34 f4       	brge	.+12     	; 0x367a <DIO_ReadPin+0x4c>
    366e:	2d 81       	ldd	r18, Y+5	; 0x05
    3670:	3e 81       	ldd	r19, Y+6	; 0x06
    3672:	21 15       	cp	r18, r1
    3674:	31 05       	cpc	r19, r1
    3676:	61 f0       	breq	.+24     	; 0x3690 <DIO_ReadPin+0x62>
    3678:	52 c0       	rjmp	.+164    	; 0x371e <DIO_ReadPin+0xf0>
    367a:	4d 81       	ldd	r20, Y+5	; 0x05
    367c:	5e 81       	ldd	r21, Y+6	; 0x06
    367e:	42 30       	cpi	r20, 0x02	; 2
    3680:	51 05       	cpc	r21, r1
    3682:	51 f1       	breq	.+84     	; 0x36d8 <DIO_ReadPin+0xaa>
    3684:	8d 81       	ldd	r24, Y+5	; 0x05
    3686:	9e 81       	ldd	r25, Y+6	; 0x06
    3688:	83 30       	cpi	r24, 0x03	; 3
    368a:	91 05       	cpc	r25, r1
    368c:	b9 f1       	breq	.+110    	; 0x36fc <DIO_ReadPin+0xce>
    368e:	47 c0       	rjmp	.+142    	; 0x371e <DIO_ReadPin+0xf0>
	{
		case PA :
		volt=READ_BIT(PINA,pin_num);
    3690:	e9 e3       	ldi	r30, 0x39	; 57
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	80 81       	ld	r24, Z
    3696:	28 2f       	mov	r18, r24
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	88 2f       	mov	r24, r24
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	a9 01       	movw	r20, r18
    36a2:	02 c0       	rjmp	.+4      	; 0x36a8 <DIO_ReadPin+0x7a>
    36a4:	55 95       	asr	r21
    36a6:	47 95       	ror	r20
    36a8:	8a 95       	dec	r24
    36aa:	e2 f7       	brpl	.-8      	; 0x36a4 <DIO_ReadPin+0x76>
    36ac:	ca 01       	movw	r24, r20
    36ae:	81 70       	andi	r24, 0x01	; 1
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	35 c0       	rjmp	.+106    	; 0x371e <DIO_ReadPin+0xf0>
		break;
		
		case PB :
		volt=READ_BIT(PINB,pin_num);
    36b4:	e6 e3       	ldi	r30, 0x36	; 54
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	8a 81       	ldd	r24, Y+2	; 0x02
    36c0:	88 2f       	mov	r24, r24
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	a9 01       	movw	r20, r18
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <DIO_ReadPin+0x9e>
    36c8:	55 95       	asr	r21
    36ca:	47 95       	ror	r20
    36cc:	8a 95       	dec	r24
    36ce:	e2 f7       	brpl	.-8      	; 0x36c8 <DIO_ReadPin+0x9a>
    36d0:	ca 01       	movw	r24, r20
    36d2:	81 70       	andi	r24, 0x01	; 1
    36d4:	89 83       	std	Y+1, r24	; 0x01
    36d6:	23 c0       	rjmp	.+70     	; 0x371e <DIO_ReadPin+0xf0>
		break;
		
		case PC :
		volt=READ_BIT(PINC,pin_num);
    36d8:	e3 e3       	ldi	r30, 0x33	; 51
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	28 2f       	mov	r18, r24
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	8a 81       	ldd	r24, Y+2	; 0x02
    36e4:	88 2f       	mov	r24, r24
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	a9 01       	movw	r20, r18
    36ea:	02 c0       	rjmp	.+4      	; 0x36f0 <DIO_ReadPin+0xc2>
    36ec:	55 95       	asr	r21
    36ee:	47 95       	ror	r20
    36f0:	8a 95       	dec	r24
    36f2:	e2 f7       	brpl	.-8      	; 0x36ec <DIO_ReadPin+0xbe>
    36f4:	ca 01       	movw	r24, r20
    36f6:	81 70       	andi	r24, 0x01	; 1
    36f8:	89 83       	std	Y+1, r24	; 0x01
    36fa:	11 c0       	rjmp	.+34     	; 0x371e <DIO_ReadPin+0xf0>
		break;
		
		case PD :
		volt=READ_BIT(PIND,pin_num);
    36fc:	e0 e3       	ldi	r30, 0x30	; 48
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	28 2f       	mov	r18, r24
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	8a 81       	ldd	r24, Y+2	; 0x02
    3708:	88 2f       	mov	r24, r24
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	a9 01       	movw	r20, r18
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <DIO_ReadPin+0xe6>
    3710:	55 95       	asr	r21
    3712:	47 95       	ror	r20
    3714:	8a 95       	dec	r24
    3716:	e2 f7       	brpl	.-8      	; 0x3710 <DIO_ReadPin+0xe2>
    3718:	ca 01       	movw	r24, r20
    371a:	81 70       	andi	r24, 0x01	; 1
    371c:	89 83       	std	Y+1, r24	; 0x01
		break;
		
	}
	
	return volt;
    371e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    3720:	26 96       	adiw	r28, 0x06	; 6
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	cd bf       	out	0x3d, r28	; 61
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	08 95       	ret

00003732 <DIO_TogglePin>:

void DIO_TogglePin( DIO_Pin_type pin)
{
    3732:	df 93       	push	r29
    3734:	cf 93       	push	r28
    3736:	00 d0       	rcall	.+0      	; 0x3738 <DIO_TogglePin+0x6>
    3738:	00 d0       	rcall	.+0      	; 0x373a <DIO_TogglePin+0x8>
    373a:	0f 92       	push	r0
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
    3740:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port=pin/8;
    3742:	8b 81       	ldd	r24, Y+3	; 0x03
    3744:	86 95       	lsr	r24
    3746:	86 95       	lsr	r24
    3748:	86 95       	lsr	r24
    374a:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num=pin%8;
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	87 70       	andi	r24, 0x07	; 7
    3750:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	28 2f       	mov	r18, r24
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	3d 83       	std	Y+5, r19	; 0x05
    375a:	2c 83       	std	Y+4, r18	; 0x04
    375c:	8c 81       	ldd	r24, Y+4	; 0x04
    375e:	9d 81       	ldd	r25, Y+5	; 0x05
    3760:	81 30       	cpi	r24, 0x01	; 1
    3762:	91 05       	cpc	r25, r1
    3764:	49 f1       	breq	.+82     	; 0x37b8 <DIO_TogglePin+0x86>
    3766:	2c 81       	ldd	r18, Y+4	; 0x04
    3768:	3d 81       	ldd	r19, Y+5	; 0x05
    376a:	22 30       	cpi	r18, 0x02	; 2
    376c:	31 05       	cpc	r19, r1
    376e:	2c f4       	brge	.+10     	; 0x377a <DIO_TogglePin+0x48>
    3770:	8c 81       	ldd	r24, Y+4	; 0x04
    3772:	9d 81       	ldd	r25, Y+5	; 0x05
    3774:	00 97       	sbiw	r24, 0x00	; 0
    3776:	61 f0       	breq	.+24     	; 0x3790 <DIO_TogglePin+0x5e>
    3778:	5a c0       	rjmp	.+180    	; 0x382e <DIO_TogglePin+0xfc>
    377a:	2c 81       	ldd	r18, Y+4	; 0x04
    377c:	3d 81       	ldd	r19, Y+5	; 0x05
    377e:	22 30       	cpi	r18, 0x02	; 2
    3780:	31 05       	cpc	r19, r1
    3782:	71 f1       	breq	.+92     	; 0x37e0 <DIO_TogglePin+0xae>
    3784:	8c 81       	ldd	r24, Y+4	; 0x04
    3786:	9d 81       	ldd	r25, Y+5	; 0x05
    3788:	83 30       	cpi	r24, 0x03	; 3
    378a:	91 05       	cpc	r25, r1
    378c:	e9 f1       	breq	.+122    	; 0x3808 <DIO_TogglePin+0xd6>
    378e:	4f c0       	rjmp	.+158    	; 0x382e <DIO_TogglePin+0xfc>
	{
		case PA :
		TOG_BIT(PORTA,pin_num);
    3790:	ab e3       	ldi	r26, 0x3B	; 59
    3792:	b0 e0       	ldi	r27, 0x00	; 0
    3794:	eb e3       	ldi	r30, 0x3B	; 59
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	80 81       	ld	r24, Z
    379a:	48 2f       	mov	r20, r24
    379c:	89 81       	ldd	r24, Y+1	; 0x01
    379e:	28 2f       	mov	r18, r24
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	02 2e       	mov	r0, r18
    37a8:	02 c0       	rjmp	.+4      	; 0x37ae <DIO_TogglePin+0x7c>
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	0a 94       	dec	r0
    37b0:	e2 f7       	brpl	.-8      	; 0x37aa <DIO_TogglePin+0x78>
    37b2:	84 27       	eor	r24, r20
    37b4:	8c 93       	st	X, r24
    37b6:	3b c0       	rjmp	.+118    	; 0x382e <DIO_TogglePin+0xfc>
		break;
		
		case PB :
		TOG_BIT(PORTB,pin_num);
    37b8:	a8 e3       	ldi	r26, 0x38	; 56
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	e8 e3       	ldi	r30, 0x38	; 56
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	80 81       	ld	r24, Z
    37c2:	48 2f       	mov	r20, r24
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	28 2f       	mov	r18, r24
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	02 2e       	mov	r0, r18
    37d0:	02 c0       	rjmp	.+4      	; 0x37d6 <DIO_TogglePin+0xa4>
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	0a 94       	dec	r0
    37d8:	e2 f7       	brpl	.-8      	; 0x37d2 <DIO_TogglePin+0xa0>
    37da:	84 27       	eor	r24, r20
    37dc:	8c 93       	st	X, r24
    37de:	27 c0       	rjmp	.+78     	; 0x382e <DIO_TogglePin+0xfc>
		break;
		
		case PC :
		TOG_BIT(PORTC,pin_num);
    37e0:	a5 e3       	ldi	r26, 0x35	; 53
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	e5 e3       	ldi	r30, 0x35	; 53
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	48 2f       	mov	r20, r24
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	28 2f       	mov	r18, r24
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	02 2e       	mov	r0, r18
    37f8:	02 c0       	rjmp	.+4      	; 0x37fe <DIO_TogglePin+0xcc>
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	0a 94       	dec	r0
    3800:	e2 f7       	brpl	.-8      	; 0x37fa <DIO_TogglePin+0xc8>
    3802:	84 27       	eor	r24, r20
    3804:	8c 93       	st	X, r24
    3806:	13 c0       	rjmp	.+38     	; 0x382e <DIO_TogglePin+0xfc>
		break;
		
		case PD :
		TOG_BIT(PORTD,pin_num);
    3808:	a2 e3       	ldi	r26, 0x32	; 50
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	e2 e3       	ldi	r30, 0x32	; 50
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	80 81       	ld	r24, Z
    3812:	48 2f       	mov	r20, r24
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	28 2f       	mov	r18, r24
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	02 2e       	mov	r0, r18
    3820:	02 c0       	rjmp	.+4      	; 0x3826 <DIO_TogglePin+0xf4>
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	0a 94       	dec	r0
    3828:	e2 f7       	brpl	.-8      	; 0x3822 <DIO_TogglePin+0xf0>
    382a:	84 27       	eor	r24, r20
    382c:	8c 93       	st	X, r24
		break;
		
	}
	
}
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <DIO_WritePort>:
void DIO_WritePort( DIO_Port_type port,u8 data)
{
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	00 d0       	rcall	.+0      	; 0x3844 <DIO_WritePort+0x6>
    3844:	00 d0       	rcall	.+0      	; 0x3846 <DIO_WritePort+0x8>
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	89 83       	std	Y+1, r24	; 0x01
    384c:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    384e:	89 81       	ldd	r24, Y+1	; 0x01
    3850:	28 2f       	mov	r18, r24
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	3c 83       	std	Y+4, r19	; 0x04
    3856:	2b 83       	std	Y+3, r18	; 0x03
    3858:	8b 81       	ldd	r24, Y+3	; 0x03
    385a:	9c 81       	ldd	r25, Y+4	; 0x04
    385c:	81 30       	cpi	r24, 0x01	; 1
    385e:	91 05       	cpc	r25, r1
    3860:	d1 f0       	breq	.+52     	; 0x3896 <DIO_WritePort+0x58>
    3862:	2b 81       	ldd	r18, Y+3	; 0x03
    3864:	3c 81       	ldd	r19, Y+4	; 0x04
    3866:	22 30       	cpi	r18, 0x02	; 2
    3868:	31 05       	cpc	r19, r1
    386a:	2c f4       	brge	.+10     	; 0x3876 <DIO_WritePort+0x38>
    386c:	8b 81       	ldd	r24, Y+3	; 0x03
    386e:	9c 81       	ldd	r25, Y+4	; 0x04
    3870:	00 97       	sbiw	r24, 0x00	; 0
    3872:	61 f0       	breq	.+24     	; 0x388c <DIO_WritePort+0x4e>
    3874:	1e c0       	rjmp	.+60     	; 0x38b2 <DIO_WritePort+0x74>
    3876:	2b 81       	ldd	r18, Y+3	; 0x03
    3878:	3c 81       	ldd	r19, Y+4	; 0x04
    387a:	22 30       	cpi	r18, 0x02	; 2
    387c:	31 05       	cpc	r19, r1
    387e:	81 f0       	breq	.+32     	; 0x38a0 <DIO_WritePort+0x62>
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	9c 81       	ldd	r25, Y+4	; 0x04
    3884:	83 30       	cpi	r24, 0x03	; 3
    3886:	91 05       	cpc	r25, r1
    3888:	81 f0       	breq	.+32     	; 0x38aa <DIO_WritePort+0x6c>
    388a:	13 c0       	rjmp	.+38     	; 0x38b2 <DIO_WritePort+0x74>
	{
		case PA :
		PORTA=data;
    388c:	eb e3       	ldi	r30, 0x3B	; 59
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	8a 81       	ldd	r24, Y+2	; 0x02
    3892:	80 83       	st	Z, r24
    3894:	0e c0       	rjmp	.+28     	; 0x38b2 <DIO_WritePort+0x74>
		break;
		
		case PB :
		PORTB=data;
    3896:	e8 e3       	ldi	r30, 0x38	; 56
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	8a 81       	ldd	r24, Y+2	; 0x02
    389c:	80 83       	st	Z, r24
    389e:	09 c0       	rjmp	.+18     	; 0x38b2 <DIO_WritePort+0x74>

		break;
		
		case PC :
		PORTC=data;
    38a0:	e5 e3       	ldi	r30, 0x35	; 53
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	8a 81       	ldd	r24, Y+2	; 0x02
    38a6:	80 83       	st	Z, r24
    38a8:	04 c0       	rjmp	.+8      	; 0x38b2 <DIO_WritePort+0x74>

		break;
		
		case PD :
		PORTD=data;
    38aa:	e2 e3       	ldi	r30, 0x32	; 50
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	8a 81       	ldd	r24, Y+2	; 0x02
    38b0:	80 83       	st	Z, r24

		break;
		
	}
	
}
    38b2:	0f 90       	pop	r0
    38b4:	0f 90       	pop	r0
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	cf 91       	pop	r28
    38bc:	df 91       	pop	r29
    38be:	08 95       	ret

000038c0 <DIO_ReadePort>:
u8 DIO_ReadePort( DIO_Port_type port)
{
    38c0:	df 93       	push	r29
    38c2:	cf 93       	push	r28
    38c4:	00 d0       	rcall	.+0      	; 0x38c6 <DIO_ReadePort+0x6>
    38c6:	00 d0       	rcall	.+0      	; 0x38c8 <DIO_ReadePort+0x8>
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
    38cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 data=0;
    38ce:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    38d0:	8a 81       	ldd	r24, Y+2	; 0x02
    38d2:	28 2f       	mov	r18, r24
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	3c 83       	std	Y+4, r19	; 0x04
    38d8:	2b 83       	std	Y+3, r18	; 0x03
    38da:	8b 81       	ldd	r24, Y+3	; 0x03
    38dc:	9c 81       	ldd	r25, Y+4	; 0x04
    38de:	81 30       	cpi	r24, 0x01	; 1
    38e0:	91 05       	cpc	r25, r1
    38e2:	d1 f0       	breq	.+52     	; 0x3918 <DIO_ReadePort+0x58>
    38e4:	2b 81       	ldd	r18, Y+3	; 0x03
    38e6:	3c 81       	ldd	r19, Y+4	; 0x04
    38e8:	22 30       	cpi	r18, 0x02	; 2
    38ea:	31 05       	cpc	r19, r1
    38ec:	2c f4       	brge	.+10     	; 0x38f8 <DIO_ReadePort+0x38>
    38ee:	8b 81       	ldd	r24, Y+3	; 0x03
    38f0:	9c 81       	ldd	r25, Y+4	; 0x04
    38f2:	00 97       	sbiw	r24, 0x00	; 0
    38f4:	61 f0       	breq	.+24     	; 0x390e <DIO_ReadePort+0x4e>
    38f6:	1e c0       	rjmp	.+60     	; 0x3934 <DIO_ReadePort+0x74>
    38f8:	2b 81       	ldd	r18, Y+3	; 0x03
    38fa:	3c 81       	ldd	r19, Y+4	; 0x04
    38fc:	22 30       	cpi	r18, 0x02	; 2
    38fe:	31 05       	cpc	r19, r1
    3900:	81 f0       	breq	.+32     	; 0x3922 <DIO_ReadePort+0x62>
    3902:	8b 81       	ldd	r24, Y+3	; 0x03
    3904:	9c 81       	ldd	r25, Y+4	; 0x04
    3906:	83 30       	cpi	r24, 0x03	; 3
    3908:	91 05       	cpc	r25, r1
    390a:	81 f0       	breq	.+32     	; 0x392c <DIO_ReadePort+0x6c>
    390c:	13 c0       	rjmp	.+38     	; 0x3934 <DIO_ReadePort+0x74>
	{
		case PA :
		data=PINA;
    390e:	e9 e3       	ldi	r30, 0x39	; 57
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
    3914:	89 83       	std	Y+1, r24	; 0x01
    3916:	0e c0       	rjmp	.+28     	; 0x3934 <DIO_ReadePort+0x74>
		break;
		
		case PB :
        data=PINB;
    3918:	e6 e3       	ldi	r30, 0x36	; 54
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	80 81       	ld	r24, Z
    391e:	89 83       	std	Y+1, r24	; 0x01
    3920:	09 c0       	rjmp	.+18     	; 0x3934 <DIO_ReadePort+0x74>
		break;
		
		case PC :
		data=PINC;
    3922:	e3 e3       	ldi	r30, 0x33	; 51
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	80 81       	ld	r24, Z
    3928:	89 83       	std	Y+1, r24	; 0x01
    392a:	04 c0       	rjmp	.+8      	; 0x3934 <DIO_ReadePort+0x74>

		break;
		
		case PD :
		data=PIND;
    392c:	e0 e3       	ldi	r30, 0x30	; 48
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	80 81       	ld	r24, Z
    3932:	89 83       	std	Y+1, r24	; 0x01

		break;
		
	}
	return data;
    3934:	89 81       	ldd	r24, Y+1	; 0x01
	
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	cf 91       	pop	r28
    3940:	df 91       	pop	r29
    3942:	08 95       	ret

00003944 <EEPROM_ReadChar>:
	return EEMPROM_R_OK;
}
*/

void EEPROM_ReadChar(u8 loc,u8 *data)
{
    3944:	df 93       	push	r29
    3946:	cf 93       	push	r28
    3948:	00 d0       	rcall	.+0      	; 0x394a <EEPROM_ReadChar+0x6>
    394a:	0f 92       	push	r0
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
    3950:	89 83       	std	Y+1, r24	; 0x01
    3952:	7b 83       	std	Y+3, r23	; 0x03
    3954:	6a 83       	std	Y+2, r22	; 0x02
	//Start Coondition
	I2C_Master_enuSendStartCond();
    3956:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <I2C_Master_enuSendStartCond>

    //Send SLA With Write
	I2C_Master_enuSendSlaveAddressWithWrite(SLAVE_ADD);
    395a:	80 ea       	ldi	r24, 0xA0	; 160
    395c:	0e 94 3b 24 	call	0x4876	; 0x4876 <I2C_Master_enuSendSlaveAddressWithWrite>

	//Send Mem Location
	I2C_Master_enuSendu8Data(loc);
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	0e 94 b2 24 	call	0x4964	; 0x4964 <I2C_Master_enuSendu8Data>

	//Send Repeated Start
	I2C_Master_enuSendRepeatedStartCond();
    3966:	0e 94 1a 24 	call	0x4834	; 0x4834 <I2C_Master_enuSendRepeatedStartCond>

	//Send SLA With READ
	I2C_Master_enuSendSlaveAddressWithRead(SLAVE_ADD);
    396a:	80 ea       	ldi	r24, 0xA0	; 160
    396c:	0e 94 62 24 	call	0x48c4	; 0x48c4 <I2C_Master_enuSendSlaveAddressWithRead>

	//Read data from EEPROM
	I2C_Master_enuReadu8Data(data);
    3970:	8a 81       	ldd	r24, Y+2	; 0x02
    3972:	9b 81       	ldd	r25, Y+3	; 0x03
    3974:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <I2C_Master_enuReadu8Data>

	//Send Stop Cond
	I2C_Master_enuSendStopCond();
    3978:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <I2C_Master_enuSendStopCond>



}
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0
    3982:	cf 91       	pop	r28
    3984:	df 91       	pop	r29
    3986:	08 95       	ret

00003988 <EEPROM_WriteChar>:

void EEPROM_WriteChar(u8 loc,u8 data)
{
    3988:	df 93       	push	r29
    398a:	cf 93       	push	r28
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
    3990:	60 97       	sbiw	r28, 0x10	; 16
    3992:	0f b6       	in	r0, 0x3f	; 63
    3994:	f8 94       	cli
    3996:	de bf       	out	0x3e, r29	; 62
    3998:	0f be       	out	0x3f, r0	; 63
    399a:	cd bf       	out	0x3d, r28	; 61
    399c:	8f 87       	std	Y+15, r24	; 0x0f
    399e:	68 8b       	std	Y+16, r22	; 0x10
//Start Coondition
	I2C_Master_enuSendStartCond();
    39a0:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <I2C_Master_enuSendStartCond>
    //Send SLA With Write
	I2C_Master_enuSendSlaveAddressWithWrite(SLAVE_ADD);
    39a4:	80 ea       	ldi	r24, 0xA0	; 160
    39a6:	0e 94 3b 24 	call	0x4876	; 0x4876 <I2C_Master_enuSendSlaveAddressWithWrite>
	//Send Mem Location
	I2C_Master_enuSendu8Data(loc);
    39aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ac:	0e 94 b2 24 	call	0x4964	; 0x4964 <I2C_Master_enuSendu8Data>
	//Send data
	I2C_Master_enuSendu8Data(data);
    39b0:	88 89       	ldd	r24, Y+16	; 0x10
    39b2:	0e 94 b2 24 	call	0x4964	; 0x4964 <I2C_Master_enuSendu8Data>
	//Stop Cond
	I2C_Master_enuSendStopCond();
    39b6:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <I2C_Master_enuSendStopCond>
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	a0 e2       	ldi	r26, 0x20	; 32
    39c0:	b1 e4       	ldi	r27, 0x41	; 65
    39c2:	8b 87       	std	Y+11, r24	; 0x0b
    39c4:	9c 87       	std	Y+12, r25	; 0x0c
    39c6:	ad 87       	std	Y+13, r26	; 0x0d
    39c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    39cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    39d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	4a ef       	ldi	r20, 0xFA	; 250
    39d8:	54 e4       	ldi	r21, 0x44	; 68
    39da:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	8f 83       	std	Y+7, r24	; 0x07
    39e4:	98 87       	std	Y+8, r25	; 0x08
    39e6:	a9 87       	std	Y+9, r26	; 0x09
    39e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ea:	6f 81       	ldd	r22, Y+7	; 0x07
    39ec:	78 85       	ldd	r23, Y+8	; 0x08
    39ee:	89 85       	ldd	r24, Y+9	; 0x09
    39f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	40 e8       	ldi	r20, 0x80	; 128
    39f8:	5f e3       	ldi	r21, 0x3F	; 63
    39fa:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    39fe:	88 23       	and	r24, r24
    3a00:	2c f4       	brge	.+10     	; 0x3a0c <EEPROM_WriteChar+0x84>
		__ticks = 1;
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	9e 83       	std	Y+6, r25	; 0x06
    3a08:	8d 83       	std	Y+5, r24	; 0x05
    3a0a:	3f c0       	rjmp	.+126    	; 0x3a8a <EEPROM_WriteChar+0x102>
	else if (__tmp > 65535)
    3a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a0e:	78 85       	ldd	r23, Y+8	; 0x08
    3a10:	89 85       	ldd	r24, Y+9	; 0x09
    3a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	3f ef       	ldi	r19, 0xFF	; 255
    3a18:	4f e7       	ldi	r20, 0x7F	; 127
    3a1a:	57 e4       	ldi	r21, 0x47	; 71
    3a1c:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    3a20:	18 16       	cp	r1, r24
    3a22:	4c f5       	brge	.+82     	; 0x3a76 <EEPROM_WriteChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e2       	ldi	r20, 0x20	; 32
    3a32:	51 e4       	ldi	r21, 0x41	; 65
    3a34:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	bc 01       	movw	r22, r24
    3a3e:	cd 01       	movw	r24, r26
    3a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	9e 83       	std	Y+6, r25	; 0x06
    3a4a:	8d 83       	std	Y+5, r24	; 0x05
    3a4c:	0f c0       	rjmp	.+30     	; 0x3a6c <EEPROM_WriteChar+0xe4>
    3a4e:	88 ec       	ldi	r24, 0xC8	; 200
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	9c 83       	std	Y+4, r25	; 0x04
    3a54:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a56:	8b 81       	ldd	r24, Y+3	; 0x03
    3a58:	9c 81       	ldd	r25, Y+4	; 0x04
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	f1 f7       	brne	.-4      	; 0x3a5a <EEPROM_WriteChar+0xd2>
    3a5e:	9c 83       	std	Y+4, r25	; 0x04
    3a60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a62:	8d 81       	ldd	r24, Y+5	; 0x05
    3a64:	9e 81       	ldd	r25, Y+6	; 0x06
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	9e 83       	std	Y+6, r25	; 0x06
    3a6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a70:	00 97       	sbiw	r24, 0x00	; 0
    3a72:	69 f7       	brne	.-38     	; 0x3a4e <EEPROM_WriteChar+0xc6>
    3a74:	14 c0       	rjmp	.+40     	; 0x3a9e <EEPROM_WriteChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a76:	6f 81       	ldd	r22, Y+7	; 0x07
    3a78:	78 85       	ldd	r23, Y+8	; 0x08
    3a7a:	89 85       	ldd	r24, Y+9	; 0x09
    3a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	9e 83       	std	Y+6, r25	; 0x06
    3a88:	8d 83       	std	Y+5, r24	; 0x05
    3a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a8e:	9a 83       	std	Y+2, r25	; 0x02
    3a90:	89 83       	std	Y+1, r24	; 0x01
    3a92:	89 81       	ldd	r24, Y+1	; 0x01
    3a94:	9a 81       	ldd	r25, Y+2	; 0x02
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	f1 f7       	brne	.-4      	; 0x3a96 <EEPROM_WriteChar+0x10e>
    3a9a:	9a 83       	std	Y+2, r25	; 0x02
    3a9c:	89 83       	std	Y+1, r24	; 0x01
	//Wait 10 ms for EEPROM TO WRITE
	_delay_ms(10);
}
    3a9e:	60 96       	adiw	r28, 0x10	; 16
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	f8 94       	cli
    3aa4:	de bf       	out	0x3e, r29	; 62
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	cd bf       	out	0x3d, r28	; 61
    3aaa:	cf 91       	pop	r28
    3aac:	df 91       	pop	r29
    3aae:	08 95       	ret

00003ab0 <EEPROM_WriteString>:

void EEPROM_WriteString(u8 loc,u8 *data)
{
    3ab0:	df 93       	push	r29
    3ab2:	cf 93       	push	r28
    3ab4:	00 d0       	rcall	.+0      	; 0x3ab6 <EEPROM_WriteString+0x6>
    3ab6:	00 d0       	rcall	.+0      	; 0x3ab8 <EEPROM_WriteString+0x8>
    3ab8:	cd b7       	in	r28, 0x3d	; 61
    3aba:	de b7       	in	r29, 0x3e	; 62
    3abc:	8a 83       	std	Y+2, r24	; 0x02
    3abe:	7c 83       	std	Y+4, r23	; 0x04
    3ac0:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 i=0;i<3;i++)
    3ac2:	19 82       	std	Y+1, r1	; 0x01
    3ac4:	14 c0       	rjmp	.+40     	; 0x3aee <EEPROM_WriteString+0x3e>
	{

		EEPROM_WriteChar(loc+i,data[i]);
    3ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac8:	89 81       	ldd	r24, Y+1	; 0x01
    3aca:	49 2f       	mov	r20, r25
    3acc:	48 0f       	add	r20, r24
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	28 2f       	mov	r18, r24
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad8:	fc 01       	movw	r30, r24
    3ada:	e2 0f       	add	r30, r18
    3adc:	f3 1f       	adc	r31, r19
    3ade:	90 81       	ld	r25, Z
    3ae0:	84 2f       	mov	r24, r20
    3ae2:	69 2f       	mov	r22, r25
    3ae4:	0e 94 c4 1c 	call	0x3988	; 0x3988 <EEPROM_WriteChar>
	_delay_ms(10);
}

void EEPROM_WriteString(u8 loc,u8 *data)
{
	for(u8 i=0;i<3;i++)
    3ae8:	89 81       	ldd	r24, Y+1	; 0x01
    3aea:	8f 5f       	subi	r24, 0xFF	; 255
    3aec:	89 83       	std	Y+1, r24	; 0x01
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	83 30       	cpi	r24, 0x03	; 3
    3af2:	48 f3       	brcs	.-46     	; 0x3ac6 <EEPROM_WriteString+0x16>
		EEPROM_WriteChar(loc+i,data[i]);

	}


}
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	0f 90       	pop	r0
    3afa:	0f 90       	pop	r0
    3afc:	cf 91       	pop	r28
    3afe:	df 91       	pop	r29
    3b00:	08 95       	ret

00003b02 <EEPROM_ReadString>:
void EEPROM_ReadString(u8 loc,u8 *data)
{
    3b02:	df 93       	push	r29
    3b04:	cf 93       	push	r28
    3b06:	00 d0       	rcall	.+0      	; 0x3b08 <EEPROM_ReadString+0x6>
    3b08:	00 d0       	rcall	.+0      	; 0x3b0a <EEPROM_ReadString+0x8>
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	8a 83       	std	Y+2, r24	; 0x02
    3b10:	7c 83       	std	Y+4, r23	; 0x04
    3b12:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 i=0;i<3;i++)
    3b14:	19 82       	std	Y+1, r1	; 0x01
    3b16:	12 c0       	rjmp	.+36     	; 0x3b3c <EEPROM_ReadString+0x3a>
	{

		EEPROM_ReadChar(loc+i,data+i);
    3b18:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	49 2f       	mov	r20, r25
    3b1e:	48 0f       	add	r20, r24
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
    3b22:	28 2f       	mov	r18, r24
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	8b 81       	ldd	r24, Y+3	; 0x03
    3b28:	9c 81       	ldd	r25, Y+4	; 0x04
    3b2a:	28 0f       	add	r18, r24
    3b2c:	39 1f       	adc	r19, r25
    3b2e:	84 2f       	mov	r24, r20
    3b30:	b9 01       	movw	r22, r18
    3b32:	0e 94 a2 1c 	call	0x3944	; 0x3944 <EEPROM_ReadChar>


}
void EEPROM_ReadString(u8 loc,u8 *data)
{
	for(u8 i=0;i<3;i++)
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	8f 5f       	subi	r24, 0xFF	; 255
    3b3a:	89 83       	std	Y+1, r24	; 0x01
    3b3c:	89 81       	ldd	r24, Y+1	; 0x01
    3b3e:	83 30       	cpi	r24, 0x03	; 3
    3b40:	58 f3       	brcs	.-42     	; 0x3b18 <EEPROM_ReadString+0x16>
		EEPROM_ReadChar(loc+i,data+i);

	}


}
    3b42:	0f 90       	pop	r0
    3b44:	0f 90       	pop	r0
    3b46:	0f 90       	pop	r0
    3b48:	0f 90       	pop	r0
    3b4a:	cf 91       	pop	r28
    3b4c:	df 91       	pop	r29
    3b4e:	08 95       	ret

00003b50 <EXI_Enable>:
static void(*INT1_Fptr)(void)=NULLPTR;
static void(*INT2_Fptr)(void)=NULLPTR;

/***********************Enable-Disable Functions*****************/
void EXI_Enable(EX_InterruptSource_type Interrupt)
{
    3b50:	df 93       	push	r29
    3b52:	cf 93       	push	r28
    3b54:	00 d0       	rcall	.+0      	; 0x3b56 <EXI_Enable+0x6>
    3b56:	0f 92       	push	r0
    3b58:	cd b7       	in	r28, 0x3d	; 61
    3b5a:	de b7       	in	r29, 0x3e	; 62
    3b5c:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt)
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
    3b60:	28 2f       	mov	r18, r24
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	3b 83       	std	Y+3, r19	; 0x03
    3b66:	2a 83       	std	Y+2, r18	; 0x02
    3b68:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b6c:	81 30       	cpi	r24, 0x01	; 1
    3b6e:	91 05       	cpc	r25, r1
    3b70:	89 f0       	breq	.+34     	; 0x3b94 <EXI_Enable+0x44>
    3b72:	2a 81       	ldd	r18, Y+2	; 0x02
    3b74:	3b 81       	ldd	r19, Y+3	; 0x03
    3b76:	22 30       	cpi	r18, 0x02	; 2
    3b78:	31 05       	cpc	r19, r1
    3b7a:	a1 f0       	breq	.+40     	; 0x3ba4 <EXI_Enable+0x54>
    3b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b80:	00 97       	sbiw	r24, 0x00	; 0
    3b82:	b9 f4       	brne	.+46     	; 0x3bb2 <EXI_Enable+0x62>
	{
		case EX_INT0:
		SET_BIT(GICR,INT0);
    3b84:	ab e5       	ldi	r26, 0x5B	; 91
    3b86:	b0 e0       	ldi	r27, 0x00	; 0
    3b88:	eb e5       	ldi	r30, 0x5B	; 91
    3b8a:	f0 e0       	ldi	r31, 0x00	; 0
    3b8c:	80 81       	ld	r24, Z
    3b8e:	80 64       	ori	r24, 0x40	; 64
    3b90:	8c 93       	st	X, r24
    3b92:	0f c0       	rjmp	.+30     	; 0x3bb2 <EXI_Enable+0x62>
		break;
		
		case EX_INT1:
		SET_BIT(GICR,INT1);
    3b94:	ab e5       	ldi	r26, 0x5B	; 91
    3b96:	b0 e0       	ldi	r27, 0x00	; 0
    3b98:	eb e5       	ldi	r30, 0x5B	; 91
    3b9a:	f0 e0       	ldi	r31, 0x00	; 0
    3b9c:	80 81       	ld	r24, Z
    3b9e:	80 68       	ori	r24, 0x80	; 128
    3ba0:	8c 93       	st	X, r24
    3ba2:	07 c0       	rjmp	.+14     	; 0x3bb2 <EXI_Enable+0x62>
		break;
		
		case EX_INT2:
		SET_BIT(GICR,INT2);
    3ba4:	ab e5       	ldi	r26, 0x5B	; 91
    3ba6:	b0 e0       	ldi	r27, 0x00	; 0
    3ba8:	eb e5       	ldi	r30, 0x5B	; 91
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	80 81       	ld	r24, Z
    3bae:	80 62       	ori	r24, 0x20	; 32
    3bb0:	8c 93       	st	X, r24
		break;
	}
}
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	cf 91       	pop	r28
    3bba:	df 91       	pop	r29
    3bbc:	08 95       	ret

00003bbe <EXI_Disble>:
void EXI_Disble(EX_InterruptSource_type Interrupt)
{
    3bbe:	df 93       	push	r29
    3bc0:	cf 93       	push	r28
    3bc2:	00 d0       	rcall	.+0      	; 0x3bc4 <EXI_Disble+0x6>
    3bc4:	0f 92       	push	r0
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
    3bca:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt)
    3bcc:	89 81       	ldd	r24, Y+1	; 0x01
    3bce:	28 2f       	mov	r18, r24
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	3b 83       	std	Y+3, r19	; 0x03
    3bd4:	2a 83       	std	Y+2, r18	; 0x02
    3bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    3bda:	81 30       	cpi	r24, 0x01	; 1
    3bdc:	91 05       	cpc	r25, r1
    3bde:	89 f0       	breq	.+34     	; 0x3c02 <EXI_Disble+0x44>
    3be0:	2a 81       	ldd	r18, Y+2	; 0x02
    3be2:	3b 81       	ldd	r19, Y+3	; 0x03
    3be4:	22 30       	cpi	r18, 0x02	; 2
    3be6:	31 05       	cpc	r19, r1
    3be8:	a1 f0       	breq	.+40     	; 0x3c12 <EXI_Disble+0x54>
    3bea:	8a 81       	ldd	r24, Y+2	; 0x02
    3bec:	9b 81       	ldd	r25, Y+3	; 0x03
    3bee:	00 97       	sbiw	r24, 0x00	; 0
    3bf0:	b9 f4       	brne	.+46     	; 0x3c20 <EXI_Disble+0x62>
	{
		case EX_INT0:
		CLR_BIT(GICR,INT0);
    3bf2:	ab e5       	ldi	r26, 0x5B	; 91
    3bf4:	b0 e0       	ldi	r27, 0x00	; 0
    3bf6:	eb e5       	ldi	r30, 0x5B	; 91
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	80 81       	ld	r24, Z
    3bfc:	8f 7b       	andi	r24, 0xBF	; 191
    3bfe:	8c 93       	st	X, r24
    3c00:	0f c0       	rjmp	.+30     	; 0x3c20 <EXI_Disble+0x62>
		break;
		
		case EX_INT1:
		CLR_BIT(GICR,INT1);
    3c02:	ab e5       	ldi	r26, 0x5B	; 91
    3c04:	b0 e0       	ldi	r27, 0x00	; 0
    3c06:	eb e5       	ldi	r30, 0x5B	; 91
    3c08:	f0 e0       	ldi	r31, 0x00	; 0
    3c0a:	80 81       	ld	r24, Z
    3c0c:	8f 77       	andi	r24, 0x7F	; 127
    3c0e:	8c 93       	st	X, r24
    3c10:	07 c0       	rjmp	.+14     	; 0x3c20 <EXI_Disble+0x62>
		break;
		
		case EX_INT2:
		CLR_BIT(GICR,INT2);
    3c12:	ab e5       	ldi	r26, 0x5B	; 91
    3c14:	b0 e0       	ldi	r27, 0x00	; 0
    3c16:	eb e5       	ldi	r30, 0x5B	; 91
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	80 81       	ld	r24, Z
    3c1c:	8f 7d       	andi	r24, 0xDF	; 223
    3c1e:	8c 93       	st	X, r24
		break;
	}
}
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	cf 91       	pop	r28
    3c28:	df 91       	pop	r29
    3c2a:	08 95       	ret

00003c2c <EXI_Init>:
void EXI_Init(void)
{
    3c2c:	df 93       	push	r29
    3c2e:	cf 93       	push	r28
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	62 e0       	ldi	r22, 0x02	; 2
    3c38:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	62 e0       	ldi	r22, 0x02	; 2
    3c40:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
    3c44:	82 e0       	ldi	r24, 0x02	; 2
    3c46:	62 e0       	ldi	r22, 0x02	; 2
    3c48:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <EXI_TriggerEdge>
}
    3c4c:	cf 91       	pop	r28
    3c4e:	df 91       	pop	r29
    3c50:	08 95       	ret

00003c52 <EXI_TriggerEdge>:
/***********************Control Function*****************/
void EXI_TriggerEdge(EX_InterruptSource_type Interrupt,TriggerEdge_type Edge)
{
    3c52:	df 93       	push	r29
    3c54:	cf 93       	push	r28
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
    3c5a:	2a 97       	sbiw	r28, 0x0a	; 10
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	89 83       	std	Y+1, r24	; 0x01
    3c68:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt)
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	28 2f       	mov	r18, r24
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	3a 87       	std	Y+10, r19	; 0x0a
    3c72:	29 87       	std	Y+9, r18	; 0x09
    3c74:	89 85       	ldd	r24, Y+9	; 0x09
    3c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c78:	81 30       	cpi	r24, 0x01	; 1
    3c7a:	91 05       	cpc	r25, r1
    3c7c:	09 f4       	brne	.+2      	; 0x3c80 <EXI_TriggerEdge+0x2e>
    3c7e:	66 c0       	rjmp	.+204    	; 0x3d4c <EXI_TriggerEdge+0xfa>
    3c80:	29 85       	ldd	r18, Y+9	; 0x09
    3c82:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c84:	22 30       	cpi	r18, 0x02	; 2
    3c86:	31 05       	cpc	r19, r1
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <EXI_TriggerEdge+0x3a>
    3c8a:	bb c0       	rjmp	.+374    	; 0x3e02 <EXI_TriggerEdge+0x1b0>
    3c8c:	89 85       	ldd	r24, Y+9	; 0x09
    3c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c90:	00 97       	sbiw	r24, 0x00	; 0
    3c92:	09 f0       	breq	.+2      	; 0x3c96 <EXI_TriggerEdge+0x44>
    3c94:	d5 c0       	rjmp	.+426    	; 0x3e40 <EXI_TriggerEdge+0x1ee>
	{
		case EX_INT0:
		
		switch(Edge)
    3c96:	8a 81       	ldd	r24, Y+2	; 0x02
    3c98:	28 2f       	mov	r18, r24
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	38 87       	std	Y+8, r19	; 0x08
    3c9e:	2f 83       	std	Y+7, r18	; 0x07
    3ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    3ca2:	98 85       	ldd	r25, Y+8	; 0x08
    3ca4:	81 30       	cpi	r24, 0x01	; 1
    3ca6:	91 05       	cpc	r25, r1
    3ca8:	21 f1       	breq	.+72     	; 0x3cf2 <EXI_TriggerEdge+0xa0>
    3caa:	2f 81       	ldd	r18, Y+7	; 0x07
    3cac:	38 85       	ldd	r19, Y+8	; 0x08
    3cae:	22 30       	cpi	r18, 0x02	; 2
    3cb0:	31 05       	cpc	r19, r1
    3cb2:	2c f4       	brge	.+10     	; 0x3cbe <EXI_TriggerEdge+0x6c>
    3cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    3cb6:	98 85       	ldd	r25, Y+8	; 0x08
    3cb8:	00 97       	sbiw	r24, 0x00	; 0
    3cba:	61 f0       	breq	.+24     	; 0x3cd4 <EXI_TriggerEdge+0x82>
    3cbc:	c1 c0       	rjmp	.+386    	; 0x3e40 <EXI_TriggerEdge+0x1ee>
    3cbe:	2f 81       	ldd	r18, Y+7	; 0x07
    3cc0:	38 85       	ldd	r19, Y+8	; 0x08
    3cc2:	22 30       	cpi	r18, 0x02	; 2
    3cc4:	31 05       	cpc	r19, r1
    3cc6:	21 f1       	breq	.+72     	; 0x3d10 <EXI_TriggerEdge+0xbe>
    3cc8:	8f 81       	ldd	r24, Y+7	; 0x07
    3cca:	98 85       	ldd	r25, Y+8	; 0x08
    3ccc:	83 30       	cpi	r24, 0x03	; 3
    3cce:	91 05       	cpc	r25, r1
    3cd0:	71 f1       	breq	.+92     	; 0x3d2e <EXI_TriggerEdge+0xdc>
    3cd2:	b6 c0       	rjmp	.+364    	; 0x3e40 <EXI_TriggerEdge+0x1ee>
		{
			case LOW_LEVEL:
			
			CLR_BIT(MCUCR,ISC00);
    3cd4:	a5 e5       	ldi	r26, 0x55	; 85
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	e5 e5       	ldi	r30, 0x55	; 85
    3cda:	f0 e0       	ldi	r31, 0x00	; 0
    3cdc:	80 81       	ld	r24, Z
    3cde:	8e 7f       	andi	r24, 0xFE	; 254
    3ce0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    3ce2:	a5 e5       	ldi	r26, 0x55	; 85
    3ce4:	b0 e0       	ldi	r27, 0x00	; 0
    3ce6:	e5 e5       	ldi	r30, 0x55	; 85
    3ce8:	f0 e0       	ldi	r31, 0x00	; 0
    3cea:	80 81       	ld	r24, Z
    3cec:	8d 7f       	andi	r24, 0xFD	; 253
    3cee:	8c 93       	st	X, r24
    3cf0:	a7 c0       	rjmp	.+334    	; 0x3e40 <EXI_TriggerEdge+0x1ee>
			break;
			
			case ANY_LOGIC_CHANGE:
			
			SET_BIT(MCUCR,ISC00);
    3cf2:	a5 e5       	ldi	r26, 0x55	; 85
    3cf4:	b0 e0       	ldi	r27, 0x00	; 0
    3cf6:	e5 e5       	ldi	r30, 0x55	; 85
    3cf8:	f0 e0       	ldi	r31, 0x00	; 0
    3cfa:	80 81       	ld	r24, Z
    3cfc:	81 60       	ori	r24, 0x01	; 1
    3cfe:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    3d00:	a5 e5       	ldi	r26, 0x55	; 85
    3d02:	b0 e0       	ldi	r27, 0x00	; 0
    3d04:	e5 e5       	ldi	r30, 0x55	; 85
    3d06:	f0 e0       	ldi	r31, 0x00	; 0
    3d08:	80 81       	ld	r24, Z
    3d0a:	8d 7f       	andi	r24, 0xFD	; 253
    3d0c:	8c 93       	st	X, r24
    3d0e:	98 c0       	rjmp	.+304    	; 0x3e40 <EXI_TriggerEdge+0x1ee>
			break;
			
			case FALLING_EDGE:
			
			CLR_BIT(MCUCR,ISC00);
    3d10:	a5 e5       	ldi	r26, 0x55	; 85
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	e5 e5       	ldi	r30, 0x55	; 85
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	80 81       	ld	r24, Z
    3d1a:	8e 7f       	andi	r24, 0xFE	; 254
    3d1c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    3d1e:	a5 e5       	ldi	r26, 0x55	; 85
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	e5 e5       	ldi	r30, 0x55	; 85
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	80 81       	ld	r24, Z
    3d28:	82 60       	ori	r24, 0x02	; 2
    3d2a:	8c 93       	st	X, r24
    3d2c:	89 c0       	rjmp	.+274    	; 0x3e40 <EXI_TriggerEdge+0x1ee>
			break;
			
			case RISING_EDGE:
			
			SET_BIT(MCUCR,ISC00);
    3d2e:	a5 e5       	ldi	r26, 0x55	; 85
    3d30:	b0 e0       	ldi	r27, 0x00	; 0
    3d32:	e5 e5       	ldi	r30, 0x55	; 85
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	80 81       	ld	r24, Z
    3d38:	81 60       	ori	r24, 0x01	; 1
    3d3a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    3d3c:	a5 e5       	ldi	r26, 0x55	; 85
    3d3e:	b0 e0       	ldi	r27, 0x00	; 0
    3d40:	e5 e5       	ldi	r30, 0x55	; 85
    3d42:	f0 e0       	ldi	r31, 0x00	; 0
    3d44:	80 81       	ld	r24, Z
    3d46:	82 60       	ori	r24, 0x02	; 2
    3d48:	8c 93       	st	X, r24
    3d4a:	7a c0       	rjmp	.+244    	; 0x3e40 <EXI_TriggerEdge+0x1ee>
		
		break;
		
		case EX_INT1:
		
		switch(Edge)
    3d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4e:	28 2f       	mov	r18, r24
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	3e 83       	std	Y+6, r19	; 0x06
    3d54:	2d 83       	std	Y+5, r18	; 0x05
    3d56:	8d 81       	ldd	r24, Y+5	; 0x05
    3d58:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5a:	81 30       	cpi	r24, 0x01	; 1
    3d5c:	91 05       	cpc	r25, r1
    3d5e:	21 f1       	breq	.+72     	; 0x3da8 <EXI_TriggerEdge+0x156>
    3d60:	2d 81       	ldd	r18, Y+5	; 0x05
    3d62:	3e 81       	ldd	r19, Y+6	; 0x06
    3d64:	22 30       	cpi	r18, 0x02	; 2
    3d66:	31 05       	cpc	r19, r1
    3d68:	2c f4       	brge	.+10     	; 0x3d74 <EXI_TriggerEdge+0x122>
    3d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d6e:	00 97       	sbiw	r24, 0x00	; 0
    3d70:	61 f0       	breq	.+24     	; 0x3d8a <EXI_TriggerEdge+0x138>
    3d72:	66 c0       	rjmp	.+204    	; 0x3e40 <EXI_TriggerEdge+0x1ee>
    3d74:	2d 81       	ldd	r18, Y+5	; 0x05
    3d76:	3e 81       	ldd	r19, Y+6	; 0x06
    3d78:	22 30       	cpi	r18, 0x02	; 2
    3d7a:	31 05       	cpc	r19, r1
    3d7c:	21 f1       	breq	.+72     	; 0x3dc6 <EXI_TriggerEdge+0x174>
    3d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d80:	9e 81       	ldd	r25, Y+6	; 0x06
    3d82:	83 30       	cpi	r24, 0x03	; 3
    3d84:	91 05       	cpc	r25, r1
    3d86:	71 f1       	breq	.+92     	; 0x3de4 <EXI_TriggerEdge+0x192>
    3d88:	5b c0       	rjmp	.+182    	; 0x3e40 <EXI_TriggerEdge+0x1ee>
		{
			case LOW_LEVEL:
			
			CLR_BIT(MCUCR,ISC10);
    3d8a:	a5 e5       	ldi	r26, 0x55	; 85
    3d8c:	b0 e0       	ldi	r27, 0x00	; 0
    3d8e:	e5 e5       	ldi	r30, 0x55	; 85
    3d90:	f0 e0       	ldi	r31, 0x00	; 0
    3d92:	80 81       	ld	r24, Z
    3d94:	8b 7f       	andi	r24, 0xFB	; 251
    3d96:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC11);
    3d98:	a5 e5       	ldi	r26, 0x55	; 85
    3d9a:	b0 e0       	ldi	r27, 0x00	; 0
    3d9c:	e5 e5       	ldi	r30, 0x55	; 85
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	80 81       	ld	r24, Z
    3da2:	87 7f       	andi	r24, 0xF7	; 247
    3da4:	8c 93       	st	X, r24
    3da6:	4c c0       	rjmp	.+152    	; 0x3e40 <EXI_TriggerEdge+0x1ee>
			break;
			
			case ANY_LOGIC_CHANGE:
			
			SET_BIT(MCUCR,ISC10);
    3da8:	a5 e5       	ldi	r26, 0x55	; 85
    3daa:	b0 e0       	ldi	r27, 0x00	; 0
    3dac:	e5 e5       	ldi	r30, 0x55	; 85
    3dae:	f0 e0       	ldi	r31, 0x00	; 0
    3db0:	80 81       	ld	r24, Z
    3db2:	84 60       	ori	r24, 0x04	; 4
    3db4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC11);
    3db6:	a5 e5       	ldi	r26, 0x55	; 85
    3db8:	b0 e0       	ldi	r27, 0x00	; 0
    3dba:	e5 e5       	ldi	r30, 0x55	; 85
    3dbc:	f0 e0       	ldi	r31, 0x00	; 0
    3dbe:	80 81       	ld	r24, Z
    3dc0:	87 7f       	andi	r24, 0xF7	; 247
    3dc2:	8c 93       	st	X, r24
    3dc4:	3d c0       	rjmp	.+122    	; 0x3e40 <EXI_TriggerEdge+0x1ee>
			break;
			
			case FALLING_EDGE:
			
			CLR_BIT(MCUCR,ISC10);
    3dc6:	a5 e5       	ldi	r26, 0x55	; 85
    3dc8:	b0 e0       	ldi	r27, 0x00	; 0
    3dca:	e5 e5       	ldi	r30, 0x55	; 85
    3dcc:	f0 e0       	ldi	r31, 0x00	; 0
    3dce:	80 81       	ld	r24, Z
    3dd0:	8b 7f       	andi	r24, 0xFB	; 251
    3dd2:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    3dd4:	a5 e5       	ldi	r26, 0x55	; 85
    3dd6:	b0 e0       	ldi	r27, 0x00	; 0
    3dd8:	e5 e5       	ldi	r30, 0x55	; 85
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	80 81       	ld	r24, Z
    3dde:	88 60       	ori	r24, 0x08	; 8
    3de0:	8c 93       	st	X, r24
    3de2:	2e c0       	rjmp	.+92     	; 0x3e40 <EXI_TriggerEdge+0x1ee>
			break;
			
			case RISING_EDGE:
			
			SET_BIT(MCUCR,ISC10);
    3de4:	a5 e5       	ldi	r26, 0x55	; 85
    3de6:	b0 e0       	ldi	r27, 0x00	; 0
    3de8:	e5 e5       	ldi	r30, 0x55	; 85
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	80 81       	ld	r24, Z
    3dee:	84 60       	ori	r24, 0x04	; 4
    3df0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    3df2:	a5 e5       	ldi	r26, 0x55	; 85
    3df4:	b0 e0       	ldi	r27, 0x00	; 0
    3df6:	e5 e5       	ldi	r30, 0x55	; 85
    3df8:	f0 e0       	ldi	r31, 0x00	; 0
    3dfa:	80 81       	ld	r24, Z
    3dfc:	88 60       	ori	r24, 0x08	; 8
    3dfe:	8c 93       	st	X, r24
    3e00:	1f c0       	rjmp	.+62     	; 0x3e40 <EXI_TriggerEdge+0x1ee>
		
		break;
		
		case EX_INT2:
		
		switch(Edge)
    3e02:	8a 81       	ldd	r24, Y+2	; 0x02
    3e04:	28 2f       	mov	r18, r24
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	3c 83       	std	Y+4, r19	; 0x04
    3e0a:	2b 83       	std	Y+3, r18	; 0x03
    3e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e10:	82 30       	cpi	r24, 0x02	; 2
    3e12:	91 05       	cpc	r25, r1
    3e14:	31 f0       	breq	.+12     	; 0x3e22 <EXI_TriggerEdge+0x1d0>
    3e16:	2b 81       	ldd	r18, Y+3	; 0x03
    3e18:	3c 81       	ldd	r19, Y+4	; 0x04
    3e1a:	23 30       	cpi	r18, 0x03	; 3
    3e1c:	31 05       	cpc	r19, r1
    3e1e:	49 f0       	breq	.+18     	; 0x3e32 <EXI_TriggerEdge+0x1e0>
    3e20:	0f c0       	rjmp	.+30     	; 0x3e40 <EXI_TriggerEdge+0x1ee>
		{
			
			case FALLING_EDGE:
			
			CLR_BIT(MCUCSR,ISC2);
    3e22:	a4 e5       	ldi	r26, 0x54	; 84
    3e24:	b0 e0       	ldi	r27, 0x00	; 0
    3e26:	e4 e5       	ldi	r30, 0x54	; 84
    3e28:	f0 e0       	ldi	r31, 0x00	; 0
    3e2a:	80 81       	ld	r24, Z
    3e2c:	8f 7b       	andi	r24, 0xBF	; 191
    3e2e:	8c 93       	st	X, r24
    3e30:	07 c0       	rjmp	.+14     	; 0x3e40 <EXI_TriggerEdge+0x1ee>
			
			break;
			
			case RISING_EDGE:
			
			SET_BIT(MCUCSR,ISC2);
    3e32:	a4 e5       	ldi	r26, 0x54	; 84
    3e34:	b0 e0       	ldi	r27, 0x00	; 0
    3e36:	e4 e5       	ldi	r30, 0x54	; 84
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	80 81       	ld	r24, Z
    3e3c:	80 64       	ori	r24, 0x40	; 64
    3e3e:	8c 93       	st	X, r24
			
		}
		
		break;
	}
}
    3e40:	2a 96       	adiw	r28, 0x0a	; 10
    3e42:	0f b6       	in	r0, 0x3f	; 63
    3e44:	f8 94       	cli
    3e46:	de bf       	out	0x3e, r29	; 62
    3e48:	0f be       	out	0x3f, r0	; 63
    3e4a:	cd bf       	out	0x3d, r28	; 61
    3e4c:	cf 91       	pop	r28
    3e4e:	df 91       	pop	r29
    3e50:	08 95       	ret

00003e52 <EXI_SetCallBack>:

/********************************************EXI CALL BACK function  ************************************/
void EXI_SetCallBack(EX_InterruptSource_type Interrupt,void(*LocalPtr)(void))//setter
{
    3e52:	df 93       	push	r29
    3e54:	cf 93       	push	r28
    3e56:	00 d0       	rcall	.+0      	; 0x3e58 <EXI_SetCallBack+0x6>
    3e58:	00 d0       	rcall	.+0      	; 0x3e5a <EXI_SetCallBack+0x8>
    3e5a:	0f 92       	push	r0
    3e5c:	cd b7       	in	r28, 0x3d	; 61
    3e5e:	de b7       	in	r29, 0x3e	; 62
    3e60:	89 83       	std	Y+1, r24	; 0x01
    3e62:	7b 83       	std	Y+3, r23	; 0x03
    3e64:	6a 83       	std	Y+2, r22	; 0x02
  switch(Interrupt)
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
    3e68:	28 2f       	mov	r18, r24
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	3d 83       	std	Y+5, r19	; 0x05
    3e6e:	2c 83       	std	Y+4, r18	; 0x04
    3e70:	8c 81       	ldd	r24, Y+4	; 0x04
    3e72:	9d 81       	ldd	r25, Y+5	; 0x05
    3e74:	81 30       	cpi	r24, 0x01	; 1
    3e76:	91 05       	cpc	r25, r1
    3e78:	81 f0       	breq	.+32     	; 0x3e9a <EXI_SetCallBack+0x48>
    3e7a:	2c 81       	ldd	r18, Y+4	; 0x04
    3e7c:	3d 81       	ldd	r19, Y+5	; 0x05
    3e7e:	22 30       	cpi	r18, 0x02	; 2
    3e80:	31 05       	cpc	r19, r1
    3e82:	91 f0       	breq	.+36     	; 0x3ea8 <EXI_SetCallBack+0x56>
    3e84:	8c 81       	ldd	r24, Y+4	; 0x04
    3e86:	9d 81       	ldd	r25, Y+5	; 0x05
    3e88:	00 97       	sbiw	r24, 0x00	; 0
    3e8a:	a1 f4       	brne	.+40     	; 0x3eb4 <EXI_SetCallBack+0x62>
  {
	  case EX_INT0:
	  INT0_Fptr=LocalPtr;
    3e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e90:	90 93 39 02 	sts	0x0239, r25
    3e94:	80 93 38 02 	sts	0x0238, r24
    3e98:	0d c0       	rjmp	.+26     	; 0x3eb4 <EXI_SetCallBack+0x62>
	  break;
	  
	  case EX_INT1:
	  INT1_Fptr=LocalPtr;
    3e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e9e:	90 93 3b 02 	sts	0x023B, r25
    3ea2:	80 93 3a 02 	sts	0x023A, r24
    3ea6:	06 c0       	rjmp	.+12     	; 0x3eb4 <EXI_SetCallBack+0x62>
	  break;
	  
	  case EX_INT2:
	  INT2_Fptr=LocalPtr;
    3ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    3eac:	90 93 3d 02 	sts	0x023D, r25
    3eb0:	80 93 3c 02 	sts	0x023C, r24
	  break;
	  
  }
 
}
    3eb4:	0f 90       	pop	r0
    3eb6:	0f 90       	pop	r0
    3eb8:	0f 90       	pop	r0
    3eba:	0f 90       	pop	r0
    3ebc:	0f 90       	pop	r0
    3ebe:	cf 91       	pop	r28
    3ec0:	df 91       	pop	r29
    3ec2:	08 95       	ret

00003ec4 <__vector_1>:
ISR(INT0_vect)/* ISR */
{
    3ec4:	1f 92       	push	r1
    3ec6:	0f 92       	push	r0
    3ec8:	0f b6       	in	r0, 0x3f	; 63
    3eca:	0f 92       	push	r0
    3ecc:	11 24       	eor	r1, r1
    3ece:	2f 93       	push	r18
    3ed0:	3f 93       	push	r19
    3ed2:	4f 93       	push	r20
    3ed4:	5f 93       	push	r21
    3ed6:	6f 93       	push	r22
    3ed8:	7f 93       	push	r23
    3eda:	8f 93       	push	r24
    3edc:	9f 93       	push	r25
    3ede:	af 93       	push	r26
    3ee0:	bf 93       	push	r27
    3ee2:	ef 93       	push	r30
    3ee4:	ff 93       	push	r31
    3ee6:	df 93       	push	r29
    3ee8:	cf 93       	push	r28
    3eea:	cd b7       	in	r28, 0x3d	; 61
    3eec:	de b7       	in	r29, 0x3e	; 62
	/***call back*****/
	
	if(INT0_Fptr!=NULLPTR)
    3eee:	80 91 38 02 	lds	r24, 0x0238
    3ef2:	90 91 39 02 	lds	r25, 0x0239
    3ef6:	00 97       	sbiw	r24, 0x00	; 0
    3ef8:	29 f0       	breq	.+10     	; 0x3f04 <__vector_1+0x40>
	{
		INT0_Fptr();
    3efa:	e0 91 38 02 	lds	r30, 0x0238
    3efe:	f0 91 39 02 	lds	r31, 0x0239
    3f02:	09 95       	icall
	/*
	Ex_Func1();
	*/

	
}
    3f04:	cf 91       	pop	r28
    3f06:	df 91       	pop	r29
    3f08:	ff 91       	pop	r31
    3f0a:	ef 91       	pop	r30
    3f0c:	bf 91       	pop	r27
    3f0e:	af 91       	pop	r26
    3f10:	9f 91       	pop	r25
    3f12:	8f 91       	pop	r24
    3f14:	7f 91       	pop	r23
    3f16:	6f 91       	pop	r22
    3f18:	5f 91       	pop	r21
    3f1a:	4f 91       	pop	r20
    3f1c:	3f 91       	pop	r19
    3f1e:	2f 91       	pop	r18
    3f20:	0f 90       	pop	r0
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	0f 90       	pop	r0
    3f26:	1f 90       	pop	r1
    3f28:	18 95       	reti

00003f2a <__vector_2>:

ISR(INT1_vect)/* ISR */
{
    3f2a:	1f 92       	push	r1
    3f2c:	0f 92       	push	r0
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	0f 92       	push	r0
    3f32:	11 24       	eor	r1, r1
    3f34:	2f 93       	push	r18
    3f36:	3f 93       	push	r19
    3f38:	4f 93       	push	r20
    3f3a:	5f 93       	push	r21
    3f3c:	6f 93       	push	r22
    3f3e:	7f 93       	push	r23
    3f40:	8f 93       	push	r24
    3f42:	9f 93       	push	r25
    3f44:	af 93       	push	r26
    3f46:	bf 93       	push	r27
    3f48:	ef 93       	push	r30
    3f4a:	ff 93       	push	r31
    3f4c:	df 93       	push	r29
    3f4e:	cf 93       	push	r28
    3f50:	cd b7       	in	r28, 0x3d	; 61
    3f52:	de b7       	in	r29, 0x3e	; 62
	

	if(INT1_Fptr!=NULLPTR)
    3f54:	80 91 3a 02 	lds	r24, 0x023A
    3f58:	90 91 3b 02 	lds	r25, 0x023B
    3f5c:	00 97       	sbiw	r24, 0x00	; 0
    3f5e:	29 f0       	breq	.+10     	; 0x3f6a <__vector_2+0x40>
	{
		INT1_Fptr();
    3f60:	e0 91 3a 02 	lds	r30, 0x023A
    3f64:	f0 91 3b 02 	lds	r31, 0x023B
    3f68:	09 95       	icall
	}

}
    3f6a:	cf 91       	pop	r28
    3f6c:	df 91       	pop	r29
    3f6e:	ff 91       	pop	r31
    3f70:	ef 91       	pop	r30
    3f72:	bf 91       	pop	r27
    3f74:	af 91       	pop	r26
    3f76:	9f 91       	pop	r25
    3f78:	8f 91       	pop	r24
    3f7a:	7f 91       	pop	r23
    3f7c:	6f 91       	pop	r22
    3f7e:	5f 91       	pop	r21
    3f80:	4f 91       	pop	r20
    3f82:	3f 91       	pop	r19
    3f84:	2f 91       	pop	r18
    3f86:	0f 90       	pop	r0
    3f88:	0f be       	out	0x3f, r0	; 63
    3f8a:	0f 90       	pop	r0
    3f8c:	1f 90       	pop	r1
    3f8e:	18 95       	reti

00003f90 <__vector_3>:

ISR(INT2_vect)/* ISR */
{
    3f90:	1f 92       	push	r1
    3f92:	0f 92       	push	r0
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	0f 92       	push	r0
    3f98:	11 24       	eor	r1, r1
    3f9a:	2f 93       	push	r18
    3f9c:	3f 93       	push	r19
    3f9e:	4f 93       	push	r20
    3fa0:	5f 93       	push	r21
    3fa2:	6f 93       	push	r22
    3fa4:	7f 93       	push	r23
    3fa6:	8f 93       	push	r24
    3fa8:	9f 93       	push	r25
    3faa:	af 93       	push	r26
    3fac:	bf 93       	push	r27
    3fae:	ef 93       	push	r30
    3fb0:	ff 93       	push	r31
    3fb2:	df 93       	push	r29
    3fb4:	cf 93       	push	r28
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62
	

	if(INT2_Fptr!=NULLPTR)
    3fba:	80 91 3c 02 	lds	r24, 0x023C
    3fbe:	90 91 3d 02 	lds	r25, 0x023D
    3fc2:	00 97       	sbiw	r24, 0x00	; 0
    3fc4:	29 f0       	breq	.+10     	; 0x3fd0 <__vector_3+0x40>
	{
		INT2_Fptr();
    3fc6:	e0 91 3c 02 	lds	r30, 0x023C
    3fca:	f0 91 3d 02 	lds	r31, 0x023D
    3fce:	09 95       	icall
	}

}
    3fd0:	cf 91       	pop	r28
    3fd2:	df 91       	pop	r29
    3fd4:	ff 91       	pop	r31
    3fd6:	ef 91       	pop	r30
    3fd8:	bf 91       	pop	r27
    3fda:	af 91       	pop	r26
    3fdc:	9f 91       	pop	r25
    3fde:	8f 91       	pop	r24
    3fe0:	7f 91       	pop	r23
    3fe2:	6f 91       	pop	r22
    3fe4:	5f 91       	pop	r21
    3fe6:	4f 91       	pop	r20
    3fe8:	3f 91       	pop	r19
    3fea:	2f 91       	pop	r18
    3fec:	0f 90       	pop	r0
    3fee:	0f be       	out	0x3f, r0	; 63
    3ff0:	0f 90       	pop	r0
    3ff2:	1f 90       	pop	r1
    3ff4:	18 95       	reti

00003ff6 <Change_Pass>:
static u8 pass[10]={0};
static u8 pass_index=0;
static u8 Pass_Flag=0;

void Change_Pass(void)
{
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62

	Pass_Flag=1;
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	80 93 55 02 	sts	0x0255, r24
	System_Flag=SYSTEM_NEWPASS;
    4004:	84 e0       	ldi	r24, 0x04	; 4
    4006:	80 93 3e 02 	sts	0x023E, r24

}
    400a:	cf 91       	pop	r28
    400c:	df 91       	pop	r29
    400e:	08 95       	ret

00004010 <FireAlarm_Init>:

void FireAlarm_Init(void)
{
    4010:	df 93       	push	r29
    4012:	cf 93       	push	r28
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
	//LED_FINE ->ON  And Rest are off
	DIO_WritePin(LED_FINE,HIGH);
    4018:	88 e0       	ldi	r24, 0x08	; 8
    401a:	61 e0       	ldi	r22, 0x01	; 1
    401c:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(LED_HEAT,LOW);
    4020:	85 e1       	ldi	r24, 0x15	; 21
    4022:	60 e0       	ldi	r22, 0x00	; 0
    4024:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(LED_FIRE,LOW);
    4028:	89 e0       	ldi	r24, 0x09	; 9
    402a:	60 e0       	ldi	r22, 0x00	; 0
    402c:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>

	EEPROM_ReadString(0,pass_EEPROM);
    4030:	20 e4       	ldi	r18, 0x40	; 64
    4032:	32 e0       	ldi	r19, 0x02	; 2
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	b9 01       	movw	r22, r18
    403a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <EEPROM_ReadString>
	EXI_SetCallBack(EX_INT2,Change_Pass);
    403e:	2b ef       	ldi	r18, 0xFB	; 251
    4040:	3f e1       	ldi	r19, 0x1F	; 31
    4042:	82 e0       	ldi	r24, 0x02	; 2
    4044:	b9 01       	movw	r22, r18
    4046:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <EXI_SetCallBack>
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
    404a:	82 e0       	ldi	r24, 0x02	; 2
    404c:	62 e0       	ldi	r22, 0x02	; 2
    404e:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <EXI_TriggerEdge>
	EXI_Enable(EX_INT2);
    4052:	82 e0       	ldi	r24, 0x02	; 2
    4054:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <EXI_Enable>




	//Motor Stop
	MOTOR_Stop(M1);
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <MOTOR_Stop>

	System_Flag=SYSTEM_FINE;
    405e:	10 92 3e 02 	sts	0x023E, r1

}
    4062:	cf 91       	pop	r28
    4064:	df 91       	pop	r29
    4066:	08 95       	ret

00004068 <FireAlarm_Runnable>:

void FireAlarm_Runnable(void)
{
    4068:	af 92       	push	r10
    406a:	bf 92       	push	r11
    406c:	cf 92       	push	r12
    406e:	df 92       	push	r13
    4070:	ef 92       	push	r14
    4072:	ff 92       	push	r15
    4074:	0f 93       	push	r16
    4076:	1f 93       	push	r17
    4078:	df 93       	push	r29
    407a:	cf 93       	push	r28
    407c:	cd b7       	in	r28, 0x3d	; 61
    407e:	de b7       	in	r29, 0x3e	; 62
    4080:	6d 97       	sbiw	r28, 0x1d	; 29
    4082:	0f b6       	in	r0, 0x3f	; 63
    4084:	f8 94       	cli
    4086:	de bf       	out	0x3e, r29	; 62
    4088:	0f be       	out	0x3f, r0	; 63
    408a:	cd bf       	out	0x3d, r28	; 61
	Temp=FILTER_GetFilteredTemp();
    408c:	0e 94 4f 38 	call	0x709e	; 0x709e <FILTER_GetFilteredTemp>
    4090:	90 93 57 02 	sts	0x0257, r25
    4094:	80 93 56 02 	sts	0x0256, r24

	pot=Pot_Get_Synch();
    4098:	0e 94 bc 35 	call	0x6b78	; 0x6b78 <Pot_Get_Synch>
    409c:	90 93 59 02 	sts	0x0259, r25
    40a0:	80 93 58 02 	sts	0x0258, r24
    if(Pass_Flag==1)
    40a4:	80 91 55 02 	lds	r24, 0x0255
    40a8:	81 30       	cpi	r24, 0x01	; 1
    40aa:	21 f4       	brne	.+8      	; 0x40b4 <FireAlarm_Runnable+0x4c>
    {
    	System_Flag=SYSTEM_NEWPASS;
    40ac:	84 e0       	ldi	r24, 0x04	; 4
    40ae:	80 93 3e 02 	sts	0x023E, r24
    40b2:	46 c0       	rjmp	.+140    	; 0x4140 <FireAlarm_Runnable+0xd8>
    }
    else if(Flag_FireState==1)
    40b4:	80 91 3f 02 	lds	r24, 0x023F
    40b8:	81 30       	cpi	r24, 0x01	; 1
    40ba:	79 f4       	brne	.+30     	; 0x40da <FireAlarm_Runnable+0x72>
	{
			System_Flag=SYSTEM_FIRE;
    40bc:	82 e0       	ldi	r24, 0x02	; 2
    40be:	80 93 3e 02 	sts	0x023E, r24
			if(Temp<450)
    40c2:	80 91 56 02 	lds	r24, 0x0256
    40c6:	90 91 57 02 	lds	r25, 0x0257
    40ca:	21 e0       	ldi	r18, 0x01	; 1
    40cc:	82 3c       	cpi	r24, 0xC2	; 194
    40ce:	92 07       	cpc	r25, r18
    40d0:	b8 f5       	brcc	.+110    	; 0x4140 <FireAlarm_Runnable+0xd8>
			{
				System_Flag=SYSTEM_FIRE_FINE;
    40d2:	83 e0       	ldi	r24, 0x03	; 3
    40d4:	80 93 3e 02 	sts	0x023E, r24
    40d8:	33 c0       	rjmp	.+102    	; 0x4140 <FireAlarm_Runnable+0xd8>
			}

	}
	else if(Temp<450)
    40da:	80 91 56 02 	lds	r24, 0x0256
    40de:	90 91 57 02 	lds	r25, 0x0257
    40e2:	21 e0       	ldi	r18, 0x01	; 1
    40e4:	82 3c       	cpi	r24, 0xC2	; 194
    40e6:	92 07       	cpc	r25, r18
    40e8:	18 f4       	brcc	.+6      	; 0x40f0 <FireAlarm_Runnable+0x88>
	{
		System_Flag=SYSTEM_FINE;
    40ea:	10 92 3e 02 	sts	0x023E, r1
    40ee:	28 c0       	rjmp	.+80     	; 0x4140 <FireAlarm_Runnable+0xd8>

	}

	else if(Temp>500&&pot<45)
    40f0:	80 91 56 02 	lds	r24, 0x0256
    40f4:	90 91 57 02 	lds	r25, 0x0257
    40f8:	21 e0       	ldi	r18, 0x01	; 1
    40fa:	85 3f       	cpi	r24, 0xF5	; 245
    40fc:	92 07       	cpc	r25, r18
    40fe:	58 f0       	brcs	.+22     	; 0x4116 <FireAlarm_Runnable+0xae>
    4100:	80 91 58 02 	lds	r24, 0x0258
    4104:	90 91 59 02 	lds	r25, 0x0259
    4108:	8d 32       	cpi	r24, 0x2D	; 45
    410a:	91 05       	cpc	r25, r1
    410c:	20 f4       	brcc	.+8      	; 0x4116 <FireAlarm_Runnable+0xae>
	{
		System_Flag=SYSTEM_HEAT;
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	80 93 3e 02 	sts	0x023E, r24
    4114:	15 c0       	rjmp	.+42     	; 0x4140 <FireAlarm_Runnable+0xd8>

	}

	else if(Temp>500&&pot>50)
    4116:	80 91 56 02 	lds	r24, 0x0256
    411a:	90 91 57 02 	lds	r25, 0x0257
    411e:	21 e0       	ldi	r18, 0x01	; 1
    4120:	85 3f       	cpi	r24, 0xF5	; 245
    4122:	92 07       	cpc	r25, r18
    4124:	68 f0       	brcs	.+26     	; 0x4140 <FireAlarm_Runnable+0xd8>
    4126:	80 91 58 02 	lds	r24, 0x0258
    412a:	90 91 59 02 	lds	r25, 0x0259
    412e:	83 33       	cpi	r24, 0x33	; 51
    4130:	91 05       	cpc	r25, r1
    4132:	30 f0       	brcs	.+12     	; 0x4140 <FireAlarm_Runnable+0xd8>
	{
		System_Flag=SYSTEM_FIRE;
    4134:	82 e0       	ldi	r24, 0x02	; 2
    4136:	80 93 3e 02 	sts	0x023E, r24
		Flag_FireState=1;
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	80 93 3f 02 	sts	0x023F, r24

	}



	if(System_Flag==SYSTEM_FINE)
    4140:	80 91 3e 02 	lds	r24, 0x023E
    4144:	88 23       	and	r24, r24
    4146:	09 f0       	breq	.+2      	; 0x414a <FireAlarm_Runnable+0xe2>
    4148:	70 c0       	rjmp	.+224    	; 0x422a <FireAlarm_Runnable+0x1c2>
	{
		LCD_WriteStringGoTo(0,2,"SYSTEM FINE");
    414a:	20 e6       	ldi	r18, 0x60	; 96
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	62 e0       	ldi	r22, 0x02	; 2
    4152:	a9 01       	movw	r20, r18
    4154:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
		DIO_WritePin(LED_FINE,HIGH);
    4158:	88 e0       	ldi	r24, 0x08	; 8
    415a:	61 e0       	ldi	r22, 0x01	; 1
    415c:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
		DIO_WritePin(LED_HEAT,LOW);
    4160:	85 e1       	ldi	r24, 0x15	; 21
    4162:	60 e0       	ldi	r22, 0x00	; 0
    4164:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
		DIO_WritePin(LED_FIRE,LOW);
    4168:	89 e0       	ldi	r24, 0x09	; 9
    416a:	60 e0       	ldi	r22, 0x00	; 0
    416c:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
		MOTOR_Stop(M1);
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <MOTOR_Stop>
		LCD_WriteStringGoTo(1,0,"TEMP=");
    4176:	2c e6       	ldi	r18, 0x6C	; 108
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	60 e0       	ldi	r22, 0x00	; 0
    417e:	a9 01       	movw	r20, r18
    4180:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
		LCD_WriteNum(Temp/10);
    4184:	80 91 56 02 	lds	r24, 0x0256
    4188:	90 91 57 02 	lds	r25, 0x0257
    418c:	2a e0       	ldi	r18, 0x0A	; 10
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	b9 01       	movw	r22, r18
    4192:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    4196:	cb 01       	movw	r24, r22
    4198:	5c 01       	movw	r10, r24
    419a:	cc 24       	eor	r12, r12
    419c:	dd 24       	eor	r13, r13
    419e:	ee 24       	eor	r14, r14
    41a0:	ff 24       	eor	r15, r15
    41a2:	87 01       	movw	r16, r14
    41a4:	2a 2d       	mov	r18, r10
    41a6:	3b 2d       	mov	r19, r11
    41a8:	4c 2d       	mov	r20, r12
    41aa:	5d 2d       	mov	r21, r13
    41ac:	6e 2d       	mov	r22, r14
    41ae:	7f 2d       	mov	r23, r15
    41b0:	80 2f       	mov	r24, r16
    41b2:	91 2f       	mov	r25, r17
    41b4:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <LCD_WriteNum>
		LCD_WriteChar('.');
    41b8:	8e e2       	ldi	r24, 0x2E	; 46
    41ba:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
		LCD_WriteNum(Temp%10);
    41be:	80 91 56 02 	lds	r24, 0x0256
    41c2:	90 91 57 02 	lds	r25, 0x0257
    41c6:	2a e0       	ldi	r18, 0x0A	; 10
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	b9 01       	movw	r22, r18
    41cc:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    41d0:	5c 01       	movw	r10, r24
    41d2:	cc 24       	eor	r12, r12
    41d4:	dd 24       	eor	r13, r13
    41d6:	ee 24       	eor	r14, r14
    41d8:	ff 24       	eor	r15, r15
    41da:	87 01       	movw	r16, r14
    41dc:	2a 2d       	mov	r18, r10
    41de:	3b 2d       	mov	r19, r11
    41e0:	4c 2d       	mov	r20, r12
    41e2:	5d 2d       	mov	r21, r13
    41e4:	6e 2d       	mov	r22, r14
    41e6:	7f 2d       	mov	r23, r15
    41e8:	80 2f       	mov	r24, r16
    41ea:	91 2f       	mov	r25, r17
    41ec:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <LCD_WriteNum>
		LCD_WriteString(" P=");
    41f0:	82 e7       	ldi	r24, 0x72	; 114
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <LCD_WriteString>
		LCD_WriteNum(pot);
    41f8:	80 91 58 02 	lds	r24, 0x0258
    41fc:	90 91 59 02 	lds	r25, 0x0259
    4200:	5c 01       	movw	r10, r24
    4202:	cc 24       	eor	r12, r12
    4204:	dd 24       	eor	r13, r13
    4206:	ee 24       	eor	r14, r14
    4208:	ff 24       	eor	r15, r15
    420a:	87 01       	movw	r16, r14
    420c:	2a 2d       	mov	r18, r10
    420e:	3b 2d       	mov	r19, r11
    4210:	4c 2d       	mov	r20, r12
    4212:	5d 2d       	mov	r21, r13
    4214:	6e 2d       	mov	r22, r14
    4216:	7f 2d       	mov	r23, r15
    4218:	80 2f       	mov	r24, r16
    421a:	91 2f       	mov	r25, r17
    421c:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <LCD_WriteNum>
		LCD_WriteString("  ");
    4220:	86 e7       	ldi	r24, 0x76	; 118
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <LCD_WriteString>
    4228:	90 c2       	rjmp	.+1312   	; 0x474a <FireAlarm_Runnable+0x6e2>


	}
	else if(System_Flag==SYSTEM_HEAT)
    422a:	80 91 3e 02 	lds	r24, 0x023E
    422e:	81 30       	cpi	r24, 0x01	; 1
    4230:	09 f0       	breq	.+2      	; 0x4234 <FireAlarm_Runnable+0x1cc>
    4232:	70 c0       	rjmp	.+224    	; 0x4314 <FireAlarm_Runnable+0x2ac>
	{
		LCD_WriteStringGoTo(0,2,"SYSTEM Heat");
    4234:	29 e7       	ldi	r18, 0x79	; 121
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	62 e0       	ldi	r22, 0x02	; 2
    423c:	a9 01       	movw	r20, r18
    423e:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
		DIO_WritePin(LED_FINE,LOW);
    4242:	88 e0       	ldi	r24, 0x08	; 8
    4244:	60 e0       	ldi	r22, 0x00	; 0
    4246:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
		DIO_WritePin(LED_HEAT,HIGH);
    424a:	85 e1       	ldi	r24, 0x15	; 21
    424c:	61 e0       	ldi	r22, 0x01	; 1
    424e:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
		DIO_WritePin(LED_FIRE,LOW);
    4252:	89 e0       	ldi	r24, 0x09	; 9
    4254:	60 e0       	ldi	r22, 0x00	; 0
    4256:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
		MOTOR_Stop(M1);
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <MOTOR_Stop>
		LCD_WriteStringGoTo(1,0,"TEMP=");
    4260:	2c e6       	ldi	r18, 0x6C	; 108
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	81 e0       	ldi	r24, 0x01	; 1
    4266:	60 e0       	ldi	r22, 0x00	; 0
    4268:	a9 01       	movw	r20, r18
    426a:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
		LCD_WriteNum(Temp/10);
    426e:	80 91 56 02 	lds	r24, 0x0256
    4272:	90 91 57 02 	lds	r25, 0x0257
    4276:	2a e0       	ldi	r18, 0x0A	; 10
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	b9 01       	movw	r22, r18
    427c:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    4280:	cb 01       	movw	r24, r22
    4282:	5c 01       	movw	r10, r24
    4284:	cc 24       	eor	r12, r12
    4286:	dd 24       	eor	r13, r13
    4288:	ee 24       	eor	r14, r14
    428a:	ff 24       	eor	r15, r15
    428c:	87 01       	movw	r16, r14
    428e:	2a 2d       	mov	r18, r10
    4290:	3b 2d       	mov	r19, r11
    4292:	4c 2d       	mov	r20, r12
    4294:	5d 2d       	mov	r21, r13
    4296:	6e 2d       	mov	r22, r14
    4298:	7f 2d       	mov	r23, r15
    429a:	80 2f       	mov	r24, r16
    429c:	91 2f       	mov	r25, r17
    429e:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <LCD_WriteNum>
		LCD_WriteChar('.');
    42a2:	8e e2       	ldi	r24, 0x2E	; 46
    42a4:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
		LCD_WriteNum(Temp%10);
    42a8:	80 91 56 02 	lds	r24, 0x0256
    42ac:	90 91 57 02 	lds	r25, 0x0257
    42b0:	2a e0       	ldi	r18, 0x0A	; 10
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	b9 01       	movw	r22, r18
    42b6:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    42ba:	5c 01       	movw	r10, r24
    42bc:	cc 24       	eor	r12, r12
    42be:	dd 24       	eor	r13, r13
    42c0:	ee 24       	eor	r14, r14
    42c2:	ff 24       	eor	r15, r15
    42c4:	87 01       	movw	r16, r14
    42c6:	2a 2d       	mov	r18, r10
    42c8:	3b 2d       	mov	r19, r11
    42ca:	4c 2d       	mov	r20, r12
    42cc:	5d 2d       	mov	r21, r13
    42ce:	6e 2d       	mov	r22, r14
    42d0:	7f 2d       	mov	r23, r15
    42d2:	80 2f       	mov	r24, r16
    42d4:	91 2f       	mov	r25, r17
    42d6:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <LCD_WriteNum>
		LCD_WriteString(" P=");
    42da:	82 e7       	ldi	r24, 0x72	; 114
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <LCD_WriteString>
		LCD_WriteNum(pot);
    42e2:	80 91 58 02 	lds	r24, 0x0258
    42e6:	90 91 59 02 	lds	r25, 0x0259
    42ea:	5c 01       	movw	r10, r24
    42ec:	cc 24       	eor	r12, r12
    42ee:	dd 24       	eor	r13, r13
    42f0:	ee 24       	eor	r14, r14
    42f2:	ff 24       	eor	r15, r15
    42f4:	87 01       	movw	r16, r14
    42f6:	2a 2d       	mov	r18, r10
    42f8:	3b 2d       	mov	r19, r11
    42fa:	4c 2d       	mov	r20, r12
    42fc:	5d 2d       	mov	r21, r13
    42fe:	6e 2d       	mov	r22, r14
    4300:	7f 2d       	mov	r23, r15
    4302:	80 2f       	mov	r24, r16
    4304:	91 2f       	mov	r25, r17
    4306:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <LCD_WriteNum>
		LCD_WriteString("  ");
    430a:	86 e7       	ldi	r24, 0x76	; 118
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <LCD_WriteString>
    4312:	1b c2       	rjmp	.+1078   	; 0x474a <FireAlarm_Runnable+0x6e2>


	}
	else if(System_Flag==SYSTEM_FIRE)
    4314:	80 91 3e 02 	lds	r24, 0x023E
    4318:	82 30       	cpi	r24, 0x02	; 2
    431a:	09 f0       	breq	.+2      	; 0x431e <FireAlarm_Runnable+0x2b6>
    431c:	74 c0       	rjmp	.+232    	; 0x4406 <FireAlarm_Runnable+0x39e>
	{
		LCD_WriteStringGoTo(0,2,"SYSTEM FIRE");
    431e:	25 e8       	ldi	r18, 0x85	; 133
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	80 e0       	ldi	r24, 0x00	; 0
    4324:	62 e0       	ldi	r22, 0x02	; 2
    4326:	a9 01       	movw	r20, r18
    4328:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
		DIO_WritePin(LED_FINE,LOW);
    432c:	88 e0       	ldi	r24, 0x08	; 8
    432e:	60 e0       	ldi	r22, 0x00	; 0
    4330:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
		DIO_WritePin(LED_HEAT,LOW);
    4334:	85 e1       	ldi	r24, 0x15	; 21
    4336:	60 e0       	ldi	r22, 0x00	; 0
    4338:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
		DIO_WritePin(LED_FIRE,HIGH);
    433c:	89 e0       	ldi	r24, 0x09	; 9
    433e:	61 e0       	ldi	r22, 0x01	; 1
    4340:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
		MOTOR_Cw(M1);
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	0e 94 44 35 	call	0x6a88	; 0x6a88 <MOTOR_Cw>
		LCD_WriteStringGoTo(1,0,"TEMP=");
    434a:	2c e6       	ldi	r18, 0x6C	; 108
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	81 e0       	ldi	r24, 0x01	; 1
    4350:	60 e0       	ldi	r22, 0x00	; 0
    4352:	a9 01       	movw	r20, r18
    4354:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
		LCD_WriteNum(Temp/10);
    4358:	80 91 56 02 	lds	r24, 0x0256
    435c:	90 91 57 02 	lds	r25, 0x0257
    4360:	2a e0       	ldi	r18, 0x0A	; 10
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	b9 01       	movw	r22, r18
    4366:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    436a:	cb 01       	movw	r24, r22
    436c:	5c 01       	movw	r10, r24
    436e:	cc 24       	eor	r12, r12
    4370:	dd 24       	eor	r13, r13
    4372:	ee 24       	eor	r14, r14
    4374:	ff 24       	eor	r15, r15
    4376:	87 01       	movw	r16, r14
    4378:	2a 2d       	mov	r18, r10
    437a:	3b 2d       	mov	r19, r11
    437c:	4c 2d       	mov	r20, r12
    437e:	5d 2d       	mov	r21, r13
    4380:	6e 2d       	mov	r22, r14
    4382:	7f 2d       	mov	r23, r15
    4384:	80 2f       	mov	r24, r16
    4386:	91 2f       	mov	r25, r17
    4388:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <LCD_WriteNum>
		LCD_WriteChar('.');
    438c:	8e e2       	ldi	r24, 0x2E	; 46
    438e:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
		LCD_WriteNum(Temp%10);
    4392:	80 91 56 02 	lds	r24, 0x0256
    4396:	90 91 57 02 	lds	r25, 0x0257
    439a:	2a e0       	ldi	r18, 0x0A	; 10
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	b9 01       	movw	r22, r18
    43a0:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    43a4:	5c 01       	movw	r10, r24
    43a6:	cc 24       	eor	r12, r12
    43a8:	dd 24       	eor	r13, r13
    43aa:	ee 24       	eor	r14, r14
    43ac:	ff 24       	eor	r15, r15
    43ae:	87 01       	movw	r16, r14
    43b0:	2a 2d       	mov	r18, r10
    43b2:	3b 2d       	mov	r19, r11
    43b4:	4c 2d       	mov	r20, r12
    43b6:	5d 2d       	mov	r21, r13
    43b8:	6e 2d       	mov	r22, r14
    43ba:	7f 2d       	mov	r23, r15
    43bc:	80 2f       	mov	r24, r16
    43be:	91 2f       	mov	r25, r17
    43c0:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <LCD_WriteNum>
		LCD_WriteString(" P=");
    43c4:	82 e7       	ldi	r24, 0x72	; 114
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <LCD_WriteString>
		LCD_WriteNum(pot);
    43cc:	80 91 58 02 	lds	r24, 0x0258
    43d0:	90 91 59 02 	lds	r25, 0x0259
    43d4:	5c 01       	movw	r10, r24
    43d6:	cc 24       	eor	r12, r12
    43d8:	dd 24       	eor	r13, r13
    43da:	ee 24       	eor	r14, r14
    43dc:	ff 24       	eor	r15, r15
    43de:	87 01       	movw	r16, r14
    43e0:	2a 2d       	mov	r18, r10
    43e2:	3b 2d       	mov	r19, r11
    43e4:	4c 2d       	mov	r20, r12
    43e6:	5d 2d       	mov	r21, r13
    43e8:	6e 2d       	mov	r22, r14
    43ea:	7f 2d       	mov	r23, r15
    43ec:	80 2f       	mov	r24, r16
    43ee:	91 2f       	mov	r25, r17
    43f0:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <LCD_WriteNum>
		LCD_WriteString("  ");
    43f4:	86 e7       	ldi	r24, 0x76	; 118
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <LCD_WriteString>

		UART_SendString("Fire");
    43fc:	81 e9       	ldi	r24, 0x91	; 145
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <UART_SendString>
    4404:	a2 c1       	rjmp	.+836    	; 0x474a <FireAlarm_Runnable+0x6e2>


	}
	else if(System_Flag==SYSTEM_FIRE_FINE)
    4406:	80 91 3e 02 	lds	r24, 0x023E
    440a:	83 30       	cpi	r24, 0x03	; 3
    440c:	09 f0       	breq	.+2      	; 0x4410 <FireAlarm_Runnable+0x3a8>
    440e:	5d c1       	rjmp	.+698    	; 0x46ca <FireAlarm_Runnable+0x662>
	{

		LCD_WriteStringGoTo(0,0,"please enter 1");
    4410:	26 e9       	ldi	r18, 0x96	; 150
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	80 e0       	ldi	r24, 0x00	; 0
    4416:	60 e0       	ldi	r22, 0x00	; 0
    4418:	a9 01       	movw	r20, r18
    441a:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
		LCD_WriteStringGoTo(1,0,"to close motor");
    441e:	25 ea       	ldi	r18, 0xA5	; 165
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	60 e0       	ldi	r22, 0x00	; 0
    4426:	a9 01       	movw	r20, r18
    4428:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
		key=KEYPAD_GetKey();
    442c:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <KEYPAD_GetKey>
    4430:	80 93 5a 02 	sts	0x025A, r24
		if(key!=NO_KEY)
    4434:	80 91 5a 02 	lds	r24, 0x025A
    4438:	84 35       	cpi	r24, 0x54	; 84
    443a:	09 f4       	brne	.+2      	; 0x443e <FireAlarm_Runnable+0x3d6>
    443c:	86 c1       	rjmp	.+780    	; 0x474a <FireAlarm_Runnable+0x6e2>
		{



			if(key=='1')
    443e:	80 91 5a 02 	lds	r24, 0x025A
    4442:	81 33       	cpi	r24, 0x31	; 49
    4444:	09 f0       	breq	.+2      	; 0x4448 <FireAlarm_Runnable+0x3e0>
    4446:	81 c1       	rjmp	.+770    	; 0x474a <FireAlarm_Runnable+0x6e2>
			{
				LCD_Clear();
    4448:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <LCD_Clear>
				LCD_WriteStringGoTo(0,0,"Enter Pass:");
    444c:	24 eb       	ldi	r18, 0xB4	; 180
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	80 e0       	ldi	r24, 0x00	; 0
    4452:	60 e0       	ldi	r22, 0x00	; 0
    4454:	a9 01       	movw	r20, r18
    4456:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
				while(1)
				{
					key=KEYPAD_GetKey();
    445a:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <KEYPAD_GetKey>
    445e:	80 93 5a 02 	sts	0x025A, r24
					if(key!=NO_KEY)
    4462:	80 91 5a 02 	lds	r24, 0x025A
    4466:	84 35       	cpi	r24, 0x54	; 84
    4468:	c1 f3       	breq	.-16     	; 0x445a <FireAlarm_Runnable+0x3f2>
					{
						if(key>='0'&&key<='9')
    446a:	80 91 5a 02 	lds	r24, 0x025A
    446e:	80 33       	cpi	r24, 0x30	; 48
    4470:	b0 f0       	brcs	.+44     	; 0x449e <FireAlarm_Runnable+0x436>
    4472:	80 91 5a 02 	lds	r24, 0x025A
    4476:	8a 33       	cpi	r24, 0x3A	; 58
    4478:	90 f4       	brcc	.+36     	; 0x449e <FireAlarm_Runnable+0x436>
						{
							pass[pass_index++]=key;
    447a:	30 91 54 02 	lds	r19, 0x0254
    447e:	83 2f       	mov	r24, r19
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	20 91 5a 02 	lds	r18, 0x025A
    4486:	fc 01       	movw	r30, r24
    4488:	e6 5b       	subi	r30, 0xB6	; 182
    448a:	fd 4f       	sbci	r31, 0xFD	; 253
    448c:	20 83       	st	Z, r18
    448e:	83 2f       	mov	r24, r19
    4490:	8f 5f       	subi	r24, 0xFF	; 255
    4492:	80 93 54 02 	sts	0x0254, r24
							LCD_WriteChar(key);
    4496:	80 91 5a 02 	lds	r24, 0x025A
    449a:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
						}
						if(key=='=')
    449e:	80 91 5a 02 	lds	r24, 0x025A
    44a2:	8d 33       	cpi	r24, 0x3D	; 61
    44a4:	d1 f6       	brne	.-76     	; 0x445a <FireAlarm_Runnable+0x3f2>
						{
							pass[pass_index]=0;
    44a6:	80 91 54 02 	lds	r24, 0x0254
    44aa:	88 2f       	mov	r24, r24
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	fc 01       	movw	r30, r24
    44b0:	e6 5b       	subi	r30, 0xB6	; 182
    44b2:	fd 4f       	sbci	r31, 0xFD	; 253
    44b4:	10 82       	st	Z, r1
							pass_index=0;
    44b6:	10 92 54 02 	sts	0x0254, r1
							break;
						}
					}

				}
				if(String_Cmpr(pass,pass_EEPROM)==STRING_SAME)
    44ba:	8a e4       	ldi	r24, 0x4A	; 74
    44bc:	92 e0       	ldi	r25, 0x02	; 2
    44be:	20 e4       	ldi	r18, 0x40	; 64
    44c0:	32 e0       	ldi	r19, 0x02	; 2
    44c2:	b9 01       	movw	r22, r18
    44c4:	0e 94 93 36 	call	0x6d26	; 0x6d26 <String_Cmpr>
    44c8:	88 23       	and	r24, r24
    44ca:	09 f0       	breq	.+2      	; 0x44ce <FireAlarm_Runnable+0x466>
    44cc:	82 c0       	rjmp	.+260    	; 0x45d2 <FireAlarm_Runnable+0x56a>
				{
					LCD_Clear();
    44ce:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <LCD_Clear>
					LCD_WriteStringGoTo(0,0,"PASS OK");
    44d2:	20 ec       	ldi	r18, 0xC0	; 192
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	80 e0       	ldi	r24, 0x00	; 0
    44d8:	60 e0       	ldi	r22, 0x00	; 0
    44da:	a9 01       	movw	r20, r18
    44dc:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
					Flag_FireState=0;
    44e0:	10 92 3f 02 	sts	0x023F, r1
					System_Flag=SYSTEM_FINE;
    44e4:	10 92 3e 02 	sts	0x023E, r1
    44e8:	80 e0       	ldi	r24, 0x00	; 0
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	aa ef       	ldi	r26, 0xFA	; 250
    44ee:	b4 e4       	ldi	r27, 0x44	; 68
    44f0:	89 8f       	std	Y+25, r24	; 0x19
    44f2:	9a 8f       	std	Y+26, r25	; 0x1a
    44f4:	ab 8f       	std	Y+27, r26	; 0x1b
    44f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44f8:	69 8d       	ldd	r22, Y+25	; 0x19
    44fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4500:	20 e0       	ldi	r18, 0x00	; 0
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	4a ef       	ldi	r20, 0xFA	; 250
    4506:	54 e4       	ldi	r21, 0x44	; 68
    4508:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    450c:	dc 01       	movw	r26, r24
    450e:	cb 01       	movw	r24, r22
    4510:	8d 8b       	std	Y+21, r24	; 0x15
    4512:	9e 8b       	std	Y+22, r25	; 0x16
    4514:	af 8b       	std	Y+23, r26	; 0x17
    4516:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4518:	6d 89       	ldd	r22, Y+21	; 0x15
    451a:	7e 89       	ldd	r23, Y+22	; 0x16
    451c:	8f 89       	ldd	r24, Y+23	; 0x17
    451e:	98 8d       	ldd	r25, Y+24	; 0x18
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	40 e8       	ldi	r20, 0x80	; 128
    4526:	5f e3       	ldi	r21, 0x3F	; 63
    4528:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    452c:	88 23       	and	r24, r24
    452e:	2c f4       	brge	.+10     	; 0x453a <FireAlarm_Runnable+0x4d2>
		__ticks = 1;
    4530:	81 e0       	ldi	r24, 0x01	; 1
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	9c 8b       	std	Y+20, r25	; 0x14
    4536:	8b 8b       	std	Y+19, r24	; 0x13
    4538:	3f c0       	rjmp	.+126    	; 0x45b8 <FireAlarm_Runnable+0x550>
	else if (__tmp > 65535)
    453a:	6d 89       	ldd	r22, Y+21	; 0x15
    453c:	7e 89       	ldd	r23, Y+22	; 0x16
    453e:	8f 89       	ldd	r24, Y+23	; 0x17
    4540:	98 8d       	ldd	r25, Y+24	; 0x18
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	3f ef       	ldi	r19, 0xFF	; 255
    4546:	4f e7       	ldi	r20, 0x7F	; 127
    4548:	57 e4       	ldi	r21, 0x47	; 71
    454a:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    454e:	18 16       	cp	r1, r24
    4550:	4c f5       	brge	.+82     	; 0x45a4 <FireAlarm_Runnable+0x53c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4552:	69 8d       	ldd	r22, Y+25	; 0x19
    4554:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4556:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4558:	9c 8d       	ldd	r25, Y+28	; 0x1c
    455a:	20 e0       	ldi	r18, 0x00	; 0
    455c:	30 e0       	ldi	r19, 0x00	; 0
    455e:	40 e2       	ldi	r20, 0x20	; 32
    4560:	51 e4       	ldi	r21, 0x41	; 65
    4562:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	bc 01       	movw	r22, r24
    456c:	cd 01       	movw	r24, r26
    456e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4572:	dc 01       	movw	r26, r24
    4574:	cb 01       	movw	r24, r22
    4576:	9c 8b       	std	Y+20, r25	; 0x14
    4578:	8b 8b       	std	Y+19, r24	; 0x13
    457a:	0f c0       	rjmp	.+30     	; 0x459a <FireAlarm_Runnable+0x532>
    457c:	88 ec       	ldi	r24, 0xC8	; 200
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	9a 8b       	std	Y+18, r25	; 0x12
    4582:	89 8b       	std	Y+17, r24	; 0x11
    4584:	89 89       	ldd	r24, Y+17	; 0x11
    4586:	9a 89       	ldd	r25, Y+18	; 0x12
    4588:	01 97       	sbiw	r24, 0x01	; 1
    458a:	f1 f7       	brne	.-4      	; 0x4588 <FireAlarm_Runnable+0x520>
    458c:	9a 8b       	std	Y+18, r25	; 0x12
    458e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4590:	8b 89       	ldd	r24, Y+19	; 0x13
    4592:	9c 89       	ldd	r25, Y+20	; 0x14
    4594:	01 97       	sbiw	r24, 0x01	; 1
    4596:	9c 8b       	std	Y+20, r25	; 0x14
    4598:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    459a:	8b 89       	ldd	r24, Y+19	; 0x13
    459c:	9c 89       	ldd	r25, Y+20	; 0x14
    459e:	00 97       	sbiw	r24, 0x00	; 0
    45a0:	69 f7       	brne	.-38     	; 0x457c <FireAlarm_Runnable+0x514>
    45a2:	14 c0       	rjmp	.+40     	; 0x45cc <FireAlarm_Runnable+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a4:	6d 89       	ldd	r22, Y+21	; 0x15
    45a6:	7e 89       	ldd	r23, Y+22	; 0x16
    45a8:	8f 89       	ldd	r24, Y+23	; 0x17
    45aa:	98 8d       	ldd	r25, Y+24	; 0x18
    45ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	9c 8b       	std	Y+20, r25	; 0x14
    45b6:	8b 8b       	std	Y+19, r24	; 0x13
    45b8:	8b 89       	ldd	r24, Y+19	; 0x13
    45ba:	9c 89       	ldd	r25, Y+20	; 0x14
    45bc:	98 8b       	std	Y+16, r25	; 0x10
    45be:	8f 87       	std	Y+15, r24	; 0x0f
    45c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    45c2:	98 89       	ldd	r25, Y+16	; 0x10
    45c4:	01 97       	sbiw	r24, 0x01	; 1
    45c6:	f1 f7       	brne	.-4      	; 0x45c4 <FireAlarm_Runnable+0x55c>
    45c8:	98 8b       	std	Y+16, r25	; 0x10
    45ca:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(2000);
					LCD_Clear();
    45cc:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <LCD_Clear>
    45d0:	bc c0       	rjmp	.+376    	; 0x474a <FireAlarm_Runnable+0x6e2>


				}
				else
				{
					LCD_Clear();
    45d2:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <LCD_Clear>
					LCD_WriteStringGoTo(0,0,"PASS wrong");
    45d6:	28 ec       	ldi	r18, 0xC8	; 200
    45d8:	30 e0       	ldi	r19, 0x00	; 0
    45da:	80 e0       	ldi	r24, 0x00	; 0
    45dc:	60 e0       	ldi	r22, 0x00	; 0
    45de:	a9 01       	movw	r20, r18
    45e0:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	aa ef       	ldi	r26, 0xFA	; 250
    45ea:	b4 e4       	ldi	r27, 0x44	; 68
    45ec:	8b 87       	std	Y+11, r24	; 0x0b
    45ee:	9c 87       	std	Y+12, r25	; 0x0c
    45f0:	ad 87       	std	Y+13, r26	; 0x0d
    45f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    45f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    45f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    45fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	4a ef       	ldi	r20, 0xFA	; 250
    4602:	54 e4       	ldi	r21, 0x44	; 68
    4604:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4608:	dc 01       	movw	r26, r24
    460a:	cb 01       	movw	r24, r22
    460c:	8f 83       	std	Y+7, r24	; 0x07
    460e:	98 87       	std	Y+8, r25	; 0x08
    4610:	a9 87       	std	Y+9, r26	; 0x09
    4612:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4614:	6f 81       	ldd	r22, Y+7	; 0x07
    4616:	78 85       	ldd	r23, Y+8	; 0x08
    4618:	89 85       	ldd	r24, Y+9	; 0x09
    461a:	9a 85       	ldd	r25, Y+10	; 0x0a
    461c:	20 e0       	ldi	r18, 0x00	; 0
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	40 e8       	ldi	r20, 0x80	; 128
    4622:	5f e3       	ldi	r21, 0x3F	; 63
    4624:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    4628:	88 23       	and	r24, r24
    462a:	2c f4       	brge	.+10     	; 0x4636 <FireAlarm_Runnable+0x5ce>
		__ticks = 1;
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	9e 83       	std	Y+6, r25	; 0x06
    4632:	8d 83       	std	Y+5, r24	; 0x05
    4634:	3f c0       	rjmp	.+126    	; 0x46b4 <FireAlarm_Runnable+0x64c>
	else if (__tmp > 65535)
    4636:	6f 81       	ldd	r22, Y+7	; 0x07
    4638:	78 85       	ldd	r23, Y+8	; 0x08
    463a:	89 85       	ldd	r24, Y+9	; 0x09
    463c:	9a 85       	ldd	r25, Y+10	; 0x0a
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	3f ef       	ldi	r19, 0xFF	; 255
    4642:	4f e7       	ldi	r20, 0x7F	; 127
    4644:	57 e4       	ldi	r21, 0x47	; 71
    4646:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    464a:	18 16       	cp	r1, r24
    464c:	4c f5       	brge	.+82     	; 0x46a0 <FireAlarm_Runnable+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    464e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4650:	7c 85       	ldd	r23, Y+12	; 0x0c
    4652:	8d 85       	ldd	r24, Y+13	; 0x0d
    4654:	9e 85       	ldd	r25, Y+14	; 0x0e
    4656:	20 e0       	ldi	r18, 0x00	; 0
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	40 e2       	ldi	r20, 0x20	; 32
    465c:	51 e4       	ldi	r21, 0x41	; 65
    465e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4662:	dc 01       	movw	r26, r24
    4664:	cb 01       	movw	r24, r22
    4666:	bc 01       	movw	r22, r24
    4668:	cd 01       	movw	r24, r26
    466a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    466e:	dc 01       	movw	r26, r24
    4670:	cb 01       	movw	r24, r22
    4672:	9e 83       	std	Y+6, r25	; 0x06
    4674:	8d 83       	std	Y+5, r24	; 0x05
    4676:	0f c0       	rjmp	.+30     	; 0x4696 <FireAlarm_Runnable+0x62e>
    4678:	88 ec       	ldi	r24, 0xC8	; 200
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	9c 83       	std	Y+4, r25	; 0x04
    467e:	8b 83       	std	Y+3, r24	; 0x03
    4680:	8b 81       	ldd	r24, Y+3	; 0x03
    4682:	9c 81       	ldd	r25, Y+4	; 0x04
    4684:	01 97       	sbiw	r24, 0x01	; 1
    4686:	f1 f7       	brne	.-4      	; 0x4684 <FireAlarm_Runnable+0x61c>
    4688:	9c 83       	std	Y+4, r25	; 0x04
    468a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    468c:	8d 81       	ldd	r24, Y+5	; 0x05
    468e:	9e 81       	ldd	r25, Y+6	; 0x06
    4690:	01 97       	sbiw	r24, 0x01	; 1
    4692:	9e 83       	std	Y+6, r25	; 0x06
    4694:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4696:	8d 81       	ldd	r24, Y+5	; 0x05
    4698:	9e 81       	ldd	r25, Y+6	; 0x06
    469a:	00 97       	sbiw	r24, 0x00	; 0
    469c:	69 f7       	brne	.-38     	; 0x4678 <FireAlarm_Runnable+0x610>
    469e:	55 c0       	rjmp	.+170    	; 0x474a <FireAlarm_Runnable+0x6e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a0:	6f 81       	ldd	r22, Y+7	; 0x07
    46a2:	78 85       	ldd	r23, Y+8	; 0x08
    46a4:	89 85       	ldd	r24, Y+9	; 0x09
    46a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ac:	dc 01       	movw	r26, r24
    46ae:	cb 01       	movw	r24, r22
    46b0:	9e 83       	std	Y+6, r25	; 0x06
    46b2:	8d 83       	std	Y+5, r24	; 0x05
    46b4:	8d 81       	ldd	r24, Y+5	; 0x05
    46b6:	9e 81       	ldd	r25, Y+6	; 0x06
    46b8:	9a 83       	std	Y+2, r25	; 0x02
    46ba:	89 83       	std	Y+1, r24	; 0x01
    46bc:	89 81       	ldd	r24, Y+1	; 0x01
    46be:	9a 81       	ldd	r25, Y+2	; 0x02
    46c0:	01 97       	sbiw	r24, 0x01	; 1
    46c2:	f1 f7       	brne	.-4      	; 0x46c0 <FireAlarm_Runnable+0x658>
    46c4:	9a 83       	std	Y+2, r25	; 0x02
    46c6:	89 83       	std	Y+1, r24	; 0x01
    46c8:	40 c0       	rjmp	.+128    	; 0x474a <FireAlarm_Runnable+0x6e2>




	}
	else if(System_Flag==SYSTEM_NEWPASS)
    46ca:	80 91 3e 02 	lds	r24, 0x023E
    46ce:	84 30       	cpi	r24, 0x04	; 4
    46d0:	e1 f5       	brne	.+120    	; 0x474a <FireAlarm_Runnable+0x6e2>
	{
		LCD_Clear();
    46d2:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <LCD_Clear>
			LCD_WriteStringGoTo(0,0,"NewPass:");
    46d6:	23 ed       	ldi	r18, 0xD3	; 211
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	60 e0       	ldi	r22, 0x00	; 0
    46de:	a9 01       	movw	r20, r18
    46e0:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>
			u8 i=0;
    46e4:	1d 8e       	std	Y+29, r1	; 0x1d
			while(1)
			{
				key=KEYPAD_GetKey();
    46e6:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <KEYPAD_GetKey>
    46ea:	80 93 5a 02 	sts	0x025A, r24
				if(key!=NO_KEY)
    46ee:	80 91 5a 02 	lds	r24, 0x025A
    46f2:	84 35       	cpi	r24, 0x54	; 84
    46f4:	c1 f3       	breq	.-16     	; 0x46e6 <FireAlarm_Runnable+0x67e>
				{
					if(key>='0'&&key<='9')
    46f6:	80 91 5a 02 	lds	r24, 0x025A
    46fa:	80 33       	cpi	r24, 0x30	; 48
    46fc:	a0 f3       	brcs	.-24     	; 0x46e6 <FireAlarm_Runnable+0x67e>
    46fe:	80 91 5a 02 	lds	r24, 0x025A
    4702:	8a 33       	cpi	r24, 0x3A	; 58
    4704:	80 f7       	brcc	.-32     	; 0x46e6 <FireAlarm_Runnable+0x67e>
					{
						EEPROM_WriteChar(i++,key);
    4706:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4708:	8d 8d       	ldd	r24, Y+29	; 0x1d
    470a:	8f 5f       	subi	r24, 0xFF	; 255
    470c:	8d 8f       	std	Y+29, r24	; 0x1d
    470e:	90 91 5a 02 	lds	r25, 0x025A
    4712:	82 2f       	mov	r24, r18
    4714:	69 2f       	mov	r22, r25
    4716:	0e 94 c4 1c 	call	0x3988	; 0x3988 <EEPROM_WriteChar>
						LCD_WriteChar(key);
    471a:	80 91 5a 02 	lds	r24, 0x025A
    471e:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
						if(i==3)
    4722:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4724:	83 30       	cpi	r24, 0x03	; 3
    4726:	f9 f6       	brne	.-66     	; 0x46e6 <FireAlarm_Runnable+0x67e>
						{
							LCD_Clear();
    4728:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <LCD_Clear>
							LCD_WriteStringGoTo(0,0,"Passchange:");
    472c:	2c ed       	ldi	r18, 0xDC	; 220
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	80 e0       	ldi	r24, 0x00	; 0
    4732:	60 e0       	ldi	r22, 0x00	; 0
    4734:	a9 01       	movw	r20, r18
    4736:	0e 94 19 33 	call	0x6632	; 0x6632 <LCD_WriteStringGoTo>

							Pass_Flag=0;
    473a:	10 92 55 02 	sts	0x0255, r1
							System_Flag=SYSTEM_FINE;
    473e:	10 92 3e 02 	sts	0x023E, r1
							WDT_Reset(WDT_TIMEOUT_16MS);
    4742:	80 e0       	ldi	r24, 0x00	; 0
    4744:	0e 94 c2 3c 	call	0x7984	; 0x7984 <WDT_Reset>
    4748:	ff cf       	rjmp	.-2      	; 0x4748 <FireAlarm_Runnable+0x6e0>





}
    474a:	6d 96       	adiw	r28, 0x1d	; 29
    474c:	0f b6       	in	r0, 0x3f	; 63
    474e:	f8 94       	cli
    4750:	de bf       	out	0x3e, r29	; 62
    4752:	0f be       	out	0x3f, r0	; 63
    4754:	cd bf       	out	0x3d, r28	; 61
    4756:	cf 91       	pop	r28
    4758:	df 91       	pop	r29
    475a:	1f 91       	pop	r17
    475c:	0f 91       	pop	r16
    475e:	ff 90       	pop	r15
    4760:	ef 90       	pop	r14
    4762:	df 90       	pop	r13
    4764:	cf 90       	pop	r12
    4766:	bf 90       	pop	r11
    4768:	af 90       	pop	r10
    476a:	08 95       	ret

0000476c <I2C_Master_voidInit>:
#include "I2C_Interface.h"
#include "I2C_Private.h"


void I2C_Master_voidInit(u8 address)
{
    476c:	df 93       	push	r29
    476e:	cf 93       	push	r28
    4770:	0f 92       	push	r0
    4772:	cd b7       	in	r28, 0x3d	; 61
    4774:	de b7       	in	r29, 0x3e	; 62
    4776:	89 83       	std	Y+1, r24	; 0x01
	TWBR=2; // >>>>  scl for i2c and prescaller =1 >> for 400 Khz  >> TWPS0 & TWPS1 ==0
    4778:	e0 e2       	ldi	r30, 0x20	; 32
    477a:	f0 e0       	ldi	r31, 0x00	; 0
    477c:	82 e0       	ldi	r24, 0x02	; 2
    477e:	80 83       	st	Z, r24
	// General call enable
	
	// SET_BIT(TWAR,TWGCE);
	
	//SET ADDRESS
	address<<=1;
    4780:	89 81       	ldd	r24, Y+1	; 0x01
    4782:	88 0f       	add	r24, r24
    4784:	89 83       	std	Y+1, r24	; 0x01
	TWAR|=address;
    4786:	a2 e2       	ldi	r26, 0x22	; 34
    4788:	b0 e0       	ldi	r27, 0x00	; 0
    478a:	e2 e2       	ldi	r30, 0x22	; 34
    478c:	f0 e0       	ldi	r31, 0x00	; 0
    478e:	90 81       	ld	r25, Z
    4790:	89 81       	ldd	r24, Y+1	; 0x01
    4792:	89 2b       	or	r24, r25
    4794:	8c 93       	st	X, r24
	
	//I2C Enable
	SET_BIT(TWCR,TWEN);
    4796:	a6 e5       	ldi	r26, 0x56	; 86
    4798:	b0 e0       	ldi	r27, 0x00	; 0
    479a:	e6 e5       	ldi	r30, 0x56	; 86
    479c:	f0 e0       	ldi	r31, 0x00	; 0
    479e:	80 81       	ld	r24, Z
    47a0:	84 60       	ori	r24, 0x04	; 4
    47a2:	8c 93       	st	X, r24

}
    47a4:	0f 90       	pop	r0
    47a6:	cf 91       	pop	r28
    47a8:	df 91       	pop	r29
    47aa:	08 95       	ret

000047ac <I2C_Slave_voidInit>:

void I2C_Slave_voidInit(u8 I2C_Address)
{
    47ac:	df 93       	push	r29
    47ae:	cf 93       	push	r28
    47b0:	0f 92       	push	r0
    47b2:	cd b7       	in	r28, 0x3d	; 61
    47b4:	de b7       	in	r29, 0x3e	; 62
    47b6:	89 83       	std	Y+1, r24	; 0x01
	//TWBR=12; // >>>>  scl for i2c and prescaller =1 >> for 400 Khz  >> TWPS0 & TWPS1 ==0
	
	//SET ADDRESS
	I2C_Address<<=1;
    47b8:	89 81       	ldd	r24, Y+1	; 0x01
    47ba:	88 0f       	add	r24, r24
    47bc:	89 83       	std	Y+1, r24	; 0x01
	TWAR|=I2C_Address;
    47be:	a2 e2       	ldi	r26, 0x22	; 34
    47c0:	b0 e0       	ldi	r27, 0x00	; 0
    47c2:	e2 e2       	ldi	r30, 0x22	; 34
    47c4:	f0 e0       	ldi	r31, 0x00	; 0
    47c6:	90 81       	ld	r25, Z
    47c8:	89 81       	ldd	r24, Y+1	; 0x01
    47ca:	89 2b       	or	r24, r25
    47cc:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEA);
    47ce:	a6 e5       	ldi	r26, 0x56	; 86
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	e6 e5       	ldi	r30, 0x56	; 86
    47d4:	f0 e0       	ldi	r31, 0x00	; 0
    47d6:	80 81       	ld	r24, Z
    47d8:	80 64       	ori	r24, 0x40	; 64
    47da:	8c 93       	st	X, r24
	//I2C Enable
	SET_BIT(TWCR,TWEN);
    47dc:	a6 e5       	ldi	r26, 0x56	; 86
    47de:	b0 e0       	ldi	r27, 0x00	; 0
    47e0:	e6 e5       	ldi	r30, 0x56	; 86
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	80 81       	ld	r24, Z
    47e6:	84 60       	ori	r24, 0x04	; 4
    47e8:	8c 93       	st	X, r24
}
    47ea:	0f 90       	pop	r0
    47ec:	cf 91       	pop	r28
    47ee:	df 91       	pop	r29
    47f0:	08 95       	ret

000047f2 <I2C_Master_enuSendStartCond>:

I2C_Error_State   I2C_Master_enuSendStartCond(void)
{
    47f2:	df 93       	push	r29
    47f4:	cf 93       	push	r28
    47f6:	0f 92       	push	r0
    47f8:	cd b7       	in	r28, 0x3d	; 61
    47fa:	de b7       	in	r29, 0x3e	; 62
	// I2C ENABLE
	SET_BIT(TWCR,TWEN);
	// INT Claer
	SET_BIT(TWCR,TWINT);
	*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    47fc:	e6 e5       	ldi	r30, 0x56	; 86
    47fe:	f0 e0       	ldi	r31, 0x00	; 0
    4800:	84 ea       	ldi	r24, 0xA4	; 164
    4802:	80 83       	st	Z, r24
	while (!READ_BIT(TWCR,TWINT));
    4804:	e6 e5       	ldi	r30, 0x56	; 86
    4806:	f0 e0       	ldi	r31, 0x00	; 0
    4808:	80 81       	ld	r24, Z
    480a:	88 23       	and	r24, r24
    480c:	dc f7       	brge	.-10     	; 0x4804 <I2C_Master_enuSendStartCond+0x12>
	
	if ((TWSR&0xf8)!=START_STATE )
    480e:	e1 e2       	ldi	r30, 0x21	; 33
    4810:	f0 e0       	ldi	r31, 0x00	; 0
    4812:	80 81       	ld	r24, Z
    4814:	88 2f       	mov	r24, r24
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	88 7f       	andi	r24, 0xF8	; 248
    481a:	90 70       	andi	r25, 0x00	; 0
    481c:	88 30       	cpi	r24, 0x08	; 8
    481e:	91 05       	cpc	r25, r1
    4820:	19 f0       	breq	.+6      	; 0x4828 <I2C_Master_enuSendStartCond+0x36>
	{
		return I2C_SC_ERROR;
    4822:	81 e0       	ldi	r24, 0x01	; 1
    4824:	89 83       	std	Y+1, r24	; 0x01
    4826:	01 c0       	rjmp	.+2      	; 0x482a <I2C_Master_enuSendStartCond+0x38>
	}
	//CLR_BIT(TWCR,TWSTA);// Make Problem
	return I2C_OK;
    4828:	19 82       	std	Y+1, r1	; 0x01
    482a:	89 81       	ldd	r24, Y+1	; 0x01
}
    482c:	0f 90       	pop	r0
    482e:	cf 91       	pop	r28
    4830:	df 91       	pop	r29
    4832:	08 95       	ret

00004834 <I2C_Master_enuSendRepeatedStartCond>:

I2C_Error_State   I2C_Master_enuSendRepeatedStartCond(void)
{
    4834:	df 93       	push	r29
    4836:	cf 93       	push	r28
    4838:	0f 92       	push	r0
    483a:	cd b7       	in	r28, 0x3d	; 61
    483c:	de b7       	in	r29, 0x3e	; 62
	// I2C ENABLE
	SET_BIT(TWCR,TWEN);
	// INT Claer
	SET_BIT(TWCR,TWINT);
	//*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    483e:	e6 e5       	ldi	r30, 0x56	; 86
    4840:	f0 e0       	ldi	r31, 0x00	; 0
    4842:	84 ea       	ldi	r24, 0xA4	; 164
    4844:	80 83       	st	Z, r24
	while (!READ_BIT(TWCR,TWINT));
    4846:	e6 e5       	ldi	r30, 0x56	; 86
    4848:	f0 e0       	ldi	r31, 0x00	; 0
    484a:	80 81       	ld	r24, Z
    484c:	88 23       	and	r24, r24
    484e:	dc f7       	brge	.-10     	; 0x4846 <I2C_Master_enuSendRepeatedStartCond+0x12>
	
	if ((TWSR&0xf8)!=REP_START_STATE )
    4850:	e1 e2       	ldi	r30, 0x21	; 33
    4852:	f0 e0       	ldi	r31, 0x00	; 0
    4854:	80 81       	ld	r24, Z
    4856:	88 2f       	mov	r24, r24
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	88 7f       	andi	r24, 0xF8	; 248
    485c:	90 70       	andi	r25, 0x00	; 0
    485e:	80 31       	cpi	r24, 0x10	; 16
    4860:	91 05       	cpc	r25, r1
    4862:	19 f0       	breq	.+6      	; 0x486a <I2C_Master_enuSendRepeatedStartCond+0x36>
	{
	return I2C_RSC_ERROR;
    4864:	82 e0       	ldi	r24, 0x02	; 2
    4866:	89 83       	std	Y+1, r24	; 0x01
    4868:	01 c0       	rjmp	.+2      	; 0x486c <I2C_Master_enuSendRepeatedStartCond+0x38>
	}
	return I2C_OK;
    486a:	19 82       	std	Y+1, r1	; 0x01
    486c:	89 81       	ldd	r24, Y+1	; 0x01
}
    486e:	0f 90       	pop	r0
    4870:	cf 91       	pop	r28
    4872:	df 91       	pop	r29
    4874:	08 95       	ret

00004876 <I2C_Master_enuSendSlaveAddressWithWrite>:
}
*/
//EEPROM only

I2C_Error_State   I2C_Master_enuSendSlaveAddressWithWrite(u8 I2C_Address)
{
    4876:	df 93       	push	r29
    4878:	cf 93       	push	r28
    487a:	00 d0       	rcall	.+0      	; 0x487c <I2C_Master_enuSendSlaveAddressWithWrite+0x6>
    487c:	cd b7       	in	r28, 0x3d	; 61
    487e:	de b7       	in	r29, 0x3e	; 62
    4880:	89 83       	std	Y+1, r24	; 0x01

	TWDR=I2C_Address;
    4882:	e3 e2       	ldi	r30, 0x23	; 35
    4884:	f0 e0       	ldi	r31, 0x00	; 0
    4886:	89 81       	ldd	r24, Y+1	; 0x01
    4888:	80 83       	st	Z, r24


	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    488a:	e6 e5       	ldi	r30, 0x56	; 86
    488c:	f0 e0       	ldi	r31, 0x00	; 0
    488e:	84 ec       	ldi	r24, 0xC4	; 196
    4890:	80 83       	st	Z, r24
	while (!READ_BIT(TWCR,TWINT));
    4892:	e6 e5       	ldi	r30, 0x56	; 86
    4894:	f0 e0       	ldi	r31, 0x00	; 0
    4896:	80 81       	ld	r24, Z
    4898:	88 23       	and	r24, r24
    489a:	dc f7       	brge	.-10     	; 0x4892 <I2C_Master_enuSendSlaveAddressWithWrite+0x1c>
	
	if ((TWSR&0xf8)!=SLA_W_ACK_STATE )
    489c:	e1 e2       	ldi	r30, 0x21	; 33
    489e:	f0 e0       	ldi	r31, 0x00	; 0
    48a0:	80 81       	ld	r24, Z
    48a2:	88 2f       	mov	r24, r24
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	88 7f       	andi	r24, 0xF8	; 248
    48a8:	90 70       	andi	r25, 0x00	; 0
    48aa:	88 31       	cpi	r24, 0x18	; 24
    48ac:	91 05       	cpc	r25, r1
    48ae:	19 f0       	breq	.+6      	; 0x48b6 <I2C_Master_enuSendSlaveAddressWithWrite+0x40>
	{
		return I2C_MT_SLA_W_ERROR;
    48b0:	84 e0       	ldi	r24, 0x04	; 4
    48b2:	8a 83       	std	Y+2, r24	; 0x02
    48b4:	01 c0       	rjmp	.+2      	; 0x48b8 <I2C_Master_enuSendSlaveAddressWithWrite+0x42>
	}
	return I2C_OK;
    48b6:	1a 82       	std	Y+2, r1	; 0x02
    48b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    48ba:	0f 90       	pop	r0
    48bc:	0f 90       	pop	r0
    48be:	cf 91       	pop	r28
    48c0:	df 91       	pop	r29
    48c2:	08 95       	ret

000048c4 <I2C_Master_enuSendSlaveAddressWithRead>:
I2C_Error_State   I2C_Master_enuSendSlaveAddressWithRead(u8 I2C_Address)
{
    48c4:	df 93       	push	r29
    48c6:	cf 93       	push	r28
    48c8:	00 d0       	rcall	.+0      	; 0x48ca <I2C_Master_enuSendSlaveAddressWithRead+0x6>
    48ca:	cd b7       	in	r28, 0x3d	; 61
    48cc:	de b7       	in	r29, 0x3e	; 62
    48ce:	89 83       	std	Y+1, r24	; 0x01

	TWDR=I2C_Address|1;
    48d0:	e3 e2       	ldi	r30, 0x23	; 35
    48d2:	f0 e0       	ldi	r31, 0x00	; 0
    48d4:	89 81       	ldd	r24, Y+1	; 0x01
    48d6:	81 60       	ori	r24, 0x01	; 1
    48d8:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
    48da:	a3 e2       	ldi	r26, 0x23	; 35
    48dc:	b0 e0       	ldi	r27, 0x00	; 0
    48de:	e3 e2       	ldi	r30, 0x23	; 35
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	80 81       	ld	r24, Z
    48e4:	81 60       	ori	r24, 0x01	; 1
    48e6:	8c 93       	st	X, r24

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    48e8:	e6 e5       	ldi	r30, 0x56	; 86
    48ea:	f0 e0       	ldi	r31, 0x00	; 0
    48ec:	84 ec       	ldi	r24, 0xC4	; 196
    48ee:	80 83       	st	Z, r24

	while (!READ_BIT(TWCR,TWINT));
    48f0:	e6 e5       	ldi	r30, 0x56	; 86
    48f2:	f0 e0       	ldi	r31, 0x00	; 0
    48f4:	80 81       	ld	r24, Z
    48f6:	88 23       	and	r24, r24
    48f8:	dc f7       	brge	.-10     	; 0x48f0 <I2C_Master_enuSendSlaveAddressWithRead+0x2c>

	if ((TWSR&0xf8)!=SLA_R_ACK_STATE )
    48fa:	e1 e2       	ldi	r30, 0x21	; 33
    48fc:	f0 e0       	ldi	r31, 0x00	; 0
    48fe:	80 81       	ld	r24, Z
    4900:	88 2f       	mov	r24, r24
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	88 7f       	andi	r24, 0xF8	; 248
    4906:	90 70       	andi	r25, 0x00	; 0
    4908:	80 34       	cpi	r24, 0x40	; 64
    490a:	91 05       	cpc	r25, r1
    490c:	19 f0       	breq	.+6      	; 0x4914 <I2C_Master_enuSendSlaveAddressWithRead+0x50>
	{
		return I2C_MT_SLA_R_ERROR;
    490e:	83 e0       	ldi	r24, 0x03	; 3
    4910:	8a 83       	std	Y+2, r24	; 0x02
    4912:	01 c0       	rjmp	.+2      	; 0x4916 <I2C_Master_enuSendSlaveAddressWithRead+0x52>
	}
	return I2C_OK;
    4914:	1a 82       	std	Y+2, r1	; 0x02
    4916:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	cf 91       	pop	r28
    491e:	df 91       	pop	r29
    4920:	08 95       	ret

00004922 <I2C_slave_avilable>:

I2C_Error_State I2C_slave_avilable(void)//TO WRITE
{
    4922:	df 93       	push	r29
    4924:	cf 93       	push	r28
    4926:	0f 92       	push	r0
    4928:	cd b7       	in	r28, 0x3d	; 61
    492a:	de b7       	in	r29, 0x3e	; 62
	//	I2C_Error_State State=I2C_SR_DATA_ERROR;
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);//ACKNOWADG
    492c:	e6 e5       	ldi	r30, 0x56	; 86
    492e:	f0 e0       	ldi	r31, 0x00	; 0
    4930:	84 ec       	ldi	r24, 0xC4	; 196
    4932:	80 83       	st	Z, r24
	// I2C ENABLE
	SET_BIT(TWCR,TWEN);
	// INT Claer
	SET_BIT(TWCR,TWINT);
	*/
	while (!READ_BIT(TWCR,TWINT));
    4934:	e6 e5       	ldi	r30, 0x56	; 86
    4936:	f0 e0       	ldi	r31, 0x00	; 0
    4938:	80 81       	ld	r24, Z
    493a:	88 23       	and	r24, r24
    493c:	dc f7       	brge	.-10     	; 0x4934 <I2C_slave_avilable+0x12>
	if((TWSR & 0xF8) !=  SLA_W_ACK )
    493e:	e1 e2       	ldi	r30, 0x21	; 33
    4940:	f0 e0       	ldi	r31, 0x00	; 0
    4942:	80 81       	ld	r24, Z
    4944:	88 2f       	mov	r24, r24
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	88 7f       	andi	r24, 0xF8	; 248
    494a:	90 70       	andi	r25, 0x00	; 0
    494c:	80 36       	cpi	r24, 0x60	; 96
    494e:	91 05       	cpc	r25, r1
    4950:	19 f0       	breq	.+6      	; 0x4958 <I2C_slave_avilable+0x36>
	{
		return I2C_SR_ADD_ERROR;//I Cant start now
    4952:	88 e0       	ldi	r24, 0x08	; 8
    4954:	89 83       	std	Y+1, r24	; 0x01
    4956:	01 c0       	rjmp	.+2      	; 0x495a <I2C_slave_avilable+0x38>
	}
	return I2C_OK;
    4958:	19 82       	std	Y+1, r1	; 0x01
    495a:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    495c:	0f 90       	pop	r0
    495e:	cf 91       	pop	r28
    4960:	df 91       	pop	r29
    4962:	08 95       	ret

00004964 <I2C_Master_enuSendu8Data>:

I2C_Error_State   I2C_Master_enuSendu8Data(u8 I2C_Data)
{
    4964:	df 93       	push	r29
    4966:	cf 93       	push	r28
    4968:	00 d0       	rcall	.+0      	; 0x496a <I2C_Master_enuSendu8Data+0x6>
    496a:	cd b7       	in	r28, 0x3d	; 61
    496c:	de b7       	in	r29, 0x3e	; 62
    496e:	89 83       	std	Y+1, r24	; 0x01
	TWDR=I2C_Data;
    4970:	e3 e2       	ldi	r30, 0x23	; 35
    4972:	f0 e0       	ldi	r31, 0x00	; 0
    4974:	89 81       	ldd	r24, Y+1	; 0x01
    4976:	80 83       	st	Z, r24
	/*// I2C ENABLE
	SET_BIT(TWCR,TWEN);
	// INT Claer
	SET_BIT(TWCR,TWINT);
	*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    4978:	e6 e5       	ldi	r30, 0x56	; 86
    497a:	f0 e0       	ldi	r31, 0x00	; 0
    497c:	84 ec       	ldi	r24, 0xC4	; 196
    497e:	80 83       	st	Z, r24
	while (!READ_BIT(TWCR,TWINT));
    4980:	e6 e5       	ldi	r30, 0x56	; 86
    4982:	f0 e0       	ldi	r31, 0x00	; 0
    4984:	80 81       	ld	r24, Z
    4986:	88 23       	and	r24, r24
    4988:	dc f7       	brge	.-10     	; 0x4980 <I2C_Master_enuSendu8Data+0x1c>
	
	if ((TWSR&0xf8)!=DATA_WRITE_ACK_STATE )
    498a:	e1 e2       	ldi	r30, 0x21	; 33
    498c:	f0 e0       	ldi	r31, 0x00	; 0
    498e:	80 81       	ld	r24, Z
    4990:	88 2f       	mov	r24, r24
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	88 7f       	andi	r24, 0xF8	; 248
    4996:	90 70       	andi	r25, 0x00	; 0
    4998:	88 32       	cpi	r24, 0x28	; 40
    499a:	91 05       	cpc	r25, r1
    499c:	19 f0       	breq	.+6      	; 0x49a4 <I2C_Master_enuSendu8Data+0x40>
	{
	return I2C_MT_DATA_ERROR;
    499e:	85 e0       	ldi	r24, 0x05	; 5
    49a0:	8a 83       	std	Y+2, r24	; 0x02
    49a2:	01 c0       	rjmp	.+2      	; 0x49a6 <I2C_Master_enuSendu8Data+0x42>
	}
	return I2C_OK;
    49a4:	1a 82       	std	Y+2, r1	; 0x02
    49a6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    49a8:	0f 90       	pop	r0
    49aa:	0f 90       	pop	r0
    49ac:	cf 91       	pop	r28
    49ae:	df 91       	pop	r29
    49b0:	08 95       	ret

000049b2 <I2C_Master_enuReadu8Data>:

	I2C_Error_State   I2C_Master_enuReadu8Data(u8* I2C_Data)
	{
    49b2:	df 93       	push	r29
    49b4:	cf 93       	push	r28
    49b6:	00 d0       	rcall	.+0      	; 0x49b8 <I2C_Master_enuReadu8Data+0x6>
    49b8:	0f 92       	push	r0
    49ba:	cd b7       	in	r28, 0x3d	; 61
    49bc:	de b7       	in	r29, 0x3e	; 62
    49be:	9a 83       	std	Y+2, r25	; 0x02
    49c0:	89 83       	std	Y+1, r24	; 0x01
	// I2C ENABLE
	/*SET_BIT(TWCR,TWEN);
	// INT Claer
	SET_BIT(TWCR,TWINT);
	*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    49c2:	e6 e5       	ldi	r30, 0x56	; 86
    49c4:	f0 e0       	ldi	r31, 0x00	; 0
    49c6:	84 e8       	ldi	r24, 0x84	; 132
    49c8:	80 83       	st	Z, r24
	while (!READ_BIT(TWCR,TWINT));
    49ca:	e6 e5       	ldi	r30, 0x56	; 86
    49cc:	f0 e0       	ldi	r31, 0x00	; 0
    49ce:	80 81       	ld	r24, Z
    49d0:	88 23       	and	r24, r24
    49d2:	dc f7       	brge	.-10     	; 0x49ca <I2C_Master_enuReadu8Data+0x18>
	
	if ((TWSR&0xf8)!=DATA_READ_NACK_STATE )
    49d4:	e1 e2       	ldi	r30, 0x21	; 33
    49d6:	f0 e0       	ldi	r31, 0x00	; 0
    49d8:	80 81       	ld	r24, Z
    49da:	88 2f       	mov	r24, r24
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	88 7f       	andi	r24, 0xF8	; 248
    49e0:	90 70       	andi	r25, 0x00	; 0
    49e2:	88 35       	cpi	r24, 0x58	; 88
    49e4:	91 05       	cpc	r25, r1
    49e6:	19 f0       	breq	.+6      	; 0x49ee <I2C_Master_enuReadu8Data+0x3c>
	{
	return I2C_MR_DATA_ERROR;
    49e8:	86 e0       	ldi	r24, 0x06	; 6
    49ea:	8b 83       	std	Y+3, r24	; 0x03
    49ec:	07 c0       	rjmp	.+14     	; 0x49fc <I2C_Master_enuReadu8Data+0x4a>
	}
	*I2C_Data=TWDR;
    49ee:	e3 e2       	ldi	r30, 0x23	; 35
    49f0:	f0 e0       	ldi	r31, 0x00	; 0
    49f2:	80 81       	ld	r24, Z
    49f4:	e9 81       	ldd	r30, Y+1	; 0x01
    49f6:	fa 81       	ldd	r31, Y+2	; 0x02
    49f8:	80 83       	st	Z, r24
	return I2C_OK;
    49fa:	1b 82       	std	Y+3, r1	; 0x03
    49fc:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    49fe:	0f 90       	pop	r0
    4a00:	0f 90       	pop	r0
    4a02:	0f 90       	pop	r0
    4a04:	cf 91       	pop	r28
    4a06:	df 91       	pop	r29
    4a08:	08 95       	ret

00004a0a <I2C_Master_enuSendStopCond>:

	void I2C_Master_enuSendStopCond(void)
	{
    4a0a:	df 93       	push	r29
    4a0c:	cf 93       	push	r28
    4a0e:	cd b7       	in	r28, 0x3d	; 61
    4a10:	de b7       	in	r29, 0x3e	; 62
	// I2C ENABLE
	SET_BIT(TWCR,TWEN);
	// INT Claer
	SET_BIT(TWCR,TWINT);
	//*/
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    4a12:	e6 e5       	ldi	r30, 0x56	; 86
    4a14:	f0 e0       	ldi	r31, 0x00	; 0
    4a16:	84 e9       	ldi	r24, 0x94	; 148
    4a18:	80 83       	st	Z, r24
	while(READ_BIT(TWCR, TWSTO) == 1);
    4a1a:	e6 e5       	ldi	r30, 0x56	; 86
    4a1c:	f0 e0       	ldi	r31, 0x00	; 0
    4a1e:	80 81       	ld	r24, Z
    4a20:	82 95       	swap	r24
    4a22:	8f 70       	andi	r24, 0x0F	; 15
    4a24:	88 2f       	mov	r24, r24
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	81 70       	andi	r24, 0x01	; 1
    4a2a:	90 70       	andi	r25, 0x00	; 0
    4a2c:	88 23       	and	r24, r24
    4a2e:	a9 f7       	brne	.-22     	; 0x4a1a <I2C_Master_enuSendStopCond+0x10>
}
    4a30:	cf 91       	pop	r28
    4a32:	df 91       	pop	r29
    4a34:	08 95       	ret

00004a36 <I2C_Slave_enuReadu8Data>:

I2C_Error_State   I2C_Slave_enuReadu8Data(u8* I2C_Data)
{
    4a36:	df 93       	push	r29
    4a38:	cf 93       	push	r28
    4a3a:	00 d0       	rcall	.+0      	; 0x4a3c <I2C_Slave_enuReadu8Data+0x6>
    4a3c:	0f 92       	push	r0
    4a3e:	cd b7       	in	r28, 0x3d	; 61
    4a40:	de b7       	in	r29, 0x3e	; 62
    4a42:	9a 83       	std	Y+2, r25	; 0x02
    4a44:	89 83       	std	Y+1, r24	; 0x01
	// INT Claer
	SET_BIT(TWCR,TWINT);
	//ENABLE ACK
	SET_BIT(TWCR,TWEA);
	*/
	TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    4a46:	e6 e5       	ldi	r30, 0x56	; 86
    4a48:	f0 e0       	ldi	r31, 0x00	; 0
    4a4a:	84 ec       	ldi	r24, 0xC4	; 196
    4a4c:	80 83       	st	Z, r24
	while (!READ_BIT(TWCR,TWINT));
    4a4e:	e6 e5       	ldi	r30, 0x56	; 86
    4a50:	f0 e0       	ldi	r31, 0x00	; 0
    4a52:	80 81       	ld	r24, Z
    4a54:	88 23       	and	r24, r24
    4a56:	dc f7       	brge	.-10     	; 0x4a4e <I2C_Slave_enuReadu8Data+0x18>
	if ((TWSR&0xf8)!=DATA_SL_R_ACK )
    4a58:	e1 e2       	ldi	r30, 0x21	; 33
    4a5a:	f0 e0       	ldi	r31, 0x00	; 0
    4a5c:	80 81       	ld	r24, Z
    4a5e:	88 2f       	mov	r24, r24
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	88 7f       	andi	r24, 0xF8	; 248
    4a64:	90 70       	andi	r25, 0x00	; 0
    4a66:	80 38       	cpi	r24, 0x80	; 128
    4a68:	91 05       	cpc	r25, r1
    4a6a:	19 f0       	breq	.+6      	; 0x4a72 <I2C_Slave_enuReadu8Data+0x3c>
	{
		return I2C_SR_DATA_ERROR;
    4a6c:	87 e0       	ldi	r24, 0x07	; 7
    4a6e:	8b 83       	std	Y+3, r24	; 0x03
    4a70:	07 c0       	rjmp	.+14     	; 0x4a80 <I2C_Slave_enuReadu8Data+0x4a>
	}
	*I2C_Data=TWDR;
    4a72:	e3 e2       	ldi	r30, 0x23	; 35
    4a74:	f0 e0       	ldi	r31, 0x00	; 0
    4a76:	80 81       	ld	r24, Z
    4a78:	e9 81       	ldd	r30, Y+1	; 0x01
    4a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a7c:	80 83       	st	Z, r24
	
	return I2C_OK;
    4a7e:	1b 82       	std	Y+3, r1	; 0x03
    4a80:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4a82:	0f 90       	pop	r0
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	cf 91       	pop	r28
    4a8a:	df 91       	pop	r29
    4a8c:	08 95       	ret

00004a8e <I2C_SendChar>:

I2C_Error_State I2C_SendChar(u8 data,u8 address)
{
    4a8e:	df 93       	push	r29
    4a90:	cf 93       	push	r28
    4a92:	00 d0       	rcall	.+0      	; 0x4a94 <I2C_SendChar+0x6>
    4a94:	00 d0       	rcall	.+0      	; 0x4a96 <I2C_SendChar+0x8>
    4a96:	cd b7       	in	r28, 0x3d	; 61
    4a98:	de b7       	in	r29, 0x3e	; 62
    4a9a:	8a 83       	std	Y+2, r24	; 0x02
    4a9c:	6b 83       	std	Y+3, r22	; 0x03
	I2C_Error_State error=I2C_OK;
    4a9e:	19 82       	std	Y+1, r1	; 0x01
	error=I2C_Master_enuSendStartCond();
    4aa0:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <I2C_Master_enuSendStartCond>
    4aa4:	89 83       	std	Y+1, r24	; 0x01
	if(error==I2C_SC_ERROR)
    4aa6:	89 81       	ldd	r24, Y+1	; 0x01
    4aa8:	81 30       	cpi	r24, 0x01	; 1
    4aaa:	19 f4       	brne	.+6      	; 0x4ab2 <I2C_SendChar+0x24>
	return error;
    4aac:	89 81       	ldd	r24, Y+1	; 0x01
    4aae:	8c 83       	std	Y+4, r24	; 0x04
    4ab0:	18 c0       	rjmp	.+48     	; 0x4ae2 <I2C_SendChar+0x54>
	error=I2C_Master_enuSendSlaveAddressWithWrite(address);
    4ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab4:	0e 94 3b 24 	call	0x4876	; 0x4876 <I2C_Master_enuSendSlaveAddressWithWrite>
    4ab8:	89 83       	std	Y+1, r24	; 0x01
	if(error==I2C_MT_SLA_W_ERROR)
    4aba:	89 81       	ldd	r24, Y+1	; 0x01
    4abc:	84 30       	cpi	r24, 0x04	; 4
    4abe:	19 f4       	brne	.+6      	; 0x4ac6 <I2C_SendChar+0x38>
	return error;
    4ac0:	89 81       	ldd	r24, Y+1	; 0x01
    4ac2:	8c 83       	std	Y+4, r24	; 0x04
    4ac4:	0e c0       	rjmp	.+28     	; 0x4ae2 <I2C_SendChar+0x54>
// 	error=I2C_Master_enuSendu8Data(reg);
// 	if(error==I2C_MT_DATA_ERROR)
// 	return error;
	error=I2C_Master_enuSendu8Data(data);
    4ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac8:	0e 94 b2 24 	call	0x4964	; 0x4964 <I2C_Master_enuSendu8Data>
    4acc:	89 83       	std	Y+1, r24	; 0x01
	if(error==I2C_MT_DATA_ERROR)
    4ace:	89 81       	ldd	r24, Y+1	; 0x01
    4ad0:	85 30       	cpi	r24, 0x05	; 5
    4ad2:	19 f4       	brne	.+6      	; 0x4ada <I2C_SendChar+0x4c>
	return error;
    4ad4:	89 81       	ldd	r24, Y+1	; 0x01
    4ad6:	8c 83       	std	Y+4, r24	; 0x04
    4ad8:	04 c0       	rjmp	.+8      	; 0x4ae2 <I2C_SendChar+0x54>
	I2C_Master_enuSendStopCond();
    4ada:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <I2C_Master_enuSendStopCond>
	return error;
    4ade:	89 81       	ldd	r24, Y+1	; 0x01
    4ae0:	8c 83       	std	Y+4, r24	; 0x04
    4ae2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4ae4:	0f 90       	pop	r0
    4ae6:	0f 90       	pop	r0
    4ae8:	0f 90       	pop	r0
    4aea:	0f 90       	pop	r0
    4aec:	cf 91       	pop	r28
    4aee:	df 91       	pop	r29
    4af0:	08 95       	ret

00004af2 <I2C_ReceiveChar>:


I2C_Error_State I2C_ReceiveChar(u8 *data)
{
    4af2:	df 93       	push	r29
    4af4:	cf 93       	push	r28
    4af6:	00 d0       	rcall	.+0      	; 0x4af8 <I2C_ReceiveChar+0x6>
    4af8:	00 d0       	rcall	.+0      	; 0x4afa <I2C_ReceiveChar+0x8>
    4afa:	cd b7       	in	r28, 0x3d	; 61
    4afc:	de b7       	in	r29, 0x3e	; 62
    4afe:	9b 83       	std	Y+3, r25	; 0x03
    4b00:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State error=I2C_OK;
    4b02:	19 82       	std	Y+1, r1	; 0x01
	error=I2C_slave_avilable();
    4b04:	0e 94 91 24 	call	0x4922	; 0x4922 <I2C_slave_avilable>
    4b08:	89 83       	std	Y+1, r24	; 0x01
	if(error==I2C_SR_ADD_ERROR)
    4b0a:	89 81       	ldd	r24, Y+1	; 0x01
    4b0c:	88 30       	cpi	r24, 0x08	; 8
    4b0e:	19 f4       	brne	.+6      	; 0x4b16 <I2C_ReceiveChar+0x24>
	return error;
    4b10:	89 81       	ldd	r24, Y+1	; 0x01
    4b12:	8c 83       	std	Y+4, r24	; 0x04
    4b14:	0d c0       	rjmp	.+26     	; 0x4b30 <I2C_ReceiveChar+0x3e>
	error=I2C_Slave_enuReadu8Data(data);
    4b16:	8a 81       	ldd	r24, Y+2	; 0x02
    4b18:	9b 81       	ldd	r25, Y+3	; 0x03
    4b1a:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <I2C_Slave_enuReadu8Data>
    4b1e:	89 83       	std	Y+1, r24	; 0x01
	if(error==I2C_SR_DATA_ERROR)
    4b20:	89 81       	ldd	r24, Y+1	; 0x01
    4b22:	87 30       	cpi	r24, 0x07	; 7
    4b24:	19 f4       	brne	.+6      	; 0x4b2c <I2C_ReceiveChar+0x3a>
	return error;
    4b26:	89 81       	ldd	r24, Y+1	; 0x01
    4b28:	8c 83       	std	Y+4, r24	; 0x04
    4b2a:	02 c0       	rjmp	.+4      	; 0x4b30 <I2C_ReceiveChar+0x3e>
	
	return error;
    4b2c:	89 81       	ldd	r24, Y+1	; 0x01
    4b2e:	8c 83       	std	Y+4, r24	; 0x04
    4b30:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4b32:	0f 90       	pop	r0
    4b34:	0f 90       	pop	r0
    4b36:	0f 90       	pop	r0
    4b38:	0f 90       	pop	r0
    4b3a:	cf 91       	pop	r28
    4b3c:	df 91       	pop	r29
    4b3e:	08 95       	ret

00004b40 <KEYPAD_Init>:
#include <util/delay.h>



void KEYPAD_Init(void)
{
    4b40:	df 93       	push	r29
    4b42:	cf 93       	push	r28
    4b44:	0f 92       	push	r0
    4b46:	cd b7       	in	r28, 0x3d	; 61
    4b48:	de b7       	in	r29, 0x3e	; 62
	u8 r=0;
    4b4a:	19 82       	std	Y+1, r1	; 0x01
	for(r=0;r<ROWS;r++)
    4b4c:	19 82       	std	Y+1, r1	; 0x01
    4b4e:	08 c0       	rjmp	.+16     	; 0x4b60 <KEYPAD_Init+0x20>
	{
		DIO_WritePin((FIRST_OUTPUT+r),HIGH);
    4b50:	89 81       	ldd	r24, Y+1	; 0x01
    4b52:	84 5f       	subi	r24, 0xF4	; 244
    4b54:	61 e0       	ldi	r22, 0x01	; 1
    4b56:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>


void KEYPAD_Init(void)
{
	u8 r=0;
	for(r=0;r<ROWS;r++)
    4b5a:	89 81       	ldd	r24, Y+1	; 0x01
    4b5c:	8f 5f       	subi	r24, 0xFF	; 255
    4b5e:	89 83       	std	Y+1, r24	; 0x01
    4b60:	89 81       	ldd	r24, Y+1	; 0x01
    4b62:	84 30       	cpi	r24, 0x04	; 4
    4b64:	a8 f3       	brcs	.-22     	; 0x4b50 <KEYPAD_Init+0x10>
		DIO_WritePin((FIRST_OUTPUT+r),HIGH);
		
	}
	
	 
}
    4b66:	0f 90       	pop	r0
    4b68:	cf 91       	pop	r28
    4b6a:	df 91       	pop	r29
    4b6c:	08 95       	ret

00004b6e <KEYPAD_GetKey>:
u8 KEYPAD_GetKey(void)
{
    4b6e:	df 93       	push	r29
    4b70:	cf 93       	push	r28
    4b72:	cd b7       	in	r28, 0x3d	; 61
    4b74:	de b7       	in	r29, 0x3e	; 62
    4b76:	6f 97       	sbiw	r28, 0x1f	; 31
    4b78:	0f b6       	in	r0, 0x3f	; 63
    4b7a:	f8 94       	cli
    4b7c:	de bf       	out	0x3e, r29	; 62
    4b7e:	0f be       	out	0x3f, r0	; 63
    4b80:	cd bf       	out	0x3d, r28	; 61
	u8 r=0,c=0;
    4b82:	1f 8e       	std	Y+31, r1	; 0x1f
    4b84:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 key=NO_KEY;
    4b86:	84 e5       	ldi	r24, 0x54	; 84
    4b88:	8d 8f       	std	Y+29, r24	; 0x1d
	for(r=0;r<ROWS;r++)
    4b8a:	1f 8e       	std	Y+31, r1	; 0x1f
    4b8c:	19 c1       	rjmp	.+562    	; 0x4dc0 <KEYPAD_GetKey+0x252>
	{
		DIO_WritePin((FIRST_OUTPUT+r),LOW);
    4b8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b90:	84 5f       	subi	r24, 0xF4	; 244
    4b92:	60 e0       	ldi	r22, 0x00	; 0
    4b94:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
		for(c=0;c<COLS;c++)
    4b98:	1e 8e       	std	Y+30, r1	; 0x1e
    4b9a:	06 c1       	rjmp	.+524    	; 0x4da8 <KEYPAD_GetKey+0x23a>
		{
			if(DIO_ReadPin(FIRST_INPUT+c)==LOW)
    4b9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b9e:	86 5e       	subi	r24, 0xE6	; 230
    4ba0:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_ReadPin>
    4ba4:	88 23       	and	r24, r24
    4ba6:	09 f0       	breq	.+2      	; 0x4baa <KEYPAD_GetKey+0x3c>
    4ba8:	fc c0       	rjmp	.+504    	; 0x4da2 <KEYPAD_GetKey+0x234>
			{
				key=KEYPADArr[r][c];
    4baa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4bac:	48 2f       	mov	r20, r24
    4bae:	50 e0       	ldi	r21, 0x00	; 0
    4bb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4bb2:	28 2f       	mov	r18, r24
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	ca 01       	movw	r24, r20
    4bb8:	88 0f       	add	r24, r24
    4bba:	99 1f       	adc	r25, r25
    4bbc:	88 0f       	add	r24, r24
    4bbe:	99 1f       	adc	r25, r25
    4bc0:	82 0f       	add	r24, r18
    4bc2:	93 1f       	adc	r25, r19
    4bc4:	fc 01       	movw	r30, r24
    4bc6:	e6 5e       	subi	r30, 0xE6	; 230
    4bc8:	fd 4f       	sbci	r31, 0xFD	; 253
    4bca:	80 81       	ld	r24, Z
    4bcc:	8d 8f       	std	Y+29, r24	; 0x1d
    4bce:	80 e0       	ldi	r24, 0x00	; 0
    4bd0:	90 e0       	ldi	r25, 0x00	; 0
    4bd2:	a0 e2       	ldi	r26, 0x20	; 32
    4bd4:	b1 e4       	ldi	r27, 0x41	; 65
    4bd6:	89 8f       	std	Y+25, r24	; 0x19
    4bd8:	9a 8f       	std	Y+26, r25	; 0x1a
    4bda:	ab 8f       	std	Y+27, r26	; 0x1b
    4bdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bde:	69 8d       	ldd	r22, Y+25	; 0x19
    4be0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4be2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4be4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4be6:	20 e0       	ldi	r18, 0x00	; 0
    4be8:	30 e0       	ldi	r19, 0x00	; 0
    4bea:	4a ef       	ldi	r20, 0xFA	; 250
    4bec:	54 e4       	ldi	r21, 0x44	; 68
    4bee:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	cb 01       	movw	r24, r22
    4bf6:	8d 8b       	std	Y+21, r24	; 0x15
    4bf8:	9e 8b       	std	Y+22, r25	; 0x16
    4bfa:	af 8b       	std	Y+23, r26	; 0x17
    4bfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    4c00:	7e 89       	ldd	r23, Y+22	; 0x16
    4c02:	8f 89       	ldd	r24, Y+23	; 0x17
    4c04:	98 8d       	ldd	r25, Y+24	; 0x18
    4c06:	20 e0       	ldi	r18, 0x00	; 0
    4c08:	30 e0       	ldi	r19, 0x00	; 0
    4c0a:	40 e8       	ldi	r20, 0x80	; 128
    4c0c:	5f e3       	ldi	r21, 0x3F	; 63
    4c0e:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    4c12:	88 23       	and	r24, r24
    4c14:	2c f4       	brge	.+10     	; 0x4c20 <KEYPAD_GetKey+0xb2>
		__ticks = 1;
    4c16:	81 e0       	ldi	r24, 0x01	; 1
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	9c 8b       	std	Y+20, r25	; 0x14
    4c1c:	8b 8b       	std	Y+19, r24	; 0x13
    4c1e:	3f c0       	rjmp	.+126    	; 0x4c9e <KEYPAD_GetKey+0x130>
	else if (__tmp > 65535)
    4c20:	6d 89       	ldd	r22, Y+21	; 0x15
    4c22:	7e 89       	ldd	r23, Y+22	; 0x16
    4c24:	8f 89       	ldd	r24, Y+23	; 0x17
    4c26:	98 8d       	ldd	r25, Y+24	; 0x18
    4c28:	20 e0       	ldi	r18, 0x00	; 0
    4c2a:	3f ef       	ldi	r19, 0xFF	; 255
    4c2c:	4f e7       	ldi	r20, 0x7F	; 127
    4c2e:	57 e4       	ldi	r21, 0x47	; 71
    4c30:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    4c34:	18 16       	cp	r1, r24
    4c36:	4c f5       	brge	.+82     	; 0x4c8a <KEYPAD_GetKey+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c38:	69 8d       	ldd	r22, Y+25	; 0x19
    4c3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c40:	20 e0       	ldi	r18, 0x00	; 0
    4c42:	30 e0       	ldi	r19, 0x00	; 0
    4c44:	40 e2       	ldi	r20, 0x20	; 32
    4c46:	51 e4       	ldi	r21, 0x41	; 65
    4c48:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4c4c:	dc 01       	movw	r26, r24
    4c4e:	cb 01       	movw	r24, r22
    4c50:	bc 01       	movw	r22, r24
    4c52:	cd 01       	movw	r24, r26
    4c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c58:	dc 01       	movw	r26, r24
    4c5a:	cb 01       	movw	r24, r22
    4c5c:	9c 8b       	std	Y+20, r25	; 0x14
    4c5e:	8b 8b       	std	Y+19, r24	; 0x13
    4c60:	0f c0       	rjmp	.+30     	; 0x4c80 <KEYPAD_GetKey+0x112>
    4c62:	88 ec       	ldi	r24, 0xC8	; 200
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	9a 8b       	std	Y+18, r25	; 0x12
    4c68:	89 8b       	std	Y+17, r24	; 0x11
    4c6a:	89 89       	ldd	r24, Y+17	; 0x11
    4c6c:	9a 89       	ldd	r25, Y+18	; 0x12
    4c6e:	01 97       	sbiw	r24, 0x01	; 1
    4c70:	f1 f7       	brne	.-4      	; 0x4c6e <KEYPAD_GetKey+0x100>
    4c72:	9a 8b       	std	Y+18, r25	; 0x12
    4c74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c76:	8b 89       	ldd	r24, Y+19	; 0x13
    4c78:	9c 89       	ldd	r25, Y+20	; 0x14
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	9c 8b       	std	Y+20, r25	; 0x14
    4c7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c80:	8b 89       	ldd	r24, Y+19	; 0x13
    4c82:	9c 89       	ldd	r25, Y+20	; 0x14
    4c84:	00 97       	sbiw	r24, 0x00	; 0
    4c86:	69 f7       	brne	.-38     	; 0x4c62 <KEYPAD_GetKey+0xf4>
    4c88:	14 c0       	rjmp	.+40     	; 0x4cb2 <KEYPAD_GetKey+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    4c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    4c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    4c90:	98 8d       	ldd	r25, Y+24	; 0x18
    4c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c96:	dc 01       	movw	r26, r24
    4c98:	cb 01       	movw	r24, r22
    4c9a:	9c 8b       	std	Y+20, r25	; 0x14
    4c9c:	8b 8b       	std	Y+19, r24	; 0x13
    4c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    4ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    4ca2:	98 8b       	std	Y+16, r25	; 0x10
    4ca4:	8f 87       	std	Y+15, r24	; 0x0f
    4ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ca8:	98 89       	ldd	r25, Y+16	; 0x10
    4caa:	01 97       	sbiw	r24, 0x01	; 1
    4cac:	f1 f7       	brne	.-4      	; 0x4caa <KEYPAD_GetKey+0x13c>
    4cae:	98 8b       	std	Y+16, r25	; 0x10
    4cb0:	8f 87       	std	Y+15, r24	; 0x0f
				
				_delay_ms(10);
				while(DIO_ReadPin(FIRST_INPUT+c)==LOW);
    4cb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4cb4:	86 5e       	subi	r24, 0xE6	; 230
    4cb6:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_ReadPin>
    4cba:	88 23       	and	r24, r24
    4cbc:	d1 f3       	breq	.-12     	; 0x4cb2 <KEYPAD_GetKey+0x144>
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	a0 e2       	ldi	r26, 0x20	; 32
    4cc4:	b1 e4       	ldi	r27, 0x41	; 65
    4cc6:	8b 87       	std	Y+11, r24	; 0x0b
    4cc8:	9c 87       	std	Y+12, r25	; 0x0c
    4cca:	ad 87       	std	Y+13, r26	; 0x0d
    4ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cd6:	20 e0       	ldi	r18, 0x00	; 0
    4cd8:	30 e0       	ldi	r19, 0x00	; 0
    4cda:	4a ef       	ldi	r20, 0xFA	; 250
    4cdc:	54 e4       	ldi	r21, 0x44	; 68
    4cde:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	8f 83       	std	Y+7, r24	; 0x07
    4ce8:	98 87       	std	Y+8, r25	; 0x08
    4cea:	a9 87       	std	Y+9, r26	; 0x09
    4cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4cee:	6f 81       	ldd	r22, Y+7	; 0x07
    4cf0:	78 85       	ldd	r23, Y+8	; 0x08
    4cf2:	89 85       	ldd	r24, Y+9	; 0x09
    4cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf6:	20 e0       	ldi	r18, 0x00	; 0
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	40 e8       	ldi	r20, 0x80	; 128
    4cfc:	5f e3       	ldi	r21, 0x3F	; 63
    4cfe:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    4d02:	88 23       	and	r24, r24
    4d04:	2c f4       	brge	.+10     	; 0x4d10 <KEYPAD_GetKey+0x1a2>
		__ticks = 1;
    4d06:	81 e0       	ldi	r24, 0x01	; 1
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	9e 83       	std	Y+6, r25	; 0x06
    4d0c:	8d 83       	std	Y+5, r24	; 0x05
    4d0e:	3f c0       	rjmp	.+126    	; 0x4d8e <KEYPAD_GetKey+0x220>
	else if (__tmp > 65535)
    4d10:	6f 81       	ldd	r22, Y+7	; 0x07
    4d12:	78 85       	ldd	r23, Y+8	; 0x08
    4d14:	89 85       	ldd	r24, Y+9	; 0x09
    4d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d18:	20 e0       	ldi	r18, 0x00	; 0
    4d1a:	3f ef       	ldi	r19, 0xFF	; 255
    4d1c:	4f e7       	ldi	r20, 0x7F	; 127
    4d1e:	57 e4       	ldi	r21, 0x47	; 71
    4d20:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    4d24:	18 16       	cp	r1, r24
    4d26:	4c f5       	brge	.+82     	; 0x4d7a <KEYPAD_GetKey+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	40 e2       	ldi	r20, 0x20	; 32
    4d36:	51 e4       	ldi	r21, 0x41	; 65
    4d38:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4d3c:	dc 01       	movw	r26, r24
    4d3e:	cb 01       	movw	r24, r22
    4d40:	bc 01       	movw	r22, r24
    4d42:	cd 01       	movw	r24, r26
    4d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d48:	dc 01       	movw	r26, r24
    4d4a:	cb 01       	movw	r24, r22
    4d4c:	9e 83       	std	Y+6, r25	; 0x06
    4d4e:	8d 83       	std	Y+5, r24	; 0x05
    4d50:	0f c0       	rjmp	.+30     	; 0x4d70 <KEYPAD_GetKey+0x202>
    4d52:	88 ec       	ldi	r24, 0xC8	; 200
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	9c 83       	std	Y+4, r25	; 0x04
    4d58:	8b 83       	std	Y+3, r24	; 0x03
    4d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d5e:	01 97       	sbiw	r24, 0x01	; 1
    4d60:	f1 f7       	brne	.-4      	; 0x4d5e <KEYPAD_GetKey+0x1f0>
    4d62:	9c 83       	std	Y+4, r25	; 0x04
    4d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d66:	8d 81       	ldd	r24, Y+5	; 0x05
    4d68:	9e 81       	ldd	r25, Y+6	; 0x06
    4d6a:	01 97       	sbiw	r24, 0x01	; 1
    4d6c:	9e 83       	std	Y+6, r25	; 0x06
    4d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d70:	8d 81       	ldd	r24, Y+5	; 0x05
    4d72:	9e 81       	ldd	r25, Y+6	; 0x06
    4d74:	00 97       	sbiw	r24, 0x00	; 0
    4d76:	69 f7       	brne	.-38     	; 0x4d52 <KEYPAD_GetKey+0x1e4>
    4d78:	14 c0       	rjmp	.+40     	; 0x4da2 <KEYPAD_GetKey+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    4d7c:	78 85       	ldd	r23, Y+8	; 0x08
    4d7e:	89 85       	ldd	r24, Y+9	; 0x09
    4d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d86:	dc 01       	movw	r26, r24
    4d88:	cb 01       	movw	r24, r22
    4d8a:	9e 83       	std	Y+6, r25	; 0x06
    4d8c:	8d 83       	std	Y+5, r24	; 0x05
    4d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d90:	9e 81       	ldd	r25, Y+6	; 0x06
    4d92:	9a 83       	std	Y+2, r25	; 0x02
    4d94:	89 83       	std	Y+1, r24	; 0x01
    4d96:	89 81       	ldd	r24, Y+1	; 0x01
    4d98:	9a 81       	ldd	r25, Y+2	; 0x02
    4d9a:	01 97       	sbiw	r24, 0x01	; 1
    4d9c:	f1 f7       	brne	.-4      	; 0x4d9a <KEYPAD_GetKey+0x22c>
    4d9e:	9a 83       	std	Y+2, r25	; 0x02
    4da0:	89 83       	std	Y+1, r24	; 0x01
	u8 r=0,c=0;
	u8 key=NO_KEY;
	for(r=0;r<ROWS;r++)
	{
		DIO_WritePin((FIRST_OUTPUT+r),LOW);
		for(c=0;c<COLS;c++)
    4da2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4da4:	8f 5f       	subi	r24, 0xFF	; 255
    4da6:	8e 8f       	std	Y+30, r24	; 0x1e
    4da8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4daa:	84 30       	cpi	r24, 0x04	; 4
    4dac:	08 f4       	brcc	.+2      	; 0x4db0 <KEYPAD_GetKey+0x242>
    4dae:	f6 ce       	rjmp	.-532    	; 0x4b9c <KEYPAD_GetKey+0x2e>

				
			}
			
		}
		DIO_WritePin((FIRST_OUTPUT+r),1);
    4db0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4db2:	84 5f       	subi	r24, 0xF4	; 244
    4db4:	61 e0       	ldi	r22, 0x01	; 1
    4db6:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
}
u8 KEYPAD_GetKey(void)
{
	u8 r=0,c=0;
	u8 key=NO_KEY;
	for(r=0;r<ROWS;r++)
    4dba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dbc:	8f 5f       	subi	r24, 0xFF	; 255
    4dbe:	8f 8f       	std	Y+31, r24	; 0x1f
    4dc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dc2:	84 30       	cpi	r24, 0x04	; 4
    4dc4:	08 f4       	brcc	.+2      	; 0x4dc8 <KEYPAD_GetKey+0x25a>
    4dc6:	e3 ce       	rjmp	.-570    	; 0x4b8e <KEYPAD_GetKey+0x20>
			}
			
		}
		DIO_WritePin((FIRST_OUTPUT+r),1);
	}
	return key;
    4dc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4dca:	6f 96       	adiw	r28, 0x1f	; 31
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	f8 94       	cli
    4dd0:	de bf       	out	0x3e, r29	; 62
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	cd bf       	out	0x3d, r28	; 61
    4dd6:	cf 91       	pop	r28
    4dd8:	df 91       	pop	r29
    4dda:	08 95       	ret

00004ddc <string_len>:
//u8 Index;
static u8 LINE,CELL;


int string_len(c8*str)
{
    4ddc:	df 93       	push	r29
    4dde:	cf 93       	push	r28
    4de0:	00 d0       	rcall	.+0      	; 0x4de2 <string_len+0x6>
    4de2:	0f 92       	push	r0
    4de4:	cd b7       	in	r28, 0x3d	; 61
    4de6:	de b7       	in	r29, 0x3e	; 62
    4de8:	9b 83       	std	Y+3, r25	; 0x03
    4dea:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    4dec:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;str[i]!='\0';i++);
    4dee:	19 82       	std	Y+1, r1	; 0x01
    4df0:	03 c0       	rjmp	.+6      	; 0x4df8 <string_len+0x1c>
    4df2:	89 81       	ldd	r24, Y+1	; 0x01
    4df4:	8f 5f       	subi	r24, 0xFF	; 255
    4df6:	89 83       	std	Y+1, r24	; 0x01
    4df8:	89 81       	ldd	r24, Y+1	; 0x01
    4dfa:	28 2f       	mov	r18, r24
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    4e00:	9b 81       	ldd	r25, Y+3	; 0x03
    4e02:	fc 01       	movw	r30, r24
    4e04:	e2 0f       	add	r30, r18
    4e06:	f3 1f       	adc	r31, r19
    4e08:	80 81       	ld	r24, Z
    4e0a:	88 23       	and	r24, r24
    4e0c:	91 f7       	brne	.-28     	; 0x4df2 <string_len+0x16>
	return i;
    4e0e:	89 81       	ldd	r24, Y+1	; 0x01
    4e10:	88 2f       	mov	r24, r24
    4e12:	90 e0       	ldi	r25, 0x00	; 0

}
    4e14:	0f 90       	pop	r0
    4e16:	0f 90       	pop	r0
    4e18:	0f 90       	pop	r0
    4e1a:	cf 91       	pop	r28
    4e1c:	df 91       	pop	r29
    4e1e:	08 95       	ret

00004e20 <string_reverse>:
void string_reverse(c8*str)
{
    4e20:	df 93       	push	r29
    4e22:	cf 93       	push	r28
    4e24:	00 d0       	rcall	.+0      	; 0x4e26 <string_reverse+0x6>
    4e26:	00 d0       	rcall	.+0      	; 0x4e28 <string_reverse+0x8>
    4e28:	00 d0       	rcall	.+0      	; 0x4e2a <string_reverse+0xa>
    4e2a:	cd b7       	in	r28, 0x3d	; 61
    4e2c:	de b7       	in	r29, 0x3e	; 62
    4e2e:	9e 83       	std	Y+6, r25	; 0x06
    4e30:	8d 83       	std	Y+5, r24	; 0x05
	s8 i=0,j,temp;
    4e32:	1c 82       	std	Y+4, r1	; 0x04
	u8 len=string_len(str);
    4e34:	8d 81       	ldd	r24, Y+5	; 0x05
    4e36:	9e 81       	ldd	r25, Y+6	; 0x06
    4e38:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <string_len>
    4e3c:	89 83       	std	Y+1, r24	; 0x01
	for(i=0,j=(len-1);i<=j;i++,j--)
    4e3e:	1c 82       	std	Y+4, r1	; 0x04
    4e40:	89 81       	ldd	r24, Y+1	; 0x01
    4e42:	81 50       	subi	r24, 0x01	; 1
    4e44:	8b 83       	std	Y+3, r24	; 0x03
    4e46:	34 c0       	rjmp	.+104    	; 0x4eb0 <string_reverse+0x90>
	{
		temp=str[i];
    4e48:	8c 81       	ldd	r24, Y+4	; 0x04
    4e4a:	28 2f       	mov	r18, r24
    4e4c:	33 27       	eor	r19, r19
    4e4e:	27 fd       	sbrc	r18, 7
    4e50:	30 95       	com	r19
    4e52:	8d 81       	ldd	r24, Y+5	; 0x05
    4e54:	9e 81       	ldd	r25, Y+6	; 0x06
    4e56:	fc 01       	movw	r30, r24
    4e58:	e2 0f       	add	r30, r18
    4e5a:	f3 1f       	adc	r31, r19
    4e5c:	80 81       	ld	r24, Z
    4e5e:	8a 83       	std	Y+2, r24	; 0x02
		str[i]=str[j];
    4e60:	8c 81       	ldd	r24, Y+4	; 0x04
    4e62:	28 2f       	mov	r18, r24
    4e64:	33 27       	eor	r19, r19
    4e66:	27 fd       	sbrc	r18, 7
    4e68:	30 95       	com	r19
    4e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e6e:	dc 01       	movw	r26, r24
    4e70:	a2 0f       	add	r26, r18
    4e72:	b3 1f       	adc	r27, r19
    4e74:	8b 81       	ldd	r24, Y+3	; 0x03
    4e76:	28 2f       	mov	r18, r24
    4e78:	33 27       	eor	r19, r19
    4e7a:	27 fd       	sbrc	r18, 7
    4e7c:	30 95       	com	r19
    4e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e80:	9e 81       	ldd	r25, Y+6	; 0x06
    4e82:	fc 01       	movw	r30, r24
    4e84:	e2 0f       	add	r30, r18
    4e86:	f3 1f       	adc	r31, r19
    4e88:	80 81       	ld	r24, Z
    4e8a:	8c 93       	st	X, r24
		str[j]=temp;
    4e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e8e:	28 2f       	mov	r18, r24
    4e90:	33 27       	eor	r19, r19
    4e92:	27 fd       	sbrc	r18, 7
    4e94:	30 95       	com	r19
    4e96:	8d 81       	ldd	r24, Y+5	; 0x05
    4e98:	9e 81       	ldd	r25, Y+6	; 0x06
    4e9a:	fc 01       	movw	r30, r24
    4e9c:	e2 0f       	add	r30, r18
    4e9e:	f3 1f       	adc	r31, r19
    4ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea2:	80 83       	st	Z, r24
}
void string_reverse(c8*str)
{
	s8 i=0,j,temp;
	u8 len=string_len(str);
	for(i=0,j=(len-1);i<=j;i++,j--)
    4ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ea6:	8f 5f       	subi	r24, 0xFF	; 255
    4ea8:	8c 83       	std	Y+4, r24	; 0x04
    4eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    4eac:	81 50       	subi	r24, 0x01	; 1
    4eae:	8b 83       	std	Y+3, r24	; 0x03
    4eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    4eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    4eb4:	89 17       	cp	r24, r25
    4eb6:	44 f6       	brge	.-112    	; 0x4e48 <string_reverse+0x28>
		temp=str[i];
		str[i]=str[j];
		str[j]=temp;

	}
}
    4eb8:	26 96       	adiw	r28, 0x06	; 6
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	f8 94       	cli
    4ebe:	de bf       	out	0x3e, r29	; 62
    4ec0:	0f be       	out	0x3f, r0	; 63
    4ec2:	cd bf       	out	0x3d, r28	; 61
    4ec4:	cf 91       	pop	r28
    4ec6:	df 91       	pop	r29
    4ec8:	08 95       	ret

00004eca <decimal_to_string>:

void decimal_to_string(s32 n,c8*str)
{
    4eca:	df 93       	push	r29
    4ecc:	cf 93       	push	r28
    4ece:	cd b7       	in	r28, 0x3d	; 61
    4ed0:	de b7       	in	r29, 0x3e	; 62
    4ed2:	61 97       	sbiw	r28, 0x11	; 17
    4ed4:	0f b6       	in	r0, 0x3f	; 63
    4ed6:	f8 94       	cli
    4ed8:	de bf       	out	0x3e, r29	; 62
    4eda:	0f be       	out	0x3f, r0	; 63
    4edc:	cd bf       	out	0x3d, r28	; 61
    4ede:	6c 87       	std	Y+12, r22	; 0x0c
    4ee0:	7d 87       	std	Y+13, r23	; 0x0d
    4ee2:	8e 87       	std	Y+14, r24	; 0x0e
    4ee4:	9f 87       	std	Y+15, r25	; 0x0f
    4ee6:	59 8b       	std	Y+17, r21	; 0x11
    4ee8:	48 8b       	std	Y+16, r20	; 0x10
	u8 rem,m=0;
    4eea:	1a 86       	std	Y+10, r1	; 0x0a
	s32 n2=n,n3=n;
    4eec:	8c 85       	ldd	r24, Y+12	; 0x0c
    4eee:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ef0:	ae 85       	ldd	r26, Y+14	; 0x0e
    4ef2:	bf 85       	ldd	r27, Y+15	; 0x0f
    4ef4:	8e 83       	std	Y+6, r24	; 0x06
    4ef6:	9f 83       	std	Y+7, r25	; 0x07
    4ef8:	a8 87       	std	Y+8, r26	; 0x08
    4efa:	b9 87       	std	Y+9, r27	; 0x09
    4efc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4efe:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f00:	ae 85       	ldd	r26, Y+14	; 0x0e
    4f02:	bf 85       	ldd	r27, Y+15	; 0x0f
    4f04:	8a 83       	std	Y+2, r24	; 0x02
    4f06:	9b 83       	std	Y+3, r25	; 0x03
    4f08:	ac 83       	std	Y+4, r26	; 0x04
    4f0a:	bd 83       	std	Y+5, r27	; 0x05
	u8 i=0;
    4f0c:	19 82       	std	Y+1, r1	; 0x01
	
	if(n2<0)
    4f0e:	8e 81       	ldd	r24, Y+6	; 0x06
    4f10:	9f 81       	ldd	r25, Y+7	; 0x07
    4f12:	a8 85       	ldd	r26, Y+8	; 0x08
    4f14:	b9 85       	ldd	r27, Y+9	; 0x09
    4f16:	bb 23       	and	r27, r27
    4f18:	7c f4       	brge	.+30     	; 0x4f38 <decimal_to_string+0x6e>
	{
		n2=n2*-1;
    4f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    4f1c:	9f 81       	ldd	r25, Y+7	; 0x07
    4f1e:	a8 85       	ldd	r26, Y+8	; 0x08
    4f20:	b9 85       	ldd	r27, Y+9	; 0x09
    4f22:	b0 95       	com	r27
    4f24:	a0 95       	com	r26
    4f26:	90 95       	com	r25
    4f28:	81 95       	neg	r24
    4f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f2c:	af 4f       	sbci	r26, 0xFF	; 255
    4f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    4f30:	8e 83       	std	Y+6, r24	; 0x06
    4f32:	9f 83       	std	Y+7, r25	; 0x07
    4f34:	a8 87       	std	Y+8, r26	; 0x08
    4f36:	b9 87       	std	Y+9, r27	; 0x09
	}
	n3=n2;
    4f38:	8e 81       	ldd	r24, Y+6	; 0x06
    4f3a:	9f 81       	ldd	r25, Y+7	; 0x07
    4f3c:	a8 85       	ldd	r26, Y+8	; 0x08
    4f3e:	b9 85       	ldd	r27, Y+9	; 0x09
    4f40:	8a 83       	std	Y+2, r24	; 0x02
    4f42:	9b 83       	std	Y+3, r25	; 0x03
    4f44:	ac 83       	std	Y+4, r26	; 0x04
    4f46:	bd 83       	std	Y+5, r27	; 0x05
    4f48:	15 c0       	rjmp	.+42     	; 0x4f74 <decimal_to_string+0xaa>
	while(n3)
	{
		m++;
    4f4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f4c:	8f 5f       	subi	r24, 0xFF	; 255
    4f4e:	8a 87       	std	Y+10, r24	; 0x0a
		n3=n3/10;
    4f50:	8a 81       	ldd	r24, Y+2	; 0x02
    4f52:	9b 81       	ldd	r25, Y+3	; 0x03
    4f54:	ac 81       	ldd	r26, Y+4	; 0x04
    4f56:	bd 81       	ldd	r27, Y+5	; 0x05
    4f58:	2a e0       	ldi	r18, 0x0A	; 10
    4f5a:	30 e0       	ldi	r19, 0x00	; 0
    4f5c:	40 e0       	ldi	r20, 0x00	; 0
    4f5e:	50 e0       	ldi	r21, 0x00	; 0
    4f60:	bc 01       	movw	r22, r24
    4f62:	cd 01       	movw	r24, r26
    4f64:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__divmodsi4>
    4f68:	da 01       	movw	r26, r20
    4f6a:	c9 01       	movw	r24, r18
    4f6c:	8a 83       	std	Y+2, r24	; 0x02
    4f6e:	9b 83       	std	Y+3, r25	; 0x03
    4f70:	ac 83       	std	Y+4, r26	; 0x04
    4f72:	bd 83       	std	Y+5, r27	; 0x05
	if(n2<0)
	{
		n2=n2*-1;
	}
	n3=n2;
	while(n3)
    4f74:	8a 81       	ldd	r24, Y+2	; 0x02
    4f76:	9b 81       	ldd	r25, Y+3	; 0x03
    4f78:	ac 81       	ldd	r26, Y+4	; 0x04
    4f7a:	bd 81       	ldd	r27, Y+5	; 0x05
    4f7c:	00 97       	sbiw	r24, 0x00	; 0
    4f7e:	a1 05       	cpc	r26, r1
    4f80:	b1 05       	cpc	r27, r1
    4f82:	19 f7       	brne	.-58     	; 0x4f4a <decimal_to_string+0x80>
	{
		m++;
		n3=n3/10;
		
	}
	if(n2==0)
    4f84:	8e 81       	ldd	r24, Y+6	; 0x06
    4f86:	9f 81       	ldd	r25, Y+7	; 0x07
    4f88:	a8 85       	ldd	r26, Y+8	; 0x08
    4f8a:	b9 85       	ldd	r27, Y+9	; 0x09
    4f8c:	00 97       	sbiw	r24, 0x00	; 0
    4f8e:	a1 05       	cpc	r26, r1
    4f90:	b1 05       	cpc	r27, r1
    4f92:	e9 f5       	brne	.+122    	; 0x500e <decimal_to_string+0x144>
	{
		str[i]='0';
    4f94:	89 81       	ldd	r24, Y+1	; 0x01
    4f96:	28 2f       	mov	r18, r24
    4f98:	30 e0       	ldi	r19, 0x00	; 0
    4f9a:	88 89       	ldd	r24, Y+16	; 0x10
    4f9c:	99 89       	ldd	r25, Y+17	; 0x11
    4f9e:	fc 01       	movw	r30, r24
    4fa0:	e2 0f       	add	r30, r18
    4fa2:	f3 1f       	adc	r31, r19
    4fa4:	80 e3       	ldi	r24, 0x30	; 48
    4fa6:	80 83       	st	Z, r24
		i++;
    4fa8:	89 81       	ldd	r24, Y+1	; 0x01
    4faa:	8f 5f       	subi	r24, 0xFF	; 255
    4fac:	89 83       	std	Y+1, r24	; 0x01
    4fae:	2f c0       	rjmp	.+94     	; 0x500e <decimal_to_string+0x144>
	}
	while(n2)
	{
		rem=n2%10;
    4fb0:	8e 81       	ldd	r24, Y+6	; 0x06
    4fb2:	9f 81       	ldd	r25, Y+7	; 0x07
    4fb4:	a8 85       	ldd	r26, Y+8	; 0x08
    4fb6:	b9 85       	ldd	r27, Y+9	; 0x09
    4fb8:	2a e0       	ldi	r18, 0x0A	; 10
    4fba:	30 e0       	ldi	r19, 0x00	; 0
    4fbc:	40 e0       	ldi	r20, 0x00	; 0
    4fbe:	50 e0       	ldi	r21, 0x00	; 0
    4fc0:	bc 01       	movw	r22, r24
    4fc2:	cd 01       	movw	r24, r26
    4fc4:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__divmodsi4>
    4fc8:	dc 01       	movw	r26, r24
    4fca:	cb 01       	movw	r24, r22
    4fcc:	8b 87       	std	Y+11, r24	; 0x0b
		str[i]=rem+'0';
    4fce:	89 81       	ldd	r24, Y+1	; 0x01
    4fd0:	28 2f       	mov	r18, r24
    4fd2:	30 e0       	ldi	r19, 0x00	; 0
    4fd4:	88 89       	ldd	r24, Y+16	; 0x10
    4fd6:	99 89       	ldd	r25, Y+17	; 0x11
    4fd8:	fc 01       	movw	r30, r24
    4fda:	e2 0f       	add	r30, r18
    4fdc:	f3 1f       	adc	r31, r19
    4fde:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fe0:	80 5d       	subi	r24, 0xD0	; 208
    4fe2:	80 83       	st	Z, r24
		i++;
    4fe4:	89 81       	ldd	r24, Y+1	; 0x01
    4fe6:	8f 5f       	subi	r24, 0xFF	; 255
    4fe8:	89 83       	std	Y+1, r24	; 0x01
		n2=n2/10;
    4fea:	8e 81       	ldd	r24, Y+6	; 0x06
    4fec:	9f 81       	ldd	r25, Y+7	; 0x07
    4fee:	a8 85       	ldd	r26, Y+8	; 0x08
    4ff0:	b9 85       	ldd	r27, Y+9	; 0x09
    4ff2:	2a e0       	ldi	r18, 0x0A	; 10
    4ff4:	30 e0       	ldi	r19, 0x00	; 0
    4ff6:	40 e0       	ldi	r20, 0x00	; 0
    4ff8:	50 e0       	ldi	r21, 0x00	; 0
    4ffa:	bc 01       	movw	r22, r24
    4ffc:	cd 01       	movw	r24, r26
    4ffe:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__divmodsi4>
    5002:	da 01       	movw	r26, r20
    5004:	c9 01       	movw	r24, r18
    5006:	8e 83       	std	Y+6, r24	; 0x06
    5008:	9f 83       	std	Y+7, r25	; 0x07
    500a:	a8 87       	std	Y+8, r26	; 0x08
    500c:	b9 87       	std	Y+9, r27	; 0x09
	if(n2==0)
	{
		str[i]='0';
		i++;
	}
	while(n2)
    500e:	8e 81       	ldd	r24, Y+6	; 0x06
    5010:	9f 81       	ldd	r25, Y+7	; 0x07
    5012:	a8 85       	ldd	r26, Y+8	; 0x08
    5014:	b9 85       	ldd	r27, Y+9	; 0x09
    5016:	00 97       	sbiw	r24, 0x00	; 0
    5018:	a1 05       	cpc	r26, r1
    501a:	b1 05       	cpc	r27, r1
    501c:	49 f6       	brne	.-110    	; 0x4fb0 <decimal_to_string+0xe6>
		i++;
		n2=n2/10;
		//printf("rem=%d   n2=%d\n",rem,n2);

	}
	if(n<0)
    501e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5020:	9d 85       	ldd	r25, Y+13	; 0x0d
    5022:	ae 85       	ldd	r26, Y+14	; 0x0e
    5024:	bf 85       	ldd	r27, Y+15	; 0x0f
    5026:	bb 23       	and	r27, r27
    5028:	6c f4       	brge	.+26     	; 0x5044 <decimal_to_string+0x17a>
	{
		str[i]='-';
    502a:	89 81       	ldd	r24, Y+1	; 0x01
    502c:	28 2f       	mov	r18, r24
    502e:	30 e0       	ldi	r19, 0x00	; 0
    5030:	88 89       	ldd	r24, Y+16	; 0x10
    5032:	99 89       	ldd	r25, Y+17	; 0x11
    5034:	fc 01       	movw	r30, r24
    5036:	e2 0f       	add	r30, r18
    5038:	f3 1f       	adc	r31, r19
    503a:	8d e2       	ldi	r24, 0x2D	; 45
    503c:	80 83       	st	Z, r24
		i++;
    503e:	89 81       	ldd	r24, Y+1	; 0x01
    5040:	8f 5f       	subi	r24, 0xFF	; 255
    5042:	89 83       	std	Y+1, r24	; 0x01
	}
	str[i]=0;
    5044:	89 81       	ldd	r24, Y+1	; 0x01
    5046:	28 2f       	mov	r18, r24
    5048:	30 e0       	ldi	r19, 0x00	; 0
    504a:	88 89       	ldd	r24, Y+16	; 0x10
    504c:	99 89       	ldd	r25, Y+17	; 0x11
    504e:	fc 01       	movw	r30, r24
    5050:	e2 0f       	add	r30, r18
    5052:	f3 1f       	adc	r31, r19
    5054:	10 82       	st	Z, r1
	string_reverse(str);
    5056:	88 89       	ldd	r24, Y+16	; 0x10
    5058:	99 89       	ldd	r25, Y+17	; 0x11
    505a:	0e 94 10 27 	call	0x4e20	; 0x4e20 <string_reverse>

}
    505e:	61 96       	adiw	r28, 0x11	; 17
    5060:	0f b6       	in	r0, 0x3f	; 63
    5062:	f8 94       	cli
    5064:	de bf       	out	0x3e, r29	; 62
    5066:	0f be       	out	0x3f, r0	; 63
    5068:	cd bf       	out	0x3d, r28	; 61
    506a:	cf 91       	pop	r28
    506c:	df 91       	pop	r29
    506e:	08 95       	ret

00005070 <decimal_to_hex>:
void decimal_to_hex(u8 num,u8*str)
{
    5070:	df 93       	push	r29
    5072:	cf 93       	push	r28
    5074:	00 d0       	rcall	.+0      	; 0x5076 <decimal_to_hex+0x6>
    5076:	00 d0       	rcall	.+0      	; 0x5078 <decimal_to_hex+0x8>
    5078:	00 d0       	rcall	.+0      	; 0x507a <decimal_to_hex+0xa>
    507a:	cd b7       	in	r28, 0x3d	; 61
    507c:	de b7       	in	r29, 0x3e	; 62
    507e:	8c 83       	std	Y+4, r24	; 0x04
    5080:	7e 83       	std	Y+6, r23	; 0x06
    5082:	6d 83       	std	Y+5, r22	; 0x05
	u8 i=0,rem;
    5084:	1b 82       	std	Y+3, r1	; 0x03
	u8 n2=num;
    5086:	8c 81       	ldd	r24, Y+4	; 0x04
    5088:	89 83       	std	Y+1, r24	; 0x01
	str[0]='0';
    508a:	ed 81       	ldd	r30, Y+5	; 0x05
    508c:	fe 81       	ldd	r31, Y+6	; 0x06
    508e:	80 e3       	ldi	r24, 0x30	; 48
    5090:	80 83       	st	Z, r24
	str[1]='x';
    5092:	8d 81       	ldd	r24, Y+5	; 0x05
    5094:	9e 81       	ldd	r25, Y+6	; 0x06
    5096:	fc 01       	movw	r30, r24
    5098:	31 96       	adiw	r30, 0x01	; 1
    509a:	88 e7       	ldi	r24, 0x78	; 120
    509c:	80 83       	st	Z, r24
	i=2;
    509e:	82 e0       	ldi	r24, 0x02	; 2
    50a0:	8b 83       	std	Y+3, r24	; 0x03
    50a2:	3e c0       	rjmp	.+124    	; 0x5120 <decimal_to_hex+0xb0>
	while(n2)
	{
		
	  rem=n2%16;
    50a4:	89 81       	ldd	r24, Y+1	; 0x01
    50a6:	8f 70       	andi	r24, 0x0F	; 15
    50a8:	8a 83       	std	Y+2, r24	; 0x02
		
		if(rem>=0&&rem<=9)
    50aa:	8a 81       	ldd	r24, Y+2	; 0x02
    50ac:	8a 30       	cpi	r24, 0x0A	; 10
    50ae:	20 f4       	brcc	.+8      	; 0x50b8 <decimal_to_hex+0x48>
		{
			rem=rem+'0';
    50b0:	8a 81       	ldd	r24, Y+2	; 0x02
    50b2:	80 5d       	subi	r24, 0xD0	; 208
    50b4:	8a 83       	std	Y+2, r24	; 0x02
    50b6:	23 c0       	rjmp	.+70     	; 0x50fe <decimal_to_hex+0x8e>
		}
		else if(rem==10)
    50b8:	8a 81       	ldd	r24, Y+2	; 0x02
    50ba:	8a 30       	cpi	r24, 0x0A	; 10
    50bc:	19 f4       	brne	.+6      	; 0x50c4 <decimal_to_hex+0x54>
		{
			rem='A';
    50be:	81 e4       	ldi	r24, 0x41	; 65
    50c0:	8a 83       	std	Y+2, r24	; 0x02
    50c2:	1d c0       	rjmp	.+58     	; 0x50fe <decimal_to_hex+0x8e>
		}
		else if(rem==11)
    50c4:	8a 81       	ldd	r24, Y+2	; 0x02
    50c6:	8b 30       	cpi	r24, 0x0B	; 11
    50c8:	19 f4       	brne	.+6      	; 0x50d0 <decimal_to_hex+0x60>
		{
			rem='B';
    50ca:	82 e4       	ldi	r24, 0x42	; 66
    50cc:	8a 83       	std	Y+2, r24	; 0x02
    50ce:	17 c0       	rjmp	.+46     	; 0x50fe <decimal_to_hex+0x8e>
		}
		else if(rem==12)
    50d0:	8a 81       	ldd	r24, Y+2	; 0x02
    50d2:	8c 30       	cpi	r24, 0x0C	; 12
    50d4:	19 f4       	brne	.+6      	; 0x50dc <decimal_to_hex+0x6c>
		{
			rem='C';
    50d6:	83 e4       	ldi	r24, 0x43	; 67
    50d8:	8a 83       	std	Y+2, r24	; 0x02
    50da:	11 c0       	rjmp	.+34     	; 0x50fe <decimal_to_hex+0x8e>
		}
		else if(rem==13)
    50dc:	8a 81       	ldd	r24, Y+2	; 0x02
    50de:	8d 30       	cpi	r24, 0x0D	; 13
    50e0:	19 f4       	brne	.+6      	; 0x50e8 <decimal_to_hex+0x78>
		{
			rem='D';
    50e2:	84 e4       	ldi	r24, 0x44	; 68
    50e4:	8a 83       	std	Y+2, r24	; 0x02
    50e6:	0b c0       	rjmp	.+22     	; 0x50fe <decimal_to_hex+0x8e>
		}
		else if(rem==14)
    50e8:	8a 81       	ldd	r24, Y+2	; 0x02
    50ea:	8e 30       	cpi	r24, 0x0E	; 14
    50ec:	19 f4       	brne	.+6      	; 0x50f4 <decimal_to_hex+0x84>
		{
			rem='E';
    50ee:	85 e4       	ldi	r24, 0x45	; 69
    50f0:	8a 83       	std	Y+2, r24	; 0x02
    50f2:	05 c0       	rjmp	.+10     	; 0x50fe <decimal_to_hex+0x8e>
		}
		else if(rem==15)
    50f4:	8a 81       	ldd	r24, Y+2	; 0x02
    50f6:	8f 30       	cpi	r24, 0x0F	; 15
    50f8:	11 f4       	brne	.+4      	; 0x50fe <decimal_to_hex+0x8e>
		{
			rem='F';
    50fa:	86 e4       	ldi	r24, 0x46	; 70
    50fc:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		str[i++]=rem;
    50fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5100:	28 2f       	mov	r18, r24
    5102:	30 e0       	ldi	r19, 0x00	; 0
    5104:	8d 81       	ldd	r24, Y+5	; 0x05
    5106:	9e 81       	ldd	r25, Y+6	; 0x06
    5108:	fc 01       	movw	r30, r24
    510a:	e2 0f       	add	r30, r18
    510c:	f3 1f       	adc	r31, r19
    510e:	8a 81       	ldd	r24, Y+2	; 0x02
    5110:	80 83       	st	Z, r24
    5112:	8b 81       	ldd	r24, Y+3	; 0x03
    5114:	8f 5f       	subi	r24, 0xFF	; 255
    5116:	8b 83       	std	Y+3, r24	; 0x03
		n2=n2/16;
    5118:	89 81       	ldd	r24, Y+1	; 0x01
    511a:	82 95       	swap	r24
    511c:	8f 70       	andi	r24, 0x0F	; 15
    511e:	89 83       	std	Y+1, r24	; 0x01
	u8 i=0,rem;
	u8 n2=num;
	str[0]='0';
	str[1]='x';
	i=2;
	while(n2)
    5120:	89 81       	ldd	r24, Y+1	; 0x01
    5122:	88 23       	and	r24, r24
    5124:	09 f0       	breq	.+2      	; 0x5128 <decimal_to_hex+0xb8>
    5126:	be cf       	rjmp	.-132    	; 0x50a4 <decimal_to_hex+0x34>
		
		str[i++]=rem;
		n2=n2/16;
		
	}
	str[i]=0;
    5128:	8b 81       	ldd	r24, Y+3	; 0x03
    512a:	28 2f       	mov	r18, r24
    512c:	30 e0       	ldi	r19, 0x00	; 0
    512e:	8d 81       	ldd	r24, Y+5	; 0x05
    5130:	9e 81       	ldd	r25, Y+6	; 0x06
    5132:	fc 01       	movw	r30, r24
    5134:	e2 0f       	add	r30, r18
    5136:	f3 1f       	adc	r31, r19
    5138:	10 82       	st	Z, r1
	string_reverse(str+2);
    513a:	8d 81       	ldd	r24, Y+5	; 0x05
    513c:	9e 81       	ldd	r25, Y+6	; 0x06
    513e:	02 96       	adiw	r24, 0x02	; 2
    5140:	0e 94 10 27 	call	0x4e20	; 0x4e20 <string_reverse>
	
	
}
    5144:	26 96       	adiw	r28, 0x06	; 6
    5146:	0f b6       	in	r0, 0x3f	; 63
    5148:	f8 94       	cli
    514a:	de bf       	out	0x3e, r29	; 62
    514c:	0f be       	out	0x3f, r0	; 63
    514e:	cd bf       	out	0x3d, r28	; 61
    5150:	cf 91       	pop	r28
    5152:	df 91       	pop	r29
    5154:	08 95       	ret

00005156 <decimal_to_binary>:

void decimal_to_binary(u8 num,c8*str)
{
    5156:	df 93       	push	r29
    5158:	cf 93       	push	r28
    515a:	00 d0       	rcall	.+0      	; 0x515c <decimal_to_binary+0x6>
    515c:	00 d0       	rcall	.+0      	; 0x515e <decimal_to_binary+0x8>
    515e:	00 d0       	rcall	.+0      	; 0x5160 <decimal_to_binary+0xa>
    5160:	cd b7       	in	r28, 0x3d	; 61
    5162:	de b7       	in	r29, 0x3e	; 62
    5164:	8c 83       	std	Y+4, r24	; 0x04
    5166:	7e 83       	std	Y+6, r23	; 0x06
    5168:	6d 83       	std	Y+5, r22	; 0x05
	u8 j=0,flag=0;
    516a:	1b 82       	std	Y+3, r1	; 0x03
    516c:	1a 82       	std	Y+2, r1	; 0x02
	s8 i=7;
    516e:	87 e0       	ldi	r24, 0x07	; 7
    5170:	89 83       	std	Y+1, r24	; 0x01
	str[0]='0';
    5172:	ed 81       	ldd	r30, Y+5	; 0x05
    5174:	fe 81       	ldd	r31, Y+6	; 0x06
    5176:	80 e3       	ldi	r24, 0x30	; 48
    5178:	80 83       	st	Z, r24
	str[1]='b';
    517a:	8d 81       	ldd	r24, Y+5	; 0x05
    517c:	9e 81       	ldd	r25, Y+6	; 0x06
    517e:	fc 01       	movw	r30, r24
    5180:	31 96       	adiw	r30, 0x01	; 1
    5182:	82 e6       	ldi	r24, 0x62	; 98
    5184:	80 83       	st	Z, r24
	j=2;
    5186:	82 e0       	ldi	r24, 0x02	; 2
    5188:	8b 83       	std	Y+3, r24	; 0x03
	for(i=7;i>=0;i--)
    518a:	87 e0       	ldi	r24, 0x07	; 7
    518c:	89 83       	std	Y+1, r24	; 0x01
    518e:	47 c0       	rjmp	.+142    	; 0x521e <decimal_to_binary+0xc8>
	{
		if(READ_BIT(num,i)==1)
    5190:	8c 81       	ldd	r24, Y+4	; 0x04
    5192:	28 2f       	mov	r18, r24
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	89 81       	ldd	r24, Y+1	; 0x01
    5198:	99 27       	eor	r25, r25
    519a:	87 fd       	sbrc	r24, 7
    519c:	90 95       	com	r25
    519e:	a9 01       	movw	r20, r18
    51a0:	02 c0       	rjmp	.+4      	; 0x51a6 <decimal_to_binary+0x50>
    51a2:	55 95       	asr	r21
    51a4:	47 95       	ror	r20
    51a6:	8a 95       	dec	r24
    51a8:	e2 f7       	brpl	.-8      	; 0x51a2 <decimal_to_binary+0x4c>
    51aa:	ca 01       	movw	r24, r20
    51ac:	81 70       	andi	r24, 0x01	; 1
    51ae:	90 70       	andi	r25, 0x00	; 0
    51b0:	88 23       	and	r24, r24
    51b2:	81 f0       	breq	.+32     	; 0x51d4 <decimal_to_binary+0x7e>
		{
			str[j++]='1';
    51b4:	8b 81       	ldd	r24, Y+3	; 0x03
    51b6:	28 2f       	mov	r18, r24
    51b8:	30 e0       	ldi	r19, 0x00	; 0
    51ba:	8d 81       	ldd	r24, Y+5	; 0x05
    51bc:	9e 81       	ldd	r25, Y+6	; 0x06
    51be:	fc 01       	movw	r30, r24
    51c0:	e2 0f       	add	r30, r18
    51c2:	f3 1f       	adc	r31, r19
    51c4:	81 e3       	ldi	r24, 0x31	; 49
    51c6:	80 83       	st	Z, r24
    51c8:	8b 81       	ldd	r24, Y+3	; 0x03
    51ca:	8f 5f       	subi	r24, 0xFF	; 255
    51cc:	8b 83       	std	Y+3, r24	; 0x03
			
			flag=1;
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	8a 83       	std	Y+2, r24	; 0x02
    51d2:	22 c0       	rjmp	.+68     	; 0x5218 <decimal_to_binary+0xc2>
		}
		else if(READ_BIT(num,i)==0&&flag==1)
    51d4:	8c 81       	ldd	r24, Y+4	; 0x04
    51d6:	28 2f       	mov	r18, r24
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	89 81       	ldd	r24, Y+1	; 0x01
    51dc:	99 27       	eor	r25, r25
    51de:	87 fd       	sbrc	r24, 7
    51e0:	90 95       	com	r25
    51e2:	a9 01       	movw	r20, r18
    51e4:	02 c0       	rjmp	.+4      	; 0x51ea <decimal_to_binary+0x94>
    51e6:	55 95       	asr	r21
    51e8:	47 95       	ror	r20
    51ea:	8a 95       	dec	r24
    51ec:	e2 f7       	brpl	.-8      	; 0x51e6 <decimal_to_binary+0x90>
    51ee:	ca 01       	movw	r24, r20
    51f0:	81 70       	andi	r24, 0x01	; 1
    51f2:	90 70       	andi	r25, 0x00	; 0
    51f4:	00 97       	sbiw	r24, 0x00	; 0
    51f6:	81 f4       	brne	.+32     	; 0x5218 <decimal_to_binary+0xc2>
    51f8:	8a 81       	ldd	r24, Y+2	; 0x02
    51fa:	81 30       	cpi	r24, 0x01	; 1
    51fc:	69 f4       	brne	.+26     	; 0x5218 <decimal_to_binary+0xc2>
		{
			str[j++]='0';
    51fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5200:	28 2f       	mov	r18, r24
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	8d 81       	ldd	r24, Y+5	; 0x05
    5206:	9e 81       	ldd	r25, Y+6	; 0x06
    5208:	fc 01       	movw	r30, r24
    520a:	e2 0f       	add	r30, r18
    520c:	f3 1f       	adc	r31, r19
    520e:	80 e3       	ldi	r24, 0x30	; 48
    5210:	80 83       	st	Z, r24
    5212:	8b 81       	ldd	r24, Y+3	; 0x03
    5214:	8f 5f       	subi	r24, 0xFF	; 255
    5216:	8b 83       	std	Y+3, r24	; 0x03
	u8 j=0,flag=0;
	s8 i=7;
	str[0]='0';
	str[1]='b';
	j=2;
	for(i=7;i>=0;i--)
    5218:	89 81       	ldd	r24, Y+1	; 0x01
    521a:	81 50       	subi	r24, 0x01	; 1
    521c:	89 83       	std	Y+1, r24	; 0x01
    521e:	89 81       	ldd	r24, Y+1	; 0x01
    5220:	88 23       	and	r24, r24
    5222:	0c f0       	brlt	.+2      	; 0x5226 <decimal_to_binary+0xd0>
    5224:	b5 cf       	rjmp	.-150    	; 0x5190 <decimal_to_binary+0x3a>
		else if(READ_BIT(num,i)==0&&flag==1)
		{
			str[j++]='0';
		}
	}
	str[j]=0;
    5226:	8b 81       	ldd	r24, Y+3	; 0x03
    5228:	28 2f       	mov	r18, r24
    522a:	30 e0       	ldi	r19, 0x00	; 0
    522c:	8d 81       	ldd	r24, Y+5	; 0x05
    522e:	9e 81       	ldd	r25, Y+6	; 0x06
    5230:	fc 01       	movw	r30, r24
    5232:	e2 0f       	add	r30, r18
    5234:	f3 1f       	adc	r31, r19
    5236:	10 82       	st	Z, r1
	
}
    5238:	26 96       	adiw	r28, 0x06	; 6
    523a:	0f b6       	in	r0, 0x3f	; 63
    523c:	f8 94       	cli
    523e:	de bf       	out	0x3e, r29	; 62
    5240:	0f be       	out	0x3f, r0	; 63
    5242:	cd bf       	out	0x3d, r28	; 61
    5244:	cf 91       	pop	r28
    5246:	df 91       	pop	r29
    5248:	08 95       	ret

0000524a <Write_Ins>:
	

#else

static void Write_Ins(u8 ins)
{
    524a:	df 93       	push	r29
    524c:	cf 93       	push	r28
    524e:	cd b7       	in	r28, 0x3d	; 61
    5250:	de b7       	in	r29, 0x3e	; 62
    5252:	6d 97       	sbiw	r28, 0x1d	; 29
    5254:	0f b6       	in	r0, 0x3f	; 63
    5256:	f8 94       	cli
    5258:	de bf       	out	0x3e, r29	; 62
    525a:	0f be       	out	0x3f, r0	; 63
    525c:	cd bf       	out	0x3d, r28	; 61
    525e:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_WritePin(RS,LOW);
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	60 e0       	ldi	r22, 0x00	; 0
    5264:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(ins,7));
    5268:	8d 8d       	ldd	r24, Y+29	; 0x1d
    526a:	98 2f       	mov	r25, r24
    526c:	99 1f       	adc	r25, r25
    526e:	99 27       	eor	r25, r25
    5270:	99 1f       	adc	r25, r25
    5272:	86 e0       	ldi	r24, 0x06	; 6
    5274:	69 2f       	mov	r22, r25
    5276:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
    527a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    527c:	82 95       	swap	r24
    527e:	86 95       	lsr	r24
    5280:	86 95       	lsr	r24
    5282:	83 70       	andi	r24, 0x03	; 3
    5284:	98 2f       	mov	r25, r24
    5286:	91 70       	andi	r25, 0x01	; 1
    5288:	85 e0       	ldi	r24, 0x05	; 5
    528a:	69 2f       	mov	r22, r25
    528c:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
    5290:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5292:	82 95       	swap	r24
    5294:	86 95       	lsr	r24
    5296:	87 70       	andi	r24, 0x07	; 7
    5298:	98 2f       	mov	r25, r24
    529a:	91 70       	andi	r25, 0x01	; 1
    529c:	84 e0       	ldi	r24, 0x04	; 4
    529e:	69 2f       	mov	r22, r25
    52a0:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
    52a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52a6:	82 95       	swap	r24
    52a8:	8f 70       	andi	r24, 0x0F	; 15
    52aa:	98 2f       	mov	r25, r24
    52ac:	91 70       	andi	r25, 0x01	; 1
    52ae:	83 e0       	ldi	r24, 0x03	; 3
    52b0:	69 2f       	mov	r22, r25
    52b2:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	
	DIO_WritePin(EN,HIGH);
    52b6:	82 e0       	ldi	r24, 0x02	; 2
    52b8:	61 e0       	ldi	r22, 0x01	; 1
    52ba:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
    52be:	80 e0       	ldi	r24, 0x00	; 0
    52c0:	90 e0       	ldi	r25, 0x00	; 0
    52c2:	a0 e8       	ldi	r26, 0x80	; 128
    52c4:	bf e3       	ldi	r27, 0x3F	; 63
    52c6:	89 8f       	std	Y+25, r24	; 0x19
    52c8:	9a 8f       	std	Y+26, r25	; 0x1a
    52ca:	ab 8f       	std	Y+27, r26	; 0x1b
    52cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52ce:	69 8d       	ldd	r22, Y+25	; 0x19
    52d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52d6:	20 e0       	ldi	r18, 0x00	; 0
    52d8:	30 e0       	ldi	r19, 0x00	; 0
    52da:	4a ef       	ldi	r20, 0xFA	; 250
    52dc:	54 e4       	ldi	r21, 0x44	; 68
    52de:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    52e2:	dc 01       	movw	r26, r24
    52e4:	cb 01       	movw	r24, r22
    52e6:	8d 8b       	std	Y+21, r24	; 0x15
    52e8:	9e 8b       	std	Y+22, r25	; 0x16
    52ea:	af 8b       	std	Y+23, r26	; 0x17
    52ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    52ee:	6d 89       	ldd	r22, Y+21	; 0x15
    52f0:	7e 89       	ldd	r23, Y+22	; 0x16
    52f2:	8f 89       	ldd	r24, Y+23	; 0x17
    52f4:	98 8d       	ldd	r25, Y+24	; 0x18
    52f6:	20 e0       	ldi	r18, 0x00	; 0
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	40 e8       	ldi	r20, 0x80	; 128
    52fc:	5f e3       	ldi	r21, 0x3F	; 63
    52fe:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    5302:	88 23       	and	r24, r24
    5304:	2c f4       	brge	.+10     	; 0x5310 <Write_Ins+0xc6>
		__ticks = 1;
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	9c 8b       	std	Y+20, r25	; 0x14
    530c:	8b 8b       	std	Y+19, r24	; 0x13
    530e:	3f c0       	rjmp	.+126    	; 0x538e <Write_Ins+0x144>
	else if (__tmp > 65535)
    5310:	6d 89       	ldd	r22, Y+21	; 0x15
    5312:	7e 89       	ldd	r23, Y+22	; 0x16
    5314:	8f 89       	ldd	r24, Y+23	; 0x17
    5316:	98 8d       	ldd	r25, Y+24	; 0x18
    5318:	20 e0       	ldi	r18, 0x00	; 0
    531a:	3f ef       	ldi	r19, 0xFF	; 255
    531c:	4f e7       	ldi	r20, 0x7F	; 127
    531e:	57 e4       	ldi	r21, 0x47	; 71
    5320:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    5324:	18 16       	cp	r1, r24
    5326:	4c f5       	brge	.+82     	; 0x537a <Write_Ins+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5328:	69 8d       	ldd	r22, Y+25	; 0x19
    532a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    532c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    532e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5330:	20 e0       	ldi	r18, 0x00	; 0
    5332:	30 e0       	ldi	r19, 0x00	; 0
    5334:	40 e2       	ldi	r20, 0x20	; 32
    5336:	51 e4       	ldi	r21, 0x41	; 65
    5338:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    533c:	dc 01       	movw	r26, r24
    533e:	cb 01       	movw	r24, r22
    5340:	bc 01       	movw	r22, r24
    5342:	cd 01       	movw	r24, r26
    5344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5348:	dc 01       	movw	r26, r24
    534a:	cb 01       	movw	r24, r22
    534c:	9c 8b       	std	Y+20, r25	; 0x14
    534e:	8b 8b       	std	Y+19, r24	; 0x13
    5350:	0f c0       	rjmp	.+30     	; 0x5370 <Write_Ins+0x126>
    5352:	88 ec       	ldi	r24, 0xC8	; 200
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	9a 8b       	std	Y+18, r25	; 0x12
    5358:	89 8b       	std	Y+17, r24	; 0x11
    535a:	89 89       	ldd	r24, Y+17	; 0x11
    535c:	9a 89       	ldd	r25, Y+18	; 0x12
    535e:	01 97       	sbiw	r24, 0x01	; 1
    5360:	f1 f7       	brne	.-4      	; 0x535e <Write_Ins+0x114>
    5362:	9a 8b       	std	Y+18, r25	; 0x12
    5364:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5366:	8b 89       	ldd	r24, Y+19	; 0x13
    5368:	9c 89       	ldd	r25, Y+20	; 0x14
    536a:	01 97       	sbiw	r24, 0x01	; 1
    536c:	9c 8b       	std	Y+20, r25	; 0x14
    536e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5370:	8b 89       	ldd	r24, Y+19	; 0x13
    5372:	9c 89       	ldd	r25, Y+20	; 0x14
    5374:	00 97       	sbiw	r24, 0x00	; 0
    5376:	69 f7       	brne	.-38     	; 0x5352 <Write_Ins+0x108>
    5378:	14 c0       	rjmp	.+40     	; 0x53a2 <Write_Ins+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    537a:	6d 89       	ldd	r22, Y+21	; 0x15
    537c:	7e 89       	ldd	r23, Y+22	; 0x16
    537e:	8f 89       	ldd	r24, Y+23	; 0x17
    5380:	98 8d       	ldd	r25, Y+24	; 0x18
    5382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5386:	dc 01       	movw	r26, r24
    5388:	cb 01       	movw	r24, r22
    538a:	9c 8b       	std	Y+20, r25	; 0x14
    538c:	8b 8b       	std	Y+19, r24	; 0x13
    538e:	8b 89       	ldd	r24, Y+19	; 0x13
    5390:	9c 89       	ldd	r25, Y+20	; 0x14
    5392:	98 8b       	std	Y+16, r25	; 0x10
    5394:	8f 87       	std	Y+15, r24	; 0x0f
    5396:	8f 85       	ldd	r24, Y+15	; 0x0f
    5398:	98 89       	ldd	r25, Y+16	; 0x10
    539a:	01 97       	sbiw	r24, 0x01	; 1
    539c:	f1 f7       	brne	.-4      	; 0x539a <Write_Ins+0x150>
    539e:	98 8b       	std	Y+16, r25	; 0x10
    53a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    53a2:	82 e0       	ldi	r24, 0x02	; 2
    53a4:	60 e0       	ldi	r22, 0x00	; 0
    53a6:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	
	
	DIO_WritePin(D7,READ_BIT(ins,3));
    53aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53ac:	86 95       	lsr	r24
    53ae:	86 95       	lsr	r24
    53b0:	86 95       	lsr	r24
    53b2:	98 2f       	mov	r25, r24
    53b4:	91 70       	andi	r25, 0x01	; 1
    53b6:	86 e0       	ldi	r24, 0x06	; 6
    53b8:	69 2f       	mov	r22, r25
    53ba:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,2));
    53be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53c0:	86 95       	lsr	r24
    53c2:	86 95       	lsr	r24
    53c4:	98 2f       	mov	r25, r24
    53c6:	91 70       	andi	r25, 0x01	; 1
    53c8:	85 e0       	ldi	r24, 0x05	; 5
    53ca:	69 2f       	mov	r22, r25
    53cc:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,1));
    53d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53d2:	86 95       	lsr	r24
    53d4:	98 2f       	mov	r25, r24
    53d6:	91 70       	andi	r25, 0x01	; 1
    53d8:	84 e0       	ldi	r24, 0x04	; 4
    53da:	69 2f       	mov	r22, r25
    53dc:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,0));
    53e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53e2:	98 2f       	mov	r25, r24
    53e4:	91 70       	andi	r25, 0x01	; 1
    53e6:	83 e0       	ldi	r24, 0x03	; 3
    53e8:	69 2f       	mov	r22, r25
    53ea:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	
	DIO_WritePin(EN,HIGH);
    53ee:	82 e0       	ldi	r24, 0x02	; 2
    53f0:	61 e0       	ldi	r22, 0x01	; 1
    53f2:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
    53f6:	80 e0       	ldi	r24, 0x00	; 0
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	a0 e8       	ldi	r26, 0x80	; 128
    53fc:	bf e3       	ldi	r27, 0x3F	; 63
    53fe:	8b 87       	std	Y+11, r24	; 0x0b
    5400:	9c 87       	std	Y+12, r25	; 0x0c
    5402:	ad 87       	std	Y+13, r26	; 0x0d
    5404:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5406:	6b 85       	ldd	r22, Y+11	; 0x0b
    5408:	7c 85       	ldd	r23, Y+12	; 0x0c
    540a:	8d 85       	ldd	r24, Y+13	; 0x0d
    540c:	9e 85       	ldd	r25, Y+14	; 0x0e
    540e:	20 e0       	ldi	r18, 0x00	; 0
    5410:	30 e0       	ldi	r19, 0x00	; 0
    5412:	4a ef       	ldi	r20, 0xFA	; 250
    5414:	54 e4       	ldi	r21, 0x44	; 68
    5416:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    541a:	dc 01       	movw	r26, r24
    541c:	cb 01       	movw	r24, r22
    541e:	8f 83       	std	Y+7, r24	; 0x07
    5420:	98 87       	std	Y+8, r25	; 0x08
    5422:	a9 87       	std	Y+9, r26	; 0x09
    5424:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5426:	6f 81       	ldd	r22, Y+7	; 0x07
    5428:	78 85       	ldd	r23, Y+8	; 0x08
    542a:	89 85       	ldd	r24, Y+9	; 0x09
    542c:	9a 85       	ldd	r25, Y+10	; 0x0a
    542e:	20 e0       	ldi	r18, 0x00	; 0
    5430:	30 e0       	ldi	r19, 0x00	; 0
    5432:	40 e8       	ldi	r20, 0x80	; 128
    5434:	5f e3       	ldi	r21, 0x3F	; 63
    5436:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    543a:	88 23       	and	r24, r24
    543c:	2c f4       	brge	.+10     	; 0x5448 <Write_Ins+0x1fe>
		__ticks = 1;
    543e:	81 e0       	ldi	r24, 0x01	; 1
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	9e 83       	std	Y+6, r25	; 0x06
    5444:	8d 83       	std	Y+5, r24	; 0x05
    5446:	3f c0       	rjmp	.+126    	; 0x54c6 <Write_Ins+0x27c>
	else if (__tmp > 65535)
    5448:	6f 81       	ldd	r22, Y+7	; 0x07
    544a:	78 85       	ldd	r23, Y+8	; 0x08
    544c:	89 85       	ldd	r24, Y+9	; 0x09
    544e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5450:	20 e0       	ldi	r18, 0x00	; 0
    5452:	3f ef       	ldi	r19, 0xFF	; 255
    5454:	4f e7       	ldi	r20, 0x7F	; 127
    5456:	57 e4       	ldi	r21, 0x47	; 71
    5458:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    545c:	18 16       	cp	r1, r24
    545e:	4c f5       	brge	.+82     	; 0x54b2 <Write_Ins+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5460:	6b 85       	ldd	r22, Y+11	; 0x0b
    5462:	7c 85       	ldd	r23, Y+12	; 0x0c
    5464:	8d 85       	ldd	r24, Y+13	; 0x0d
    5466:	9e 85       	ldd	r25, Y+14	; 0x0e
    5468:	20 e0       	ldi	r18, 0x00	; 0
    546a:	30 e0       	ldi	r19, 0x00	; 0
    546c:	40 e2       	ldi	r20, 0x20	; 32
    546e:	51 e4       	ldi	r21, 0x41	; 65
    5470:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5474:	dc 01       	movw	r26, r24
    5476:	cb 01       	movw	r24, r22
    5478:	bc 01       	movw	r22, r24
    547a:	cd 01       	movw	r24, r26
    547c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	9e 83       	std	Y+6, r25	; 0x06
    5486:	8d 83       	std	Y+5, r24	; 0x05
    5488:	0f c0       	rjmp	.+30     	; 0x54a8 <Write_Ins+0x25e>
    548a:	88 ec       	ldi	r24, 0xC8	; 200
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	9c 83       	std	Y+4, r25	; 0x04
    5490:	8b 83       	std	Y+3, r24	; 0x03
    5492:	8b 81       	ldd	r24, Y+3	; 0x03
    5494:	9c 81       	ldd	r25, Y+4	; 0x04
    5496:	01 97       	sbiw	r24, 0x01	; 1
    5498:	f1 f7       	brne	.-4      	; 0x5496 <Write_Ins+0x24c>
    549a:	9c 83       	std	Y+4, r25	; 0x04
    549c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    549e:	8d 81       	ldd	r24, Y+5	; 0x05
    54a0:	9e 81       	ldd	r25, Y+6	; 0x06
    54a2:	01 97       	sbiw	r24, 0x01	; 1
    54a4:	9e 83       	std	Y+6, r25	; 0x06
    54a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54a8:	8d 81       	ldd	r24, Y+5	; 0x05
    54aa:	9e 81       	ldd	r25, Y+6	; 0x06
    54ac:	00 97       	sbiw	r24, 0x00	; 0
    54ae:	69 f7       	brne	.-38     	; 0x548a <Write_Ins+0x240>
    54b0:	14 c0       	rjmp	.+40     	; 0x54da <Write_Ins+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54b2:	6f 81       	ldd	r22, Y+7	; 0x07
    54b4:	78 85       	ldd	r23, Y+8	; 0x08
    54b6:	89 85       	ldd	r24, Y+9	; 0x09
    54b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    54ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54be:	dc 01       	movw	r26, r24
    54c0:	cb 01       	movw	r24, r22
    54c2:	9e 83       	std	Y+6, r25	; 0x06
    54c4:	8d 83       	std	Y+5, r24	; 0x05
    54c6:	8d 81       	ldd	r24, Y+5	; 0x05
    54c8:	9e 81       	ldd	r25, Y+6	; 0x06
    54ca:	9a 83       	std	Y+2, r25	; 0x02
    54cc:	89 83       	std	Y+1, r24	; 0x01
    54ce:	89 81       	ldd	r24, Y+1	; 0x01
    54d0:	9a 81       	ldd	r25, Y+2	; 0x02
    54d2:	01 97       	sbiw	r24, 0x01	; 1
    54d4:	f1 f7       	brne	.-4      	; 0x54d2 <Write_Ins+0x288>
    54d6:	9a 83       	std	Y+2, r25	; 0x02
    54d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    54da:	82 e0       	ldi	r24, 0x02	; 2
    54dc:	60 e0       	ldi	r22, 0x00	; 0
    54de:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	
	
	
}
    54e2:	6d 96       	adiw	r28, 0x1d	; 29
    54e4:	0f b6       	in	r0, 0x3f	; 63
    54e6:	f8 94       	cli
    54e8:	de bf       	out	0x3e, r29	; 62
    54ea:	0f be       	out	0x3f, r0	; 63
    54ec:	cd bf       	out	0x3d, r28	; 61
    54ee:	cf 91       	pop	r28
    54f0:	df 91       	pop	r29
    54f2:	08 95       	ret

000054f4 <Write_Data>:

static void Write_Data(u8 data)
{
    54f4:	df 93       	push	r29
    54f6:	cf 93       	push	r28
    54f8:	cd b7       	in	r28, 0x3d	; 61
    54fa:	de b7       	in	r29, 0x3e	; 62
    54fc:	6d 97       	sbiw	r28, 0x1d	; 29
    54fe:	0f b6       	in	r0, 0x3f	; 63
    5500:	f8 94       	cli
    5502:	de bf       	out	0x3e, r29	; 62
    5504:	0f be       	out	0x3f, r0	; 63
    5506:	cd bf       	out	0x3d, r28	; 61
    5508:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_WritePin(RS,HIGH);
    550a:	81 e0       	ldi	r24, 0x01	; 1
    550c:	61 e0       	ldi	r22, 0x01	; 1
    550e:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	
	DIO_WritePin(D7,READ_BIT(data,7));
    5512:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5514:	98 2f       	mov	r25, r24
    5516:	99 1f       	adc	r25, r25
    5518:	99 27       	eor	r25, r25
    551a:	99 1f       	adc	r25, r25
    551c:	86 e0       	ldi	r24, 0x06	; 6
    551e:	69 2f       	mov	r22, r25
    5520:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,6));
    5524:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5526:	82 95       	swap	r24
    5528:	86 95       	lsr	r24
    552a:	86 95       	lsr	r24
    552c:	83 70       	andi	r24, 0x03	; 3
    552e:	98 2f       	mov	r25, r24
    5530:	91 70       	andi	r25, 0x01	; 1
    5532:	85 e0       	ldi	r24, 0x05	; 5
    5534:	69 2f       	mov	r22, r25
    5536:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,5));
    553a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    553c:	82 95       	swap	r24
    553e:	86 95       	lsr	r24
    5540:	87 70       	andi	r24, 0x07	; 7
    5542:	98 2f       	mov	r25, r24
    5544:	91 70       	andi	r25, 0x01	; 1
    5546:	84 e0       	ldi	r24, 0x04	; 4
    5548:	69 2f       	mov	r22, r25
    554a:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,4));
    554e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5550:	82 95       	swap	r24
    5552:	8f 70       	andi	r24, 0x0F	; 15
    5554:	98 2f       	mov	r25, r24
    5556:	91 70       	andi	r25, 0x01	; 1
    5558:	83 e0       	ldi	r24, 0x03	; 3
    555a:	69 2f       	mov	r22, r25
    555c:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	
	DIO_WritePin(EN,HIGH);
    5560:	82 e0       	ldi	r24, 0x02	; 2
    5562:	61 e0       	ldi	r22, 0x01	; 1
    5564:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
    5568:	80 e0       	ldi	r24, 0x00	; 0
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	a0 e8       	ldi	r26, 0x80	; 128
    556e:	bf e3       	ldi	r27, 0x3F	; 63
    5570:	89 8f       	std	Y+25, r24	; 0x19
    5572:	9a 8f       	std	Y+26, r25	; 0x1a
    5574:	ab 8f       	std	Y+27, r26	; 0x1b
    5576:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5578:	69 8d       	ldd	r22, Y+25	; 0x19
    557a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    557c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    557e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5580:	20 e0       	ldi	r18, 0x00	; 0
    5582:	30 e0       	ldi	r19, 0x00	; 0
    5584:	4a ef       	ldi	r20, 0xFA	; 250
    5586:	54 e4       	ldi	r21, 0x44	; 68
    5588:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    558c:	dc 01       	movw	r26, r24
    558e:	cb 01       	movw	r24, r22
    5590:	8d 8b       	std	Y+21, r24	; 0x15
    5592:	9e 8b       	std	Y+22, r25	; 0x16
    5594:	af 8b       	std	Y+23, r26	; 0x17
    5596:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5598:	6d 89       	ldd	r22, Y+21	; 0x15
    559a:	7e 89       	ldd	r23, Y+22	; 0x16
    559c:	8f 89       	ldd	r24, Y+23	; 0x17
    559e:	98 8d       	ldd	r25, Y+24	; 0x18
    55a0:	20 e0       	ldi	r18, 0x00	; 0
    55a2:	30 e0       	ldi	r19, 0x00	; 0
    55a4:	40 e8       	ldi	r20, 0x80	; 128
    55a6:	5f e3       	ldi	r21, 0x3F	; 63
    55a8:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    55ac:	88 23       	and	r24, r24
    55ae:	2c f4       	brge	.+10     	; 0x55ba <Write_Data+0xc6>
		__ticks = 1;
    55b0:	81 e0       	ldi	r24, 0x01	; 1
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	9c 8b       	std	Y+20, r25	; 0x14
    55b6:	8b 8b       	std	Y+19, r24	; 0x13
    55b8:	3f c0       	rjmp	.+126    	; 0x5638 <Write_Data+0x144>
	else if (__tmp > 65535)
    55ba:	6d 89       	ldd	r22, Y+21	; 0x15
    55bc:	7e 89       	ldd	r23, Y+22	; 0x16
    55be:	8f 89       	ldd	r24, Y+23	; 0x17
    55c0:	98 8d       	ldd	r25, Y+24	; 0x18
    55c2:	20 e0       	ldi	r18, 0x00	; 0
    55c4:	3f ef       	ldi	r19, 0xFF	; 255
    55c6:	4f e7       	ldi	r20, 0x7F	; 127
    55c8:	57 e4       	ldi	r21, 0x47	; 71
    55ca:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    55ce:	18 16       	cp	r1, r24
    55d0:	4c f5       	brge	.+82     	; 0x5624 <Write_Data+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55d2:	69 8d       	ldd	r22, Y+25	; 0x19
    55d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55da:	20 e0       	ldi	r18, 0x00	; 0
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	40 e2       	ldi	r20, 0x20	; 32
    55e0:	51 e4       	ldi	r21, 0x41	; 65
    55e2:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    55e6:	dc 01       	movw	r26, r24
    55e8:	cb 01       	movw	r24, r22
    55ea:	bc 01       	movw	r22, r24
    55ec:	cd 01       	movw	r24, r26
    55ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55f2:	dc 01       	movw	r26, r24
    55f4:	cb 01       	movw	r24, r22
    55f6:	9c 8b       	std	Y+20, r25	; 0x14
    55f8:	8b 8b       	std	Y+19, r24	; 0x13
    55fa:	0f c0       	rjmp	.+30     	; 0x561a <Write_Data+0x126>
    55fc:	88 ec       	ldi	r24, 0xC8	; 200
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	9a 8b       	std	Y+18, r25	; 0x12
    5602:	89 8b       	std	Y+17, r24	; 0x11
    5604:	89 89       	ldd	r24, Y+17	; 0x11
    5606:	9a 89       	ldd	r25, Y+18	; 0x12
    5608:	01 97       	sbiw	r24, 0x01	; 1
    560a:	f1 f7       	brne	.-4      	; 0x5608 <Write_Data+0x114>
    560c:	9a 8b       	std	Y+18, r25	; 0x12
    560e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5610:	8b 89       	ldd	r24, Y+19	; 0x13
    5612:	9c 89       	ldd	r25, Y+20	; 0x14
    5614:	01 97       	sbiw	r24, 0x01	; 1
    5616:	9c 8b       	std	Y+20, r25	; 0x14
    5618:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    561a:	8b 89       	ldd	r24, Y+19	; 0x13
    561c:	9c 89       	ldd	r25, Y+20	; 0x14
    561e:	00 97       	sbiw	r24, 0x00	; 0
    5620:	69 f7       	brne	.-38     	; 0x55fc <Write_Data+0x108>
    5622:	14 c0       	rjmp	.+40     	; 0x564c <Write_Data+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5624:	6d 89       	ldd	r22, Y+21	; 0x15
    5626:	7e 89       	ldd	r23, Y+22	; 0x16
    5628:	8f 89       	ldd	r24, Y+23	; 0x17
    562a:	98 8d       	ldd	r25, Y+24	; 0x18
    562c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5630:	dc 01       	movw	r26, r24
    5632:	cb 01       	movw	r24, r22
    5634:	9c 8b       	std	Y+20, r25	; 0x14
    5636:	8b 8b       	std	Y+19, r24	; 0x13
    5638:	8b 89       	ldd	r24, Y+19	; 0x13
    563a:	9c 89       	ldd	r25, Y+20	; 0x14
    563c:	98 8b       	std	Y+16, r25	; 0x10
    563e:	8f 87       	std	Y+15, r24	; 0x0f
    5640:	8f 85       	ldd	r24, Y+15	; 0x0f
    5642:	98 89       	ldd	r25, Y+16	; 0x10
    5644:	01 97       	sbiw	r24, 0x01	; 1
    5646:	f1 f7       	brne	.-4      	; 0x5644 <Write_Data+0x150>
    5648:	98 8b       	std	Y+16, r25	; 0x10
    564a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    564c:	82 e0       	ldi	r24, 0x02	; 2
    564e:	60 e0       	ldi	r22, 0x00	; 0
    5650:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	
	DIO_WritePin(D7,READ_BIT(data,3));
    5654:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5656:	86 95       	lsr	r24
    5658:	86 95       	lsr	r24
    565a:	86 95       	lsr	r24
    565c:	98 2f       	mov	r25, r24
    565e:	91 70       	andi	r25, 0x01	; 1
    5660:	86 e0       	ldi	r24, 0x06	; 6
    5662:	69 2f       	mov	r22, r25
    5664:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,2));
    5668:	8d 8d       	ldd	r24, Y+29	; 0x1d
    566a:	86 95       	lsr	r24
    566c:	86 95       	lsr	r24
    566e:	98 2f       	mov	r25, r24
    5670:	91 70       	andi	r25, 0x01	; 1
    5672:	85 e0       	ldi	r24, 0x05	; 5
    5674:	69 2f       	mov	r22, r25
    5676:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,1));
    567a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    567c:	86 95       	lsr	r24
    567e:	98 2f       	mov	r25, r24
    5680:	91 70       	andi	r25, 0x01	; 1
    5682:	84 e0       	ldi	r24, 0x04	; 4
    5684:	69 2f       	mov	r22, r25
    5686:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,0));
    568a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    568c:	98 2f       	mov	r25, r24
    568e:	91 70       	andi	r25, 0x01	; 1
    5690:	83 e0       	ldi	r24, 0x03	; 3
    5692:	69 2f       	mov	r22, r25
    5694:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	
	DIO_WritePin(EN,HIGH);
    5698:	82 e0       	ldi	r24, 0x02	; 2
    569a:	61 e0       	ldi	r22, 0x01	; 1
    569c:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
    56a0:	80 e0       	ldi	r24, 0x00	; 0
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	a0 e8       	ldi	r26, 0x80	; 128
    56a6:	bf e3       	ldi	r27, 0x3F	; 63
    56a8:	8b 87       	std	Y+11, r24	; 0x0b
    56aa:	9c 87       	std	Y+12, r25	; 0x0c
    56ac:	ad 87       	std	Y+13, r26	; 0x0d
    56ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    56b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    56b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    56b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    56b8:	20 e0       	ldi	r18, 0x00	; 0
    56ba:	30 e0       	ldi	r19, 0x00	; 0
    56bc:	4a ef       	ldi	r20, 0xFA	; 250
    56be:	54 e4       	ldi	r21, 0x44	; 68
    56c0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    56c4:	dc 01       	movw	r26, r24
    56c6:	cb 01       	movw	r24, r22
    56c8:	8f 83       	std	Y+7, r24	; 0x07
    56ca:	98 87       	std	Y+8, r25	; 0x08
    56cc:	a9 87       	std	Y+9, r26	; 0x09
    56ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56d0:	6f 81       	ldd	r22, Y+7	; 0x07
    56d2:	78 85       	ldd	r23, Y+8	; 0x08
    56d4:	89 85       	ldd	r24, Y+9	; 0x09
    56d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d8:	20 e0       	ldi	r18, 0x00	; 0
    56da:	30 e0       	ldi	r19, 0x00	; 0
    56dc:	40 e8       	ldi	r20, 0x80	; 128
    56de:	5f e3       	ldi	r21, 0x3F	; 63
    56e0:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    56e4:	88 23       	and	r24, r24
    56e6:	2c f4       	brge	.+10     	; 0x56f2 <Write_Data+0x1fe>
		__ticks = 1;
    56e8:	81 e0       	ldi	r24, 0x01	; 1
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	9e 83       	std	Y+6, r25	; 0x06
    56ee:	8d 83       	std	Y+5, r24	; 0x05
    56f0:	3f c0       	rjmp	.+126    	; 0x5770 <Write_Data+0x27c>
	else if (__tmp > 65535)
    56f2:	6f 81       	ldd	r22, Y+7	; 0x07
    56f4:	78 85       	ldd	r23, Y+8	; 0x08
    56f6:	89 85       	ldd	r24, Y+9	; 0x09
    56f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	3f ef       	ldi	r19, 0xFF	; 255
    56fe:	4f e7       	ldi	r20, 0x7F	; 127
    5700:	57 e4       	ldi	r21, 0x47	; 71
    5702:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    5706:	18 16       	cp	r1, r24
    5708:	4c f5       	brge	.+82     	; 0x575c <Write_Data+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    570a:	6b 85       	ldd	r22, Y+11	; 0x0b
    570c:	7c 85       	ldd	r23, Y+12	; 0x0c
    570e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5710:	9e 85       	ldd	r25, Y+14	; 0x0e
    5712:	20 e0       	ldi	r18, 0x00	; 0
    5714:	30 e0       	ldi	r19, 0x00	; 0
    5716:	40 e2       	ldi	r20, 0x20	; 32
    5718:	51 e4       	ldi	r21, 0x41	; 65
    571a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    571e:	dc 01       	movw	r26, r24
    5720:	cb 01       	movw	r24, r22
    5722:	bc 01       	movw	r22, r24
    5724:	cd 01       	movw	r24, r26
    5726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    572a:	dc 01       	movw	r26, r24
    572c:	cb 01       	movw	r24, r22
    572e:	9e 83       	std	Y+6, r25	; 0x06
    5730:	8d 83       	std	Y+5, r24	; 0x05
    5732:	0f c0       	rjmp	.+30     	; 0x5752 <Write_Data+0x25e>
    5734:	88 ec       	ldi	r24, 0xC8	; 200
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	9c 83       	std	Y+4, r25	; 0x04
    573a:	8b 83       	std	Y+3, r24	; 0x03
    573c:	8b 81       	ldd	r24, Y+3	; 0x03
    573e:	9c 81       	ldd	r25, Y+4	; 0x04
    5740:	01 97       	sbiw	r24, 0x01	; 1
    5742:	f1 f7       	brne	.-4      	; 0x5740 <Write_Data+0x24c>
    5744:	9c 83       	std	Y+4, r25	; 0x04
    5746:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5748:	8d 81       	ldd	r24, Y+5	; 0x05
    574a:	9e 81       	ldd	r25, Y+6	; 0x06
    574c:	01 97       	sbiw	r24, 0x01	; 1
    574e:	9e 83       	std	Y+6, r25	; 0x06
    5750:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5752:	8d 81       	ldd	r24, Y+5	; 0x05
    5754:	9e 81       	ldd	r25, Y+6	; 0x06
    5756:	00 97       	sbiw	r24, 0x00	; 0
    5758:	69 f7       	brne	.-38     	; 0x5734 <Write_Data+0x240>
    575a:	14 c0       	rjmp	.+40     	; 0x5784 <Write_Data+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    575c:	6f 81       	ldd	r22, Y+7	; 0x07
    575e:	78 85       	ldd	r23, Y+8	; 0x08
    5760:	89 85       	ldd	r24, Y+9	; 0x09
    5762:	9a 85       	ldd	r25, Y+10	; 0x0a
    5764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5768:	dc 01       	movw	r26, r24
    576a:	cb 01       	movw	r24, r22
    576c:	9e 83       	std	Y+6, r25	; 0x06
    576e:	8d 83       	std	Y+5, r24	; 0x05
    5770:	8d 81       	ldd	r24, Y+5	; 0x05
    5772:	9e 81       	ldd	r25, Y+6	; 0x06
    5774:	9a 83       	std	Y+2, r25	; 0x02
    5776:	89 83       	std	Y+1, r24	; 0x01
    5778:	89 81       	ldd	r24, Y+1	; 0x01
    577a:	9a 81       	ldd	r25, Y+2	; 0x02
    577c:	01 97       	sbiw	r24, 0x01	; 1
    577e:	f1 f7       	brne	.-4      	; 0x577c <Write_Data+0x288>
    5780:	9a 83       	std	Y+2, r25	; 0x02
    5782:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    5784:	82 e0       	ldi	r24, 0x02	; 2
    5786:	60 e0       	ldi	r22, 0x00	; 0
    5788:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	
}
    578c:	6d 96       	adiw	r28, 0x1d	; 29
    578e:	0f b6       	in	r0, 0x3f	; 63
    5790:	f8 94       	cli
    5792:	de bf       	out	0x3e, r29	; 62
    5794:	0f be       	out	0x3f, r0	; 63
    5796:	cd bf       	out	0x3d, r28	; 61
    5798:	cf 91       	pop	r28
    579a:	df 91       	pop	r29
    579c:	08 95       	ret

0000579e <LCD_Init>:


void LCD_Init(void)
{
    579e:	df 93       	push	r29
    57a0:	cf 93       	push	r28
    57a2:	cd b7       	in	r28, 0x3d	; 61
    57a4:	de b7       	in	r29, 0x3e	; 62
    57a6:	e8 97       	sbiw	r28, 0x38	; 56
    57a8:	0f b6       	in	r0, 0x3f	; 63
    57aa:	f8 94       	cli
    57ac:	de bf       	out	0x3e, r29	; 62
    57ae:	0f be       	out	0x3f, r0	; 63
    57b0:	cd bf       	out	0x3d, r28	; 61
    57b2:	80 e0       	ldi	r24, 0x00	; 0
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	a8 e4       	ldi	r26, 0x48	; 72
    57b8:	b2 e4       	ldi	r27, 0x42	; 66
    57ba:	8d ab       	std	Y+53, r24	; 0x35
    57bc:	9e ab       	std	Y+54, r25	; 0x36
    57be:	af ab       	std	Y+55, r26	; 0x37
    57c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57c2:	6d a9       	ldd	r22, Y+53	; 0x35
    57c4:	7e a9       	ldd	r23, Y+54	; 0x36
    57c6:	8f a9       	ldd	r24, Y+55	; 0x37
    57c8:	98 ad       	ldd	r25, Y+56	; 0x38
    57ca:	20 e0       	ldi	r18, 0x00	; 0
    57cc:	30 e0       	ldi	r19, 0x00	; 0
    57ce:	4a ef       	ldi	r20, 0xFA	; 250
    57d0:	54 e4       	ldi	r21, 0x44	; 68
    57d2:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    57d6:	dc 01       	movw	r26, r24
    57d8:	cb 01       	movw	r24, r22
    57da:	89 ab       	std	Y+49, r24	; 0x31
    57dc:	9a ab       	std	Y+50, r25	; 0x32
    57de:	ab ab       	std	Y+51, r26	; 0x33
    57e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    57e2:	69 a9       	ldd	r22, Y+49	; 0x31
    57e4:	7a a9       	ldd	r23, Y+50	; 0x32
    57e6:	8b a9       	ldd	r24, Y+51	; 0x33
    57e8:	9c a9       	ldd	r25, Y+52	; 0x34
    57ea:	20 e0       	ldi	r18, 0x00	; 0
    57ec:	30 e0       	ldi	r19, 0x00	; 0
    57ee:	40 e8       	ldi	r20, 0x80	; 128
    57f0:	5f e3       	ldi	r21, 0x3F	; 63
    57f2:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    57f6:	88 23       	and	r24, r24
    57f8:	2c f4       	brge	.+10     	; 0x5804 <LCD_Init+0x66>
		__ticks = 1;
    57fa:	81 e0       	ldi	r24, 0x01	; 1
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	98 ab       	std	Y+48, r25	; 0x30
    5800:	8f a7       	std	Y+47, r24	; 0x2f
    5802:	3f c0       	rjmp	.+126    	; 0x5882 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    5804:	69 a9       	ldd	r22, Y+49	; 0x31
    5806:	7a a9       	ldd	r23, Y+50	; 0x32
    5808:	8b a9       	ldd	r24, Y+51	; 0x33
    580a:	9c a9       	ldd	r25, Y+52	; 0x34
    580c:	20 e0       	ldi	r18, 0x00	; 0
    580e:	3f ef       	ldi	r19, 0xFF	; 255
    5810:	4f e7       	ldi	r20, 0x7F	; 127
    5812:	57 e4       	ldi	r21, 0x47	; 71
    5814:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    5818:	18 16       	cp	r1, r24
    581a:	4c f5       	brge	.+82     	; 0x586e <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    581c:	6d a9       	ldd	r22, Y+53	; 0x35
    581e:	7e a9       	ldd	r23, Y+54	; 0x36
    5820:	8f a9       	ldd	r24, Y+55	; 0x37
    5822:	98 ad       	ldd	r25, Y+56	; 0x38
    5824:	20 e0       	ldi	r18, 0x00	; 0
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	40 e2       	ldi	r20, 0x20	; 32
    582a:	51 e4       	ldi	r21, 0x41	; 65
    582c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5830:	dc 01       	movw	r26, r24
    5832:	cb 01       	movw	r24, r22
    5834:	bc 01       	movw	r22, r24
    5836:	cd 01       	movw	r24, r26
    5838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	98 ab       	std	Y+48, r25	; 0x30
    5842:	8f a7       	std	Y+47, r24	; 0x2f
    5844:	0f c0       	rjmp	.+30     	; 0x5864 <LCD_Init+0xc6>
    5846:	88 ec       	ldi	r24, 0xC8	; 200
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	9e a7       	std	Y+46, r25	; 0x2e
    584c:	8d a7       	std	Y+45, r24	; 0x2d
    584e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5850:	9e a5       	ldd	r25, Y+46	; 0x2e
    5852:	01 97       	sbiw	r24, 0x01	; 1
    5854:	f1 f7       	brne	.-4      	; 0x5852 <LCD_Init+0xb4>
    5856:	9e a7       	std	Y+46, r25	; 0x2e
    5858:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    585a:	8f a5       	ldd	r24, Y+47	; 0x2f
    585c:	98 a9       	ldd	r25, Y+48	; 0x30
    585e:	01 97       	sbiw	r24, 0x01	; 1
    5860:	98 ab       	std	Y+48, r25	; 0x30
    5862:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5864:	8f a5       	ldd	r24, Y+47	; 0x2f
    5866:	98 a9       	ldd	r25, Y+48	; 0x30
    5868:	00 97       	sbiw	r24, 0x00	; 0
    586a:	69 f7       	brne	.-38     	; 0x5846 <LCD_Init+0xa8>
    586c:	14 c0       	rjmp	.+40     	; 0x5896 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    586e:	69 a9       	ldd	r22, Y+49	; 0x31
    5870:	7a a9       	ldd	r23, Y+50	; 0x32
    5872:	8b a9       	ldd	r24, Y+51	; 0x33
    5874:	9c a9       	ldd	r25, Y+52	; 0x34
    5876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    587a:	dc 01       	movw	r26, r24
    587c:	cb 01       	movw	r24, r22
    587e:	98 ab       	std	Y+48, r25	; 0x30
    5880:	8f a7       	std	Y+47, r24	; 0x2f
    5882:	8f a5       	ldd	r24, Y+47	; 0x2f
    5884:	98 a9       	ldd	r25, Y+48	; 0x30
    5886:	9c a7       	std	Y+44, r25	; 0x2c
    5888:	8b a7       	std	Y+43, r24	; 0x2b
    588a:	8b a5       	ldd	r24, Y+43	; 0x2b
    588c:	9c a5       	ldd	r25, Y+44	; 0x2c
    588e:	01 97       	sbiw	r24, 0x01	; 1
    5890:	f1 f7       	brne	.-4      	; 0x588e <LCD_Init+0xf0>
    5892:	9c a7       	std	Y+44, r25	; 0x2c
    5894:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	Write_Ins(0x02);
    5896:	82 e0       	ldi	r24, 0x02	; 2
    5898:	0e 94 25 29 	call	0x524a	; 0x524a <Write_Ins>
	Write_Ins(FUNCTION_SET);
    589c:	88 e2       	ldi	r24, 0x28	; 40
    589e:	0e 94 25 29 	call	0x524a	; 0x524a <Write_Ins>
    58a2:	80 e0       	ldi	r24, 0x00	; 0
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	a0 e8       	ldi	r26, 0x80	; 128
    58a8:	bf e3       	ldi	r27, 0x3F	; 63
    58aa:	8f a3       	std	Y+39, r24	; 0x27
    58ac:	98 a7       	std	Y+40, r25	; 0x28
    58ae:	a9 a7       	std	Y+41, r26	; 0x29
    58b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58b2:	6f a1       	ldd	r22, Y+39	; 0x27
    58b4:	78 a5       	ldd	r23, Y+40	; 0x28
    58b6:	89 a5       	ldd	r24, Y+41	; 0x29
    58b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    58ba:	20 e0       	ldi	r18, 0x00	; 0
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	4a ef       	ldi	r20, 0xFA	; 250
    58c0:	54 e4       	ldi	r21, 0x44	; 68
    58c2:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    58c6:	dc 01       	movw	r26, r24
    58c8:	cb 01       	movw	r24, r22
    58ca:	8b a3       	std	Y+35, r24	; 0x23
    58cc:	9c a3       	std	Y+36, r25	; 0x24
    58ce:	ad a3       	std	Y+37, r26	; 0x25
    58d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    58d2:	6b a1       	ldd	r22, Y+35	; 0x23
    58d4:	7c a1       	ldd	r23, Y+36	; 0x24
    58d6:	8d a1       	ldd	r24, Y+37	; 0x25
    58d8:	9e a1       	ldd	r25, Y+38	; 0x26
    58da:	20 e0       	ldi	r18, 0x00	; 0
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	40 e8       	ldi	r20, 0x80	; 128
    58e0:	5f e3       	ldi	r21, 0x3F	; 63
    58e2:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    58e6:	88 23       	and	r24, r24
    58e8:	2c f4       	brge	.+10     	; 0x58f4 <LCD_Init+0x156>
		__ticks = 1;
    58ea:	81 e0       	ldi	r24, 0x01	; 1
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	9a a3       	std	Y+34, r25	; 0x22
    58f0:	89 a3       	std	Y+33, r24	; 0x21
    58f2:	3f c0       	rjmp	.+126    	; 0x5972 <LCD_Init+0x1d4>
	else if (__tmp > 65535)
    58f4:	6b a1       	ldd	r22, Y+35	; 0x23
    58f6:	7c a1       	ldd	r23, Y+36	; 0x24
    58f8:	8d a1       	ldd	r24, Y+37	; 0x25
    58fa:	9e a1       	ldd	r25, Y+38	; 0x26
    58fc:	20 e0       	ldi	r18, 0x00	; 0
    58fe:	3f ef       	ldi	r19, 0xFF	; 255
    5900:	4f e7       	ldi	r20, 0x7F	; 127
    5902:	57 e4       	ldi	r21, 0x47	; 71
    5904:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    5908:	18 16       	cp	r1, r24
    590a:	4c f5       	brge	.+82     	; 0x595e <LCD_Init+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    590c:	6f a1       	ldd	r22, Y+39	; 0x27
    590e:	78 a5       	ldd	r23, Y+40	; 0x28
    5910:	89 a5       	ldd	r24, Y+41	; 0x29
    5912:	9a a5       	ldd	r25, Y+42	; 0x2a
    5914:	20 e0       	ldi	r18, 0x00	; 0
    5916:	30 e0       	ldi	r19, 0x00	; 0
    5918:	40 e2       	ldi	r20, 0x20	; 32
    591a:	51 e4       	ldi	r21, 0x41	; 65
    591c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	bc 01       	movw	r22, r24
    5926:	cd 01       	movw	r24, r26
    5928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    592c:	dc 01       	movw	r26, r24
    592e:	cb 01       	movw	r24, r22
    5930:	9a a3       	std	Y+34, r25	; 0x22
    5932:	89 a3       	std	Y+33, r24	; 0x21
    5934:	0f c0       	rjmp	.+30     	; 0x5954 <LCD_Init+0x1b6>
    5936:	88 ec       	ldi	r24, 0xC8	; 200
    5938:	90 e0       	ldi	r25, 0x00	; 0
    593a:	98 a3       	std	Y+32, r25	; 0x20
    593c:	8f 8f       	std	Y+31, r24	; 0x1f
    593e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5940:	98 a1       	ldd	r25, Y+32	; 0x20
    5942:	01 97       	sbiw	r24, 0x01	; 1
    5944:	f1 f7       	brne	.-4      	; 0x5942 <LCD_Init+0x1a4>
    5946:	98 a3       	std	Y+32, r25	; 0x20
    5948:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    594a:	89 a1       	ldd	r24, Y+33	; 0x21
    594c:	9a a1       	ldd	r25, Y+34	; 0x22
    594e:	01 97       	sbiw	r24, 0x01	; 1
    5950:	9a a3       	std	Y+34, r25	; 0x22
    5952:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5954:	89 a1       	ldd	r24, Y+33	; 0x21
    5956:	9a a1       	ldd	r25, Y+34	; 0x22
    5958:	00 97       	sbiw	r24, 0x00	; 0
    595a:	69 f7       	brne	.-38     	; 0x5936 <LCD_Init+0x198>
    595c:	14 c0       	rjmp	.+40     	; 0x5986 <LCD_Init+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    595e:	6b a1       	ldd	r22, Y+35	; 0x23
    5960:	7c a1       	ldd	r23, Y+36	; 0x24
    5962:	8d a1       	ldd	r24, Y+37	; 0x25
    5964:	9e a1       	ldd	r25, Y+38	; 0x26
    5966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    596a:	dc 01       	movw	r26, r24
    596c:	cb 01       	movw	r24, r22
    596e:	9a a3       	std	Y+34, r25	; 0x22
    5970:	89 a3       	std	Y+33, r24	; 0x21
    5972:	89 a1       	ldd	r24, Y+33	; 0x21
    5974:	9a a1       	ldd	r25, Y+34	; 0x22
    5976:	9e 8f       	std	Y+30, r25	; 0x1e
    5978:	8d 8f       	std	Y+29, r24	; 0x1d
    597a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    597c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    597e:	01 97       	sbiw	r24, 0x01	; 1
    5980:	f1 f7       	brne	.-4      	; 0x597e <LCD_Init+0x1e0>
    5982:	9e 8f       	std	Y+30, r25	; 0x1e
    5984:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Write_Ins(DISPLAY_ON);
    5986:	8c e0       	ldi	r24, 0x0C	; 12
    5988:	0e 94 25 29 	call	0x524a	; 0x524a <Write_Ins>
    598c:	80 e0       	ldi	r24, 0x00	; 0
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	a0 e8       	ldi	r26, 0x80	; 128
    5992:	bf e3       	ldi	r27, 0x3F	; 63
    5994:	89 8f       	std	Y+25, r24	; 0x19
    5996:	9a 8f       	std	Y+26, r25	; 0x1a
    5998:	ab 8f       	std	Y+27, r26	; 0x1b
    599a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    599c:	69 8d       	ldd	r22, Y+25	; 0x19
    599e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59a4:	20 e0       	ldi	r18, 0x00	; 0
    59a6:	30 e0       	ldi	r19, 0x00	; 0
    59a8:	4a ef       	ldi	r20, 0xFA	; 250
    59aa:	54 e4       	ldi	r21, 0x44	; 68
    59ac:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    59b0:	dc 01       	movw	r26, r24
    59b2:	cb 01       	movw	r24, r22
    59b4:	8d 8b       	std	Y+21, r24	; 0x15
    59b6:	9e 8b       	std	Y+22, r25	; 0x16
    59b8:	af 8b       	std	Y+23, r26	; 0x17
    59ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    59bc:	6d 89       	ldd	r22, Y+21	; 0x15
    59be:	7e 89       	ldd	r23, Y+22	; 0x16
    59c0:	8f 89       	ldd	r24, Y+23	; 0x17
    59c2:	98 8d       	ldd	r25, Y+24	; 0x18
    59c4:	20 e0       	ldi	r18, 0x00	; 0
    59c6:	30 e0       	ldi	r19, 0x00	; 0
    59c8:	40 e8       	ldi	r20, 0x80	; 128
    59ca:	5f e3       	ldi	r21, 0x3F	; 63
    59cc:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    59d0:	88 23       	and	r24, r24
    59d2:	2c f4       	brge	.+10     	; 0x59de <LCD_Init+0x240>
		__ticks = 1;
    59d4:	81 e0       	ldi	r24, 0x01	; 1
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	9c 8b       	std	Y+20, r25	; 0x14
    59da:	8b 8b       	std	Y+19, r24	; 0x13
    59dc:	3f c0       	rjmp	.+126    	; 0x5a5c <LCD_Init+0x2be>
	else if (__tmp > 65535)
    59de:	6d 89       	ldd	r22, Y+21	; 0x15
    59e0:	7e 89       	ldd	r23, Y+22	; 0x16
    59e2:	8f 89       	ldd	r24, Y+23	; 0x17
    59e4:	98 8d       	ldd	r25, Y+24	; 0x18
    59e6:	20 e0       	ldi	r18, 0x00	; 0
    59e8:	3f ef       	ldi	r19, 0xFF	; 255
    59ea:	4f e7       	ldi	r20, 0x7F	; 127
    59ec:	57 e4       	ldi	r21, 0x47	; 71
    59ee:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    59f2:	18 16       	cp	r1, r24
    59f4:	4c f5       	brge	.+82     	; 0x5a48 <LCD_Init+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59f6:	69 8d       	ldd	r22, Y+25	; 0x19
    59f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59fe:	20 e0       	ldi	r18, 0x00	; 0
    5a00:	30 e0       	ldi	r19, 0x00	; 0
    5a02:	40 e2       	ldi	r20, 0x20	; 32
    5a04:	51 e4       	ldi	r21, 0x41	; 65
    5a06:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5a0a:	dc 01       	movw	r26, r24
    5a0c:	cb 01       	movw	r24, r22
    5a0e:	bc 01       	movw	r22, r24
    5a10:	cd 01       	movw	r24, r26
    5a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a16:	dc 01       	movw	r26, r24
    5a18:	cb 01       	movw	r24, r22
    5a1a:	9c 8b       	std	Y+20, r25	; 0x14
    5a1c:	8b 8b       	std	Y+19, r24	; 0x13
    5a1e:	0f c0       	rjmp	.+30     	; 0x5a3e <LCD_Init+0x2a0>
    5a20:	88 ec       	ldi	r24, 0xC8	; 200
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	9a 8b       	std	Y+18, r25	; 0x12
    5a26:	89 8b       	std	Y+17, r24	; 0x11
    5a28:	89 89       	ldd	r24, Y+17	; 0x11
    5a2a:	9a 89       	ldd	r25, Y+18	; 0x12
    5a2c:	01 97       	sbiw	r24, 0x01	; 1
    5a2e:	f1 f7       	brne	.-4      	; 0x5a2c <LCD_Init+0x28e>
    5a30:	9a 8b       	std	Y+18, r25	; 0x12
    5a32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a34:	8b 89       	ldd	r24, Y+19	; 0x13
    5a36:	9c 89       	ldd	r25, Y+20	; 0x14
    5a38:	01 97       	sbiw	r24, 0x01	; 1
    5a3a:	9c 8b       	std	Y+20, r25	; 0x14
    5a3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    5a40:	9c 89       	ldd	r25, Y+20	; 0x14
    5a42:	00 97       	sbiw	r24, 0x00	; 0
    5a44:	69 f7       	brne	.-38     	; 0x5a20 <LCD_Init+0x282>
    5a46:	14 c0       	rjmp	.+40     	; 0x5a70 <LCD_Init+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a48:	6d 89       	ldd	r22, Y+21	; 0x15
    5a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    5a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    5a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    5a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a54:	dc 01       	movw	r26, r24
    5a56:	cb 01       	movw	r24, r22
    5a58:	9c 8b       	std	Y+20, r25	; 0x14
    5a5a:	8b 8b       	std	Y+19, r24	; 0x13
    5a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    5a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    5a60:	98 8b       	std	Y+16, r25	; 0x10
    5a62:	8f 87       	std	Y+15, r24	; 0x0f
    5a64:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a66:	98 89       	ldd	r25, Y+16	; 0x10
    5a68:	01 97       	sbiw	r24, 0x01	; 1
    5a6a:	f1 f7       	brne	.-4      	; 0x5a68 <LCD_Init+0x2ca>
    5a6c:	98 8b       	std	Y+16, r25	; 0x10
    5a6e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Write_Ins(CLR_SCREEN);
    5a70:	81 e0       	ldi	r24, 0x01	; 1
    5a72:	0e 94 25 29 	call	0x524a	; 0x524a <Write_Ins>
    5a76:	80 e0       	ldi	r24, 0x00	; 0
    5a78:	90 e0       	ldi	r25, 0x00	; 0
    5a7a:	a0 e0       	ldi	r26, 0x00	; 0
    5a7c:	b0 e4       	ldi	r27, 0x40	; 64
    5a7e:	8b 87       	std	Y+11, r24	; 0x0b
    5a80:	9c 87       	std	Y+12, r25	; 0x0c
    5a82:	ad 87       	std	Y+13, r26	; 0x0d
    5a84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a8e:	20 e0       	ldi	r18, 0x00	; 0
    5a90:	30 e0       	ldi	r19, 0x00	; 0
    5a92:	4a ef       	ldi	r20, 0xFA	; 250
    5a94:	54 e4       	ldi	r21, 0x44	; 68
    5a96:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5a9a:	dc 01       	movw	r26, r24
    5a9c:	cb 01       	movw	r24, r22
    5a9e:	8f 83       	std	Y+7, r24	; 0x07
    5aa0:	98 87       	std	Y+8, r25	; 0x08
    5aa2:	a9 87       	std	Y+9, r26	; 0x09
    5aa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    5aa8:	78 85       	ldd	r23, Y+8	; 0x08
    5aaa:	89 85       	ldd	r24, Y+9	; 0x09
    5aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aae:	20 e0       	ldi	r18, 0x00	; 0
    5ab0:	30 e0       	ldi	r19, 0x00	; 0
    5ab2:	40 e8       	ldi	r20, 0x80	; 128
    5ab4:	5f e3       	ldi	r21, 0x3F	; 63
    5ab6:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    5aba:	88 23       	and	r24, r24
    5abc:	2c f4       	brge	.+10     	; 0x5ac8 <LCD_Init+0x32a>
		__ticks = 1;
    5abe:	81 e0       	ldi	r24, 0x01	; 1
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	9e 83       	std	Y+6, r25	; 0x06
    5ac4:	8d 83       	std	Y+5, r24	; 0x05
    5ac6:	3f c0       	rjmp	.+126    	; 0x5b46 <LCD_Init+0x3a8>
	else if (__tmp > 65535)
    5ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    5aca:	78 85       	ldd	r23, Y+8	; 0x08
    5acc:	89 85       	ldd	r24, Y+9	; 0x09
    5ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ad0:	20 e0       	ldi	r18, 0x00	; 0
    5ad2:	3f ef       	ldi	r19, 0xFF	; 255
    5ad4:	4f e7       	ldi	r20, 0x7F	; 127
    5ad6:	57 e4       	ldi	r21, 0x47	; 71
    5ad8:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    5adc:	18 16       	cp	r1, r24
    5ade:	4c f5       	brge	.+82     	; 0x5b32 <LCD_Init+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ae8:	20 e0       	ldi	r18, 0x00	; 0
    5aea:	30 e0       	ldi	r19, 0x00	; 0
    5aec:	40 e2       	ldi	r20, 0x20	; 32
    5aee:	51 e4       	ldi	r21, 0x41	; 65
    5af0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5af4:	dc 01       	movw	r26, r24
    5af6:	cb 01       	movw	r24, r22
    5af8:	bc 01       	movw	r22, r24
    5afa:	cd 01       	movw	r24, r26
    5afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b00:	dc 01       	movw	r26, r24
    5b02:	cb 01       	movw	r24, r22
    5b04:	9e 83       	std	Y+6, r25	; 0x06
    5b06:	8d 83       	std	Y+5, r24	; 0x05
    5b08:	0f c0       	rjmp	.+30     	; 0x5b28 <LCD_Init+0x38a>
    5b0a:	88 ec       	ldi	r24, 0xC8	; 200
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	9c 83       	std	Y+4, r25	; 0x04
    5b10:	8b 83       	std	Y+3, r24	; 0x03
    5b12:	8b 81       	ldd	r24, Y+3	; 0x03
    5b14:	9c 81       	ldd	r25, Y+4	; 0x04
    5b16:	01 97       	sbiw	r24, 0x01	; 1
    5b18:	f1 f7       	brne	.-4      	; 0x5b16 <LCD_Init+0x378>
    5b1a:	9c 83       	std	Y+4, r25	; 0x04
    5b1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    5b20:	9e 81       	ldd	r25, Y+6	; 0x06
    5b22:	01 97       	sbiw	r24, 0x01	; 1
    5b24:	9e 83       	std	Y+6, r25	; 0x06
    5b26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b28:	8d 81       	ldd	r24, Y+5	; 0x05
    5b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b2c:	00 97       	sbiw	r24, 0x00	; 0
    5b2e:	69 f7       	brne	.-38     	; 0x5b0a <LCD_Init+0x36c>
    5b30:	14 c0       	rjmp	.+40     	; 0x5b5a <LCD_Init+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b32:	6f 81       	ldd	r22, Y+7	; 0x07
    5b34:	78 85       	ldd	r23, Y+8	; 0x08
    5b36:	89 85       	ldd	r24, Y+9	; 0x09
    5b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b3e:	dc 01       	movw	r26, r24
    5b40:	cb 01       	movw	r24, r22
    5b42:	9e 83       	std	Y+6, r25	; 0x06
    5b44:	8d 83       	std	Y+5, r24	; 0x05
    5b46:	8d 81       	ldd	r24, Y+5	; 0x05
    5b48:	9e 81       	ldd	r25, Y+6	; 0x06
    5b4a:	9a 83       	std	Y+2, r25	; 0x02
    5b4c:	89 83       	std	Y+1, r24	; 0x01
    5b4e:	89 81       	ldd	r24, Y+1	; 0x01
    5b50:	9a 81       	ldd	r25, Y+2	; 0x02
    5b52:	01 97       	sbiw	r24, 0x01	; 1
    5b54:	f1 f7       	brne	.-4      	; 0x5b52 <LCD_Init+0x3b4>
    5b56:	9a 83       	std	Y+2, r25	; 0x02
    5b58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Write_Ins(ENTRY_MODE);
    5b5a:	86 e0       	ldi	r24, 0x06	; 6
    5b5c:	0e 94 25 29 	call	0x524a	; 0x524a <Write_Ins>
	
	
	
}
    5b60:	e8 96       	adiw	r28, 0x38	; 56
    5b62:	0f b6       	in	r0, 0x3f	; 63
    5b64:	f8 94       	cli
    5b66:	de bf       	out	0x3e, r29	; 62
    5b68:	0f be       	out	0x3f, r0	; 63
    5b6a:	cd bf       	out	0x3d, r28	; 61
    5b6c:	cf 91       	pop	r28
    5b6e:	df 91       	pop	r29
    5b70:	08 95       	ret

00005b72 <LCD_Clear>:
#endif

void LCD_Clear(void)
{
    5b72:	df 93       	push	r29
    5b74:	cf 93       	push	r28
    5b76:	cd b7       	in	r28, 0x3d	; 61
    5b78:	de b7       	in	r29, 0x3e	; 62
    5b7a:	2e 97       	sbiw	r28, 0x0e	; 14
    5b7c:	0f b6       	in	r0, 0x3f	; 63
    5b7e:	f8 94       	cli
    5b80:	de bf       	out	0x3e, r29	; 62
    5b82:	0f be       	out	0x3f, r0	; 63
    5b84:	cd bf       	out	0x3d, r28	; 61
	Write_Ins(CLR_SCREEN);
    5b86:	81 e0       	ldi	r24, 0x01	; 1
    5b88:	0e 94 25 29 	call	0x524a	; 0x524a <Write_Ins>
	LINE=0;
    5b8c:	10 92 5b 02 	sts	0x025B, r1
	CELL=0;
    5b90:	10 92 5c 02 	sts	0x025C, r1
    5b94:	80 e0       	ldi	r24, 0x00	; 0
    5b96:	90 e0       	ldi	r25, 0x00	; 0
    5b98:	a0 e0       	ldi	r26, 0x00	; 0
    5b9a:	b0 e4       	ldi	r27, 0x40	; 64
    5b9c:	8b 87       	std	Y+11, r24	; 0x0b
    5b9e:	9c 87       	std	Y+12, r25	; 0x0c
    5ba0:	ad 87       	std	Y+13, r26	; 0x0d
    5ba2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bac:	20 e0       	ldi	r18, 0x00	; 0
    5bae:	30 e0       	ldi	r19, 0x00	; 0
    5bb0:	4a ef       	ldi	r20, 0xFA	; 250
    5bb2:	54 e4       	ldi	r21, 0x44	; 68
    5bb4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5bb8:	dc 01       	movw	r26, r24
    5bba:	cb 01       	movw	r24, r22
    5bbc:	8f 83       	std	Y+7, r24	; 0x07
    5bbe:	98 87       	std	Y+8, r25	; 0x08
    5bc0:	a9 87       	std	Y+9, r26	; 0x09
    5bc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    5bc6:	78 85       	ldd	r23, Y+8	; 0x08
    5bc8:	89 85       	ldd	r24, Y+9	; 0x09
    5bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bcc:	20 e0       	ldi	r18, 0x00	; 0
    5bce:	30 e0       	ldi	r19, 0x00	; 0
    5bd0:	40 e8       	ldi	r20, 0x80	; 128
    5bd2:	5f e3       	ldi	r21, 0x3F	; 63
    5bd4:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    5bd8:	88 23       	and	r24, r24
    5bda:	2c f4       	brge	.+10     	; 0x5be6 <LCD_Clear+0x74>
		__ticks = 1;
    5bdc:	81 e0       	ldi	r24, 0x01	; 1
    5bde:	90 e0       	ldi	r25, 0x00	; 0
    5be0:	9e 83       	std	Y+6, r25	; 0x06
    5be2:	8d 83       	std	Y+5, r24	; 0x05
    5be4:	3f c0       	rjmp	.+126    	; 0x5c64 <LCD_Clear+0xf2>
	else if (__tmp > 65535)
    5be6:	6f 81       	ldd	r22, Y+7	; 0x07
    5be8:	78 85       	ldd	r23, Y+8	; 0x08
    5bea:	89 85       	ldd	r24, Y+9	; 0x09
    5bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bee:	20 e0       	ldi	r18, 0x00	; 0
    5bf0:	3f ef       	ldi	r19, 0xFF	; 255
    5bf2:	4f e7       	ldi	r20, 0x7F	; 127
    5bf4:	57 e4       	ldi	r21, 0x47	; 71
    5bf6:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    5bfa:	18 16       	cp	r1, r24
    5bfc:	4c f5       	brge	.+82     	; 0x5c50 <LCD_Clear+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c06:	20 e0       	ldi	r18, 0x00	; 0
    5c08:	30 e0       	ldi	r19, 0x00	; 0
    5c0a:	40 e2       	ldi	r20, 0x20	; 32
    5c0c:	51 e4       	ldi	r21, 0x41	; 65
    5c0e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5c12:	dc 01       	movw	r26, r24
    5c14:	cb 01       	movw	r24, r22
    5c16:	bc 01       	movw	r22, r24
    5c18:	cd 01       	movw	r24, r26
    5c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c1e:	dc 01       	movw	r26, r24
    5c20:	cb 01       	movw	r24, r22
    5c22:	9e 83       	std	Y+6, r25	; 0x06
    5c24:	8d 83       	std	Y+5, r24	; 0x05
    5c26:	0f c0       	rjmp	.+30     	; 0x5c46 <LCD_Clear+0xd4>
    5c28:	88 ec       	ldi	r24, 0xC8	; 200
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
    5c2c:	9c 83       	std	Y+4, r25	; 0x04
    5c2e:	8b 83       	std	Y+3, r24	; 0x03
    5c30:	8b 81       	ldd	r24, Y+3	; 0x03
    5c32:	9c 81       	ldd	r25, Y+4	; 0x04
    5c34:	01 97       	sbiw	r24, 0x01	; 1
    5c36:	f1 f7       	brne	.-4      	; 0x5c34 <LCD_Clear+0xc2>
    5c38:	9c 83       	std	Y+4, r25	; 0x04
    5c3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    5c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    5c40:	01 97       	sbiw	r24, 0x01	; 1
    5c42:	9e 83       	std	Y+6, r25	; 0x06
    5c44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c46:	8d 81       	ldd	r24, Y+5	; 0x05
    5c48:	9e 81       	ldd	r25, Y+6	; 0x06
    5c4a:	00 97       	sbiw	r24, 0x00	; 0
    5c4c:	69 f7       	brne	.-38     	; 0x5c28 <LCD_Clear+0xb6>
    5c4e:	14 c0       	rjmp	.+40     	; 0x5c78 <LCD_Clear+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c50:	6f 81       	ldd	r22, Y+7	; 0x07
    5c52:	78 85       	ldd	r23, Y+8	; 0x08
    5c54:	89 85       	ldd	r24, Y+9	; 0x09
    5c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c5c:	dc 01       	movw	r26, r24
    5c5e:	cb 01       	movw	r24, r22
    5c60:	9e 83       	std	Y+6, r25	; 0x06
    5c62:	8d 83       	std	Y+5, r24	; 0x05
    5c64:	8d 81       	ldd	r24, Y+5	; 0x05
    5c66:	9e 81       	ldd	r25, Y+6	; 0x06
    5c68:	9a 83       	std	Y+2, r25	; 0x02
    5c6a:	89 83       	std	Y+1, r24	; 0x01
    5c6c:	89 81       	ldd	r24, Y+1	; 0x01
    5c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c70:	01 97       	sbiw	r24, 0x01	; 1
    5c72:	f1 f7       	brne	.-4      	; 0x5c70 <LCD_Clear+0xfe>
    5c74:	9a 83       	std	Y+2, r25	; 0x02
    5c76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    5c78:	2e 96       	adiw	r28, 0x0e	; 14
    5c7a:	0f b6       	in	r0, 0x3f	; 63
    5c7c:	f8 94       	cli
    5c7e:	de bf       	out	0x3e, r29	; 62
    5c80:	0f be       	out	0x3f, r0	; 63
    5c82:	cd bf       	out	0x3d, r28	; 61
    5c84:	cf 91       	pop	r28
    5c86:	df 91       	pop	r29
    5c88:	08 95       	ret

00005c8a <LCD_ClearPart>:
void LCD_ClearPart(u8 line,u8 cell,u8 N_of_cells)
{
    5c8a:	df 93       	push	r29
    5c8c:	cf 93       	push	r28
    5c8e:	00 d0       	rcall	.+0      	; 0x5c90 <LCD_ClearPart+0x6>
    5c90:	00 d0       	rcall	.+0      	; 0x5c92 <LCD_ClearPart+0x8>
    5c92:	cd b7       	in	r28, 0x3d	; 61
    5c94:	de b7       	in	r29, 0x3e	; 62
    5c96:	8a 83       	std	Y+2, r24	; 0x02
    5c98:	6b 83       	std	Y+3, r22	; 0x03
    5c9a:	4c 83       	std	Y+4, r20	; 0x04
	LCD_GoTO(line,cell);
    5c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c9e:	6b 81       	ldd	r22, Y+3	; 0x03
    5ca0:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	for (u8 i=0;i<N_of_cells;i++)
    5ca4:	19 82       	std	Y+1, r1	; 0x01
    5ca6:	06 c0       	rjmp	.+12     	; 0x5cb4 <LCD_ClearPart+0x2a>
	{
		LCD_WriteChar(' ');
    5ca8:	80 e2       	ldi	r24, 0x20	; 32
    5caa:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
	_delay_ms(2);
}
void LCD_ClearPart(u8 line,u8 cell,u8 N_of_cells)
{
	LCD_GoTO(line,cell);
	for (u8 i=0;i<N_of_cells;i++)
    5cae:	89 81       	ldd	r24, Y+1	; 0x01
    5cb0:	8f 5f       	subi	r24, 0xFF	; 255
    5cb2:	89 83       	std	Y+1, r24	; 0x01
    5cb4:	99 81       	ldd	r25, Y+1	; 0x01
    5cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    5cb8:	98 17       	cp	r25, r24
    5cba:	b0 f3       	brcs	.-20     	; 0x5ca8 <LCD_ClearPart+0x1e>
	{
		LCD_WriteChar(' ');
	}
	
}
    5cbc:	0f 90       	pop	r0
    5cbe:	0f 90       	pop	r0
    5cc0:	0f 90       	pop	r0
    5cc2:	0f 90       	pop	r0
    5cc4:	cf 91       	pop	r28
    5cc6:	df 91       	pop	r29
    5cc8:	08 95       	ret

00005cca <LCD_GoTO>:

void LCD_GoTO(u8 line,u8 cell)
{
    5cca:	df 93       	push	r29
    5ccc:	cf 93       	push	r28
    5cce:	00 d0       	rcall	.+0      	; 0x5cd0 <LCD_GoTO+0x6>
    5cd0:	cd b7       	in	r28, 0x3d	; 61
    5cd2:	de b7       	in	r29, 0x3e	; 62
    5cd4:	89 83       	std	Y+1, r24	; 0x01
    5cd6:	6a 83       	std	Y+2, r22	; 0x02
	LINE=line;
    5cd8:	89 81       	ldd	r24, Y+1	; 0x01
    5cda:	80 93 5b 02 	sts	0x025B, r24
	CELL=cell;
    5cde:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce0:	80 93 5c 02 	sts	0x025C, r24
	//SET_BIT(cell,7);
	cell=cell+0x80;
    5ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce6:	80 58       	subi	r24, 0x80	; 128
    5ce8:	8a 83       	std	Y+2, r24	; 0x02
	if(line==0)
    5cea:	89 81       	ldd	r24, Y+1	; 0x01
    5cec:	88 23       	and	r24, r24
    5cee:	21 f4       	brne	.+8      	; 0x5cf8 <LCD_GoTO+0x2e>
	{
		Write_Ins(cell);
    5cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    5cf2:	0e 94 25 29 	call	0x524a	; 0x524a <Write_Ins>
    5cf6:	06 c0       	rjmp	.+12     	; 0x5d04 <LCD_GoTO+0x3a>
	}
	else
	{
		cell=cell+0x40;
    5cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    5cfa:	80 5c       	subi	r24, 0xC0	; 192
    5cfc:	8a 83       	std	Y+2, r24	; 0x02
		Write_Ins(cell);
    5cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    5d00:	0e 94 25 29 	call	0x524a	; 0x524a <Write_Ins>
		
	}
	//Index=cell;
	//CLR_BIT(Index,7);
}
    5d04:	0f 90       	pop	r0
    5d06:	0f 90       	pop	r0
    5d08:	cf 91       	pop	r28
    5d0a:	df 91       	pop	r29
    5d0c:	08 95       	ret

00005d0e <LCD_WriteChar>:
void LCD_WriteChar(u8 ch)
{
    5d0e:	df 93       	push	r29
    5d10:	cf 93       	push	r28
    5d12:	0f 92       	push	r0
    5d14:	cd b7       	in	r28, 0x3d	; 61
    5d16:	de b7       	in	r29, 0x3e	; 62
    5d18:	89 83       	std	Y+1, r24	; 0x01

  Write_Data(ch);
    5d1a:	89 81       	ldd	r24, Y+1	; 0x01
    5d1c:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <Write_Data>
  CELL++;
    5d20:	80 91 5c 02 	lds	r24, 0x025C
    5d24:	8f 5f       	subi	r24, 0xFF	; 255
    5d26:	80 93 5c 02 	sts	0x025C, r24
  if(LINE==0&&CELL==16)
    5d2a:	80 91 5b 02 	lds	r24, 0x025B
    5d2e:	88 23       	and	r24, r24
    5d30:	69 f4       	brne	.+26     	; 0x5d4c <LCD_WriteChar+0x3e>
    5d32:	80 91 5c 02 	lds	r24, 0x025C
    5d36:	80 31       	cpi	r24, 0x10	; 16
    5d38:	49 f4       	brne	.+18     	; 0x5d4c <LCD_WriteChar+0x3e>
  {
	  LINE=1;
    5d3a:	81 e0       	ldi	r24, 0x01	; 1
    5d3c:	80 93 5b 02 	sts	0x025B, r24
	  CELL=0;
    5d40:	10 92 5c 02 	sts	0x025C, r1
	  LCD_GoTO(1,0);
    5d44:	81 e0       	ldi	r24, 0x01	; 1
    5d46:	60 e0       	ldi	r22, 0x00	; 0
    5d48:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	  Index=0x40;
	  LCD_GoTO(1,0);
  }
  */
	
}
    5d4c:	0f 90       	pop	r0
    5d4e:	cf 91       	pop	r28
    5d50:	df 91       	pop	r29
    5d52:	08 95       	ret

00005d54 <LCD_WriteString>:


void LCD_WriteString(u8*str)
{
    5d54:	df 93       	push	r29
    5d56:	cf 93       	push	r28
    5d58:	00 d0       	rcall	.+0      	; 0x5d5a <LCD_WriteString+0x6>
    5d5a:	00 d0       	rcall	.+0      	; 0x5d5c <LCD_WriteString+0x8>
    5d5c:	cd b7       	in	r28, 0x3d	; 61
    5d5e:	de b7       	in	r29, 0x3e	; 62
    5d60:	9c 83       	std	Y+4, r25	; 0x04
    5d62:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    5d64:	1a 82       	std	Y+2, r1	; 0x02
    5d66:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;str[i];i++)
    5d68:	1a 82       	std	Y+2, r1	; 0x02
    5d6a:	19 82       	std	Y+1, r1	; 0x01
    5d6c:	0f c0       	rjmp	.+30     	; 0x5d8c <LCD_WriteString+0x38>
	{
		LCD_WriteChar(str[i]);
    5d6e:	29 81       	ldd	r18, Y+1	; 0x01
    5d70:	3a 81       	ldd	r19, Y+2	; 0x02
    5d72:	8b 81       	ldd	r24, Y+3	; 0x03
    5d74:	9c 81       	ldd	r25, Y+4	; 0x04
    5d76:	fc 01       	movw	r30, r24
    5d78:	e2 0f       	add	r30, r18
    5d7a:	f3 1f       	adc	r31, r19
    5d7c:	80 81       	ld	r24, Z
    5d7e:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>


void LCD_WriteString(u8*str)
{
	int i=0;
	for(i=0;str[i];i++)
    5d82:	89 81       	ldd	r24, Y+1	; 0x01
    5d84:	9a 81       	ldd	r25, Y+2	; 0x02
    5d86:	01 96       	adiw	r24, 0x01	; 1
    5d88:	9a 83       	std	Y+2, r25	; 0x02
    5d8a:	89 83       	std	Y+1, r24	; 0x01
    5d8c:	29 81       	ldd	r18, Y+1	; 0x01
    5d8e:	3a 81       	ldd	r19, Y+2	; 0x02
    5d90:	8b 81       	ldd	r24, Y+3	; 0x03
    5d92:	9c 81       	ldd	r25, Y+4	; 0x04
    5d94:	fc 01       	movw	r30, r24
    5d96:	e2 0f       	add	r30, r18
    5d98:	f3 1f       	adc	r31, r19
    5d9a:	80 81       	ld	r24, Z
    5d9c:	88 23       	and	r24, r24
    5d9e:	39 f7       	brne	.-50     	; 0x5d6e <LCD_WriteString+0x1a>
	{
		LCD_WriteChar(str[i]);
	}
	
}
    5da0:	0f 90       	pop	r0
    5da2:	0f 90       	pop	r0
    5da4:	0f 90       	pop	r0
    5da6:	0f 90       	pop	r0
    5da8:	cf 91       	pop	r28
    5daa:	df 91       	pop	r29
    5dac:	08 95       	ret

00005dae <LCD_WriteNum>:
void LCD_WriteNum(s64 num)
{
    5dae:	af 92       	push	r10
    5db0:	bf 92       	push	r11
    5db2:	cf 92       	push	r12
    5db4:	df 92       	push	r13
    5db6:	ef 92       	push	r14
    5db8:	ff 92       	push	r15
    5dba:	0f 93       	push	r16
    5dbc:	1f 93       	push	r17
    5dbe:	df 93       	push	r29
    5dc0:	cf 93       	push	r28
    5dc2:	cd b7       	in	r28, 0x3d	; 61
    5dc4:	de b7       	in	r29, 0x3e	; 62
    5dc6:	c7 55       	subi	r28, 0x57	; 87
    5dc8:	d0 40       	sbci	r29, 0x00	; 0
    5dca:	0f b6       	in	r0, 0x3f	; 63
    5dcc:	f8 94       	cli
    5dce:	de bf       	out	0x3e, r29	; 62
    5dd0:	0f be       	out	0x3f, r0	; 63
    5dd2:	cd bf       	out	0x3d, r28	; 61
    5dd4:	2c a3       	std	Y+36, r18	; 0x24
    5dd6:	3d a3       	std	Y+37, r19	; 0x25
    5dd8:	4e a3       	std	Y+38, r20	; 0x26
    5dda:	5f a3       	std	Y+39, r21	; 0x27
    5ddc:	68 a7       	std	Y+40, r22	; 0x28
    5dde:	79 a7       	std	Y+41, r23	; 0x29
    5de0:	8a a7       	std	Y+42, r24	; 0x2a
    5de2:	9b a7       	std	Y+43, r25	; 0x2b
	u8 str[32];
	s8 i=0,rem,j;
    5de4:	1b 82       	std	Y+3, r1	; 0x03
	if(num<0)
    5de6:	8b a5       	ldd	r24, Y+43	; 0x2b
    5de8:	88 23       	and	r24, r24
    5dea:	d4 f0       	brlt	.+52     	; 0x5e20 <LCD_WriteNum+0x72>
    5dec:	8b a5       	ldd	r24, Y+43	; 0x2b
    5dee:	88 23       	and	r24, r24
    5df0:	09 f0       	breq	.+2      	; 0x5df4 <LCD_WriteNum+0x46>
    5df2:	bf c1       	rjmp	.+894    	; 0x6172 <LCD_WriteNum+0x3c4>
    5df4:	8a a5       	ldd	r24, Y+42	; 0x2a
    5df6:	88 23       	and	r24, r24
    5df8:	09 f0       	breq	.+2      	; 0x5dfc <LCD_WriteNum+0x4e>
    5dfa:	bb c1       	rjmp	.+886    	; 0x6172 <LCD_WriteNum+0x3c4>
    5dfc:	89 a5       	ldd	r24, Y+41	; 0x29
    5dfe:	88 23       	and	r24, r24
    5e00:	09 f0       	breq	.+2      	; 0x5e04 <LCD_WriteNum+0x56>
    5e02:	b7 c1       	rjmp	.+878    	; 0x6172 <LCD_WriteNum+0x3c4>
    5e04:	88 a5       	ldd	r24, Y+40	; 0x28
    5e06:	88 23       	and	r24, r24
    5e08:	09 f0       	breq	.+2      	; 0x5e0c <LCD_WriteNum+0x5e>
    5e0a:	b3 c1       	rjmp	.+870    	; 0x6172 <LCD_WriteNum+0x3c4>
    5e0c:	8f a1       	ldd	r24, Y+39	; 0x27
    5e0e:	88 23       	and	r24, r24
    5e10:	09 f0       	breq	.+2      	; 0x5e14 <LCD_WriteNum+0x66>
    5e12:	af c1       	rjmp	.+862    	; 0x6172 <LCD_WriteNum+0x3c4>
    5e14:	8e a1       	ldd	r24, Y+38	; 0x26
    5e16:	88 23       	and	r24, r24
    5e18:	09 f0       	breq	.+2      	; 0x5e1c <LCD_WriteNum+0x6e>
    5e1a:	ab c1       	rjmp	.+854    	; 0x6172 <LCD_WriteNum+0x3c4>
    5e1c:	8d a1       	ldd	r24, Y+37	; 0x25
    5e1e:	a9 c1       	rjmp	.+850    	; 0x6172 <LCD_WriteNum+0x3c4>
	{
		LCD_WriteChar('-');
    5e20:	8d e2       	ldi	r24, 0x2D	; 45
    5e22:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
		num=num*-1;
    5e26:	1d a6       	std	Y+45, r1	; 0x2d
    5e28:	1e a6       	std	Y+46, r1	; 0x2e
    5e2a:	1f a6       	std	Y+47, r1	; 0x2f
    5e2c:	18 aa       	std	Y+48, r1	; 0x30
    5e2e:	19 aa       	std	Y+49, r1	; 0x31
    5e30:	1a aa       	std	Y+50, r1	; 0x32
    5e32:	1b aa       	std	Y+51, r1	; 0x33
    5e34:	1c aa       	std	Y+52, r1	; 0x34
    5e36:	9c a1       	ldd	r25, Y+36	; 0x24
    5e38:	9d ab       	std	Y+53, r25	; 0x35
    5e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    5e3c:	8e ab       	std	Y+54, r24	; 0x36
    5e3e:	9e a1       	ldd	r25, Y+38	; 0x26
    5e40:	9f ab       	std	Y+55, r25	; 0x37
    5e42:	8f a1       	ldd	r24, Y+39	; 0x27
    5e44:	88 af       	std	Y+56, r24	; 0x38
    5e46:	98 a5       	ldd	r25, Y+40	; 0x28
    5e48:	99 af       	std	Y+57, r25	; 0x39
    5e4a:	89 a5       	ldd	r24, Y+41	; 0x29
    5e4c:	8a af       	std	Y+58, r24	; 0x3a
    5e4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e50:	9b af       	std	Y+59, r25	; 0x3b
    5e52:	8b a5       	ldd	r24, Y+43	; 0x2b
    5e54:	8c af       	std	Y+60, r24	; 0x3c
    5e56:	9d a5       	ldd	r25, Y+45	; 0x2d
    5e58:	8d a9       	ldd	r24, Y+53	; 0x35
    5e5a:	98 1b       	sub	r25, r24
    5e5c:	9d af       	std	Y+61, r25	; 0x3d
    5e5e:	91 e0       	ldi	r25, 0x01	; 1
    5e60:	26 96       	adiw	r28, 0x06	; 6
    5e62:	9f af       	std	Y+63, r25	; 0x3f
    5e64:	26 97       	sbiw	r28, 0x06	; 6
    5e66:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e68:	9d a5       	ldd	r25, Y+45	; 0x2d
    5e6a:	98 17       	cp	r25, r24
    5e6c:	18 f0       	brcs	.+6      	; 0x5e74 <LCD_WriteNum+0xc6>
    5e6e:	26 96       	adiw	r28, 0x06	; 6
    5e70:	1f ae       	std	Y+63, r1	; 0x3f
    5e72:	26 97       	sbiw	r28, 0x06	; 6
    5e74:	8e a5       	ldd	r24, Y+46	; 0x2e
    5e76:	9e a9       	ldd	r25, Y+54	; 0x36
    5e78:	89 1b       	sub	r24, r25
    5e7a:	8e af       	std	Y+62, r24	; 0x3e
    5e7c:	81 e0       	ldi	r24, 0x01	; 1
    5e7e:	27 96       	adiw	r28, 0x07	; 7
    5e80:	8f af       	std	Y+63, r24	; 0x3f
    5e82:	27 97       	sbiw	r28, 0x07	; 7
    5e84:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e86:	8e a5       	ldd	r24, Y+46	; 0x2e
    5e88:	89 17       	cp	r24, r25
    5e8a:	18 f0       	brcs	.+6      	; 0x5e92 <LCD_WriteNum+0xe4>
    5e8c:	27 96       	adiw	r28, 0x07	; 7
    5e8e:	1f ae       	std	Y+63, r1	; 0x3f
    5e90:	27 97       	sbiw	r28, 0x07	; 7
    5e92:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e94:	26 96       	adiw	r28, 0x06	; 6
    5e96:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e98:	26 97       	sbiw	r28, 0x06	; 6
    5e9a:	98 1b       	sub	r25, r24
    5e9c:	28 96       	adiw	r28, 0x08	; 8
    5e9e:	9f af       	std	Y+63, r25	; 0x3f
    5ea0:	28 97       	sbiw	r28, 0x08	; 8
    5ea2:	91 e0       	ldi	r25, 0x01	; 1
    5ea4:	29 96       	adiw	r28, 0x09	; 9
    5ea6:	9f af       	std	Y+63, r25	; 0x3f
    5ea8:	29 97       	sbiw	r28, 0x09	; 9
    5eaa:	28 96       	adiw	r28, 0x08	; 8
    5eac:	8f ad       	ldd	r24, Y+63	; 0x3f
    5eae:	28 97       	sbiw	r28, 0x08	; 8
    5eb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    5eb2:	98 17       	cp	r25, r24
    5eb4:	18 f0       	brcs	.+6      	; 0x5ebc <LCD_WriteNum+0x10e>
    5eb6:	29 96       	adiw	r28, 0x09	; 9
    5eb8:	1f ae       	std	Y+63, r1	; 0x3f
    5eba:	29 97       	sbiw	r28, 0x09	; 9
    5ebc:	27 96       	adiw	r28, 0x07	; 7
    5ebe:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ec0:	27 97       	sbiw	r28, 0x07	; 7
    5ec2:	29 96       	adiw	r28, 0x09	; 9
    5ec4:	9f ad       	ldd	r25, Y+63	; 0x3f
    5ec6:	29 97       	sbiw	r28, 0x09	; 9
    5ec8:	89 2b       	or	r24, r25
    5eca:	27 96       	adiw	r28, 0x07	; 7
    5ecc:	8f af       	std	Y+63, r24	; 0x3f
    5ece:	27 97       	sbiw	r28, 0x07	; 7
    5ed0:	28 96       	adiw	r28, 0x08	; 8
    5ed2:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ed4:	28 97       	sbiw	r28, 0x08	; 8
    5ed6:	8e af       	std	Y+62, r24	; 0x3e
    5ed8:	9f a5       	ldd	r25, Y+47	; 0x2f
    5eda:	8f a9       	ldd	r24, Y+55	; 0x37
    5edc:	98 1b       	sub	r25, r24
    5ede:	9f af       	std	Y+63, r25	; 0x3f
    5ee0:	91 e0       	ldi	r25, 0x01	; 1
    5ee2:	2a 96       	adiw	r28, 0x0a	; 10
    5ee4:	9f af       	std	Y+63, r25	; 0x3f
    5ee6:	2a 97       	sbiw	r28, 0x0a	; 10
    5ee8:	8f ad       	ldd	r24, Y+63	; 0x3f
    5eea:	9f a5       	ldd	r25, Y+47	; 0x2f
    5eec:	98 17       	cp	r25, r24
    5eee:	18 f0       	brcs	.+6      	; 0x5ef6 <LCD_WriteNum+0x148>
    5ef0:	2a 96       	adiw	r28, 0x0a	; 10
    5ef2:	1f ae       	std	Y+63, r1	; 0x3f
    5ef4:	2a 97       	sbiw	r28, 0x0a	; 10
    5ef6:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ef8:	27 96       	adiw	r28, 0x07	; 7
    5efa:	9f ad       	ldd	r25, Y+63	; 0x3f
    5efc:	27 97       	sbiw	r28, 0x07	; 7
    5efe:	89 1b       	sub	r24, r25
    5f00:	2b 96       	adiw	r28, 0x0b	; 11
    5f02:	8f af       	std	Y+63, r24	; 0x3f
    5f04:	2b 97       	sbiw	r28, 0x0b	; 11
    5f06:	81 e0       	ldi	r24, 0x01	; 1
    5f08:	2c 96       	adiw	r28, 0x0c	; 12
    5f0a:	8f af       	std	Y+63, r24	; 0x3f
    5f0c:	2c 97       	sbiw	r28, 0x0c	; 12
    5f0e:	2b 96       	adiw	r28, 0x0b	; 11
    5f10:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f12:	2b 97       	sbiw	r28, 0x0b	; 11
    5f14:	8f ad       	ldd	r24, Y+63	; 0x3f
    5f16:	89 17       	cp	r24, r25
    5f18:	18 f0       	brcs	.+6      	; 0x5f20 <LCD_WriteNum+0x172>
    5f1a:	2c 96       	adiw	r28, 0x0c	; 12
    5f1c:	1f ae       	std	Y+63, r1	; 0x3f
    5f1e:	2c 97       	sbiw	r28, 0x0c	; 12
    5f20:	2a 96       	adiw	r28, 0x0a	; 10
    5f22:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f24:	2a 97       	sbiw	r28, 0x0a	; 10
    5f26:	2c 96       	adiw	r28, 0x0c	; 12
    5f28:	8f ad       	ldd	r24, Y+63	; 0x3f
    5f2a:	2c 97       	sbiw	r28, 0x0c	; 12
    5f2c:	98 2b       	or	r25, r24
    5f2e:	2a 96       	adiw	r28, 0x0a	; 10
    5f30:	9f af       	std	Y+63, r25	; 0x3f
    5f32:	2a 97       	sbiw	r28, 0x0a	; 10
    5f34:	2b 96       	adiw	r28, 0x0b	; 11
    5f36:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f38:	2b 97       	sbiw	r28, 0x0b	; 11
    5f3a:	9f af       	std	Y+63, r25	; 0x3f
    5f3c:	88 a9       	ldd	r24, Y+48	; 0x30
    5f3e:	98 ad       	ldd	r25, Y+56	; 0x38
    5f40:	89 1b       	sub	r24, r25
    5f42:	21 96       	adiw	r28, 0x01	; 1
    5f44:	8f af       	std	Y+63, r24	; 0x3f
    5f46:	21 97       	sbiw	r28, 0x01	; 1
    5f48:	81 e0       	ldi	r24, 0x01	; 1
    5f4a:	2d 96       	adiw	r28, 0x0d	; 13
    5f4c:	8f af       	std	Y+63, r24	; 0x3f
    5f4e:	2d 97       	sbiw	r28, 0x0d	; 13
    5f50:	21 96       	adiw	r28, 0x01	; 1
    5f52:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f54:	21 97       	sbiw	r28, 0x01	; 1
    5f56:	88 a9       	ldd	r24, Y+48	; 0x30
    5f58:	89 17       	cp	r24, r25
    5f5a:	18 f0       	brcs	.+6      	; 0x5f62 <LCD_WriteNum+0x1b4>
    5f5c:	2d 96       	adiw	r28, 0x0d	; 13
    5f5e:	1f ae       	std	Y+63, r1	; 0x3f
    5f60:	2d 97       	sbiw	r28, 0x0d	; 13
    5f62:	21 96       	adiw	r28, 0x01	; 1
    5f64:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f66:	21 97       	sbiw	r28, 0x01	; 1
    5f68:	2a 96       	adiw	r28, 0x0a	; 10
    5f6a:	8f ad       	ldd	r24, Y+63	; 0x3f
    5f6c:	2a 97       	sbiw	r28, 0x0a	; 10
    5f6e:	98 1b       	sub	r25, r24
    5f70:	2e 96       	adiw	r28, 0x0e	; 14
    5f72:	9f af       	std	Y+63, r25	; 0x3f
    5f74:	2e 97       	sbiw	r28, 0x0e	; 14
    5f76:	91 e0       	ldi	r25, 0x01	; 1
    5f78:	2f 96       	adiw	r28, 0x0f	; 15
    5f7a:	9f af       	std	Y+63, r25	; 0x3f
    5f7c:	2f 97       	sbiw	r28, 0x0f	; 15
    5f7e:	2e 96       	adiw	r28, 0x0e	; 14
    5f80:	8f ad       	ldd	r24, Y+63	; 0x3f
    5f82:	2e 97       	sbiw	r28, 0x0e	; 14
    5f84:	21 96       	adiw	r28, 0x01	; 1
    5f86:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f88:	21 97       	sbiw	r28, 0x01	; 1
    5f8a:	98 17       	cp	r25, r24
    5f8c:	18 f0       	brcs	.+6      	; 0x5f94 <LCD_WriteNum+0x1e6>
    5f8e:	2f 96       	adiw	r28, 0x0f	; 15
    5f90:	1f ae       	std	Y+63, r1	; 0x3f
    5f92:	2f 97       	sbiw	r28, 0x0f	; 15
    5f94:	2d 96       	adiw	r28, 0x0d	; 13
    5f96:	8f ad       	ldd	r24, Y+63	; 0x3f
    5f98:	2d 97       	sbiw	r28, 0x0d	; 13
    5f9a:	2f 96       	adiw	r28, 0x0f	; 15
    5f9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f9e:	2f 97       	sbiw	r28, 0x0f	; 15
    5fa0:	89 2b       	or	r24, r25
    5fa2:	2d 96       	adiw	r28, 0x0d	; 13
    5fa4:	8f af       	std	Y+63, r24	; 0x3f
    5fa6:	2d 97       	sbiw	r28, 0x0d	; 13
    5fa8:	2e 96       	adiw	r28, 0x0e	; 14
    5faa:	8f ad       	ldd	r24, Y+63	; 0x3f
    5fac:	2e 97       	sbiw	r28, 0x0e	; 14
    5fae:	21 96       	adiw	r28, 0x01	; 1
    5fb0:	8f af       	std	Y+63, r24	; 0x3f
    5fb2:	21 97       	sbiw	r28, 0x01	; 1
    5fb4:	99 a9       	ldd	r25, Y+49	; 0x31
    5fb6:	89 ad       	ldd	r24, Y+57	; 0x39
    5fb8:	98 1b       	sub	r25, r24
    5fba:	22 96       	adiw	r28, 0x02	; 2
    5fbc:	9f af       	std	Y+63, r25	; 0x3f
    5fbe:	22 97       	sbiw	r28, 0x02	; 2
    5fc0:	91 e0       	ldi	r25, 0x01	; 1
    5fc2:	60 96       	adiw	r28, 0x10	; 16
    5fc4:	9f af       	std	Y+63, r25	; 0x3f
    5fc6:	60 97       	sbiw	r28, 0x10	; 16
    5fc8:	22 96       	adiw	r28, 0x02	; 2
    5fca:	8f ad       	ldd	r24, Y+63	; 0x3f
    5fcc:	22 97       	sbiw	r28, 0x02	; 2
    5fce:	99 a9       	ldd	r25, Y+49	; 0x31
    5fd0:	98 17       	cp	r25, r24
    5fd2:	18 f0       	brcs	.+6      	; 0x5fda <LCD_WriteNum+0x22c>
    5fd4:	60 96       	adiw	r28, 0x10	; 16
    5fd6:	1f ae       	std	Y+63, r1	; 0x3f
    5fd8:	60 97       	sbiw	r28, 0x10	; 16
    5fda:	22 96       	adiw	r28, 0x02	; 2
    5fdc:	8f ad       	ldd	r24, Y+63	; 0x3f
    5fde:	22 97       	sbiw	r28, 0x02	; 2
    5fe0:	2d 96       	adiw	r28, 0x0d	; 13
    5fe2:	9f ad       	ldd	r25, Y+63	; 0x3f
    5fe4:	2d 97       	sbiw	r28, 0x0d	; 13
    5fe6:	89 1b       	sub	r24, r25
    5fe8:	61 96       	adiw	r28, 0x11	; 17
    5fea:	8f af       	std	Y+63, r24	; 0x3f
    5fec:	61 97       	sbiw	r28, 0x11	; 17
    5fee:	81 e0       	ldi	r24, 0x01	; 1
    5ff0:	62 96       	adiw	r28, 0x12	; 18
    5ff2:	8f af       	std	Y+63, r24	; 0x3f
    5ff4:	62 97       	sbiw	r28, 0x12	; 18
    5ff6:	61 96       	adiw	r28, 0x11	; 17
    5ff8:	9f ad       	ldd	r25, Y+63	; 0x3f
    5ffa:	61 97       	sbiw	r28, 0x11	; 17
    5ffc:	22 96       	adiw	r28, 0x02	; 2
    5ffe:	8f ad       	ldd	r24, Y+63	; 0x3f
    6000:	22 97       	sbiw	r28, 0x02	; 2
    6002:	89 17       	cp	r24, r25
    6004:	18 f0       	brcs	.+6      	; 0x600c <LCD_WriteNum+0x25e>
    6006:	62 96       	adiw	r28, 0x12	; 18
    6008:	1f ae       	std	Y+63, r1	; 0x3f
    600a:	62 97       	sbiw	r28, 0x12	; 18
    600c:	60 96       	adiw	r28, 0x10	; 16
    600e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6010:	60 97       	sbiw	r28, 0x10	; 16
    6012:	62 96       	adiw	r28, 0x12	; 18
    6014:	8f ad       	ldd	r24, Y+63	; 0x3f
    6016:	62 97       	sbiw	r28, 0x12	; 18
    6018:	98 2b       	or	r25, r24
    601a:	60 96       	adiw	r28, 0x10	; 16
    601c:	9f af       	std	Y+63, r25	; 0x3f
    601e:	60 97       	sbiw	r28, 0x10	; 16
    6020:	61 96       	adiw	r28, 0x11	; 17
    6022:	9f ad       	ldd	r25, Y+63	; 0x3f
    6024:	61 97       	sbiw	r28, 0x11	; 17
    6026:	22 96       	adiw	r28, 0x02	; 2
    6028:	9f af       	std	Y+63, r25	; 0x3f
    602a:	22 97       	sbiw	r28, 0x02	; 2
    602c:	8a a9       	ldd	r24, Y+50	; 0x32
    602e:	9a ad       	ldd	r25, Y+58	; 0x3a
    6030:	89 1b       	sub	r24, r25
    6032:	23 96       	adiw	r28, 0x03	; 3
    6034:	8f af       	std	Y+63, r24	; 0x3f
    6036:	23 97       	sbiw	r28, 0x03	; 3
    6038:	81 e0       	ldi	r24, 0x01	; 1
    603a:	63 96       	adiw	r28, 0x13	; 19
    603c:	8f af       	std	Y+63, r24	; 0x3f
    603e:	63 97       	sbiw	r28, 0x13	; 19
    6040:	23 96       	adiw	r28, 0x03	; 3
    6042:	9f ad       	ldd	r25, Y+63	; 0x3f
    6044:	23 97       	sbiw	r28, 0x03	; 3
    6046:	8a a9       	ldd	r24, Y+50	; 0x32
    6048:	89 17       	cp	r24, r25
    604a:	18 f0       	brcs	.+6      	; 0x6052 <LCD_WriteNum+0x2a4>
    604c:	63 96       	adiw	r28, 0x13	; 19
    604e:	1f ae       	std	Y+63, r1	; 0x3f
    6050:	63 97       	sbiw	r28, 0x13	; 19
    6052:	23 96       	adiw	r28, 0x03	; 3
    6054:	9f ad       	ldd	r25, Y+63	; 0x3f
    6056:	23 97       	sbiw	r28, 0x03	; 3
    6058:	60 96       	adiw	r28, 0x10	; 16
    605a:	8f ad       	ldd	r24, Y+63	; 0x3f
    605c:	60 97       	sbiw	r28, 0x10	; 16
    605e:	98 1b       	sub	r25, r24
    6060:	64 96       	adiw	r28, 0x14	; 20
    6062:	9f af       	std	Y+63, r25	; 0x3f
    6064:	64 97       	sbiw	r28, 0x14	; 20
    6066:	91 e0       	ldi	r25, 0x01	; 1
    6068:	65 96       	adiw	r28, 0x15	; 21
    606a:	9f af       	std	Y+63, r25	; 0x3f
    606c:	65 97       	sbiw	r28, 0x15	; 21
    606e:	64 96       	adiw	r28, 0x14	; 20
    6070:	8f ad       	ldd	r24, Y+63	; 0x3f
    6072:	64 97       	sbiw	r28, 0x14	; 20
    6074:	23 96       	adiw	r28, 0x03	; 3
    6076:	9f ad       	ldd	r25, Y+63	; 0x3f
    6078:	23 97       	sbiw	r28, 0x03	; 3
    607a:	98 17       	cp	r25, r24
    607c:	18 f0       	brcs	.+6      	; 0x6084 <LCD_WriteNum+0x2d6>
    607e:	65 96       	adiw	r28, 0x15	; 21
    6080:	1f ae       	std	Y+63, r1	; 0x3f
    6082:	65 97       	sbiw	r28, 0x15	; 21
    6084:	63 96       	adiw	r28, 0x13	; 19
    6086:	8f ad       	ldd	r24, Y+63	; 0x3f
    6088:	63 97       	sbiw	r28, 0x13	; 19
    608a:	65 96       	adiw	r28, 0x15	; 21
    608c:	9f ad       	ldd	r25, Y+63	; 0x3f
    608e:	65 97       	sbiw	r28, 0x15	; 21
    6090:	89 2b       	or	r24, r25
    6092:	63 96       	adiw	r28, 0x13	; 19
    6094:	8f af       	std	Y+63, r24	; 0x3f
    6096:	63 97       	sbiw	r28, 0x13	; 19
    6098:	64 96       	adiw	r28, 0x14	; 20
    609a:	8f ad       	ldd	r24, Y+63	; 0x3f
    609c:	64 97       	sbiw	r28, 0x14	; 20
    609e:	23 96       	adiw	r28, 0x03	; 3
    60a0:	8f af       	std	Y+63, r24	; 0x3f
    60a2:	23 97       	sbiw	r28, 0x03	; 3
    60a4:	9b a9       	ldd	r25, Y+51	; 0x33
    60a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    60a8:	98 1b       	sub	r25, r24
    60aa:	24 96       	adiw	r28, 0x04	; 4
    60ac:	9f af       	std	Y+63, r25	; 0x3f
    60ae:	24 97       	sbiw	r28, 0x04	; 4
    60b0:	91 e0       	ldi	r25, 0x01	; 1
    60b2:	66 96       	adiw	r28, 0x16	; 22
    60b4:	9f af       	std	Y+63, r25	; 0x3f
    60b6:	66 97       	sbiw	r28, 0x16	; 22
    60b8:	24 96       	adiw	r28, 0x04	; 4
    60ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    60bc:	24 97       	sbiw	r28, 0x04	; 4
    60be:	9b a9       	ldd	r25, Y+51	; 0x33
    60c0:	98 17       	cp	r25, r24
    60c2:	18 f0       	brcs	.+6      	; 0x60ca <LCD_WriteNum+0x31c>
    60c4:	66 96       	adiw	r28, 0x16	; 22
    60c6:	1f ae       	std	Y+63, r1	; 0x3f
    60c8:	66 97       	sbiw	r28, 0x16	; 22
    60ca:	24 96       	adiw	r28, 0x04	; 4
    60cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    60ce:	24 97       	sbiw	r28, 0x04	; 4
    60d0:	63 96       	adiw	r28, 0x13	; 19
    60d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    60d4:	63 97       	sbiw	r28, 0x13	; 19
    60d6:	89 1b       	sub	r24, r25
    60d8:	67 96       	adiw	r28, 0x17	; 23
    60da:	8f af       	std	Y+63, r24	; 0x3f
    60dc:	67 97       	sbiw	r28, 0x17	; 23
    60de:	81 e0       	ldi	r24, 0x01	; 1
    60e0:	68 96       	adiw	r28, 0x18	; 24
    60e2:	8f af       	std	Y+63, r24	; 0x3f
    60e4:	68 97       	sbiw	r28, 0x18	; 24
    60e6:	67 96       	adiw	r28, 0x17	; 23
    60e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    60ea:	67 97       	sbiw	r28, 0x17	; 23
    60ec:	24 96       	adiw	r28, 0x04	; 4
    60ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    60f0:	24 97       	sbiw	r28, 0x04	; 4
    60f2:	89 17       	cp	r24, r25
    60f4:	18 f0       	brcs	.+6      	; 0x60fc <LCD_WriteNum+0x34e>
    60f6:	68 96       	adiw	r28, 0x18	; 24
    60f8:	1f ae       	std	Y+63, r1	; 0x3f
    60fa:	68 97       	sbiw	r28, 0x18	; 24
    60fc:	66 96       	adiw	r28, 0x16	; 22
    60fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    6100:	66 97       	sbiw	r28, 0x16	; 22
    6102:	68 96       	adiw	r28, 0x18	; 24
    6104:	8f ad       	ldd	r24, Y+63	; 0x3f
    6106:	68 97       	sbiw	r28, 0x18	; 24
    6108:	98 2b       	or	r25, r24
    610a:	66 96       	adiw	r28, 0x16	; 22
    610c:	9f af       	std	Y+63, r25	; 0x3f
    610e:	66 97       	sbiw	r28, 0x16	; 22
    6110:	67 96       	adiw	r28, 0x17	; 23
    6112:	9f ad       	ldd	r25, Y+63	; 0x3f
    6114:	67 97       	sbiw	r28, 0x17	; 23
    6116:	24 96       	adiw	r28, 0x04	; 4
    6118:	9f af       	std	Y+63, r25	; 0x3f
    611a:	24 97       	sbiw	r28, 0x04	; 4
    611c:	8c a9       	ldd	r24, Y+52	; 0x34
    611e:	9c ad       	ldd	r25, Y+60	; 0x3c
    6120:	89 1b       	sub	r24, r25
    6122:	25 96       	adiw	r28, 0x05	; 5
    6124:	8f af       	std	Y+63, r24	; 0x3f
    6126:	25 97       	sbiw	r28, 0x05	; 5
    6128:	25 96       	adiw	r28, 0x05	; 5
    612a:	8f ad       	ldd	r24, Y+63	; 0x3f
    612c:	25 97       	sbiw	r28, 0x05	; 5
    612e:	66 96       	adiw	r28, 0x16	; 22
    6130:	9f ad       	ldd	r25, Y+63	; 0x3f
    6132:	66 97       	sbiw	r28, 0x16	; 22
    6134:	89 1b       	sub	r24, r25
    6136:	25 96       	adiw	r28, 0x05	; 5
    6138:	8f af       	std	Y+63, r24	; 0x3f
    613a:	25 97       	sbiw	r28, 0x05	; 5
    613c:	8d ad       	ldd	r24, Y+61	; 0x3d
    613e:	8c a3       	std	Y+36, r24	; 0x24
    6140:	9e ad       	ldd	r25, Y+62	; 0x3e
    6142:	9d a3       	std	Y+37, r25	; 0x25
    6144:	8f ad       	ldd	r24, Y+63	; 0x3f
    6146:	8e a3       	std	Y+38, r24	; 0x26
    6148:	21 96       	adiw	r28, 0x01	; 1
    614a:	9f ad       	ldd	r25, Y+63	; 0x3f
    614c:	21 97       	sbiw	r28, 0x01	; 1
    614e:	9f a3       	std	Y+39, r25	; 0x27
    6150:	22 96       	adiw	r28, 0x02	; 2
    6152:	8f ad       	ldd	r24, Y+63	; 0x3f
    6154:	22 97       	sbiw	r28, 0x02	; 2
    6156:	88 a7       	std	Y+40, r24	; 0x28
    6158:	23 96       	adiw	r28, 0x03	; 3
    615a:	9f ad       	ldd	r25, Y+63	; 0x3f
    615c:	23 97       	sbiw	r28, 0x03	; 3
    615e:	99 a7       	std	Y+41, r25	; 0x29
    6160:	24 96       	adiw	r28, 0x04	; 4
    6162:	8f ad       	ldd	r24, Y+63	; 0x3f
    6164:	24 97       	sbiw	r28, 0x04	; 4
    6166:	8a a7       	std	Y+42, r24	; 0x2a
    6168:	25 96       	adiw	r28, 0x05	; 5
    616a:	9f ad       	ldd	r25, Y+63	; 0x3f
    616c:	25 97       	sbiw	r28, 0x05	; 5
    616e:	9b a7       	std	Y+43, r25	; 0x2b
    6170:	82 c0       	rjmp	.+260    	; 0x6276 <LCD_WriteNum+0x4c8>
	}
	else if(num==0)
    6172:	8c a1       	ldd	r24, Y+36	; 0x24
    6174:	9d a1       	ldd	r25, Y+37	; 0x25
    6176:	89 2b       	or	r24, r25
    6178:	9e a1       	ldd	r25, Y+38	; 0x26
    617a:	89 2b       	or	r24, r25
    617c:	9f a1       	ldd	r25, Y+39	; 0x27
    617e:	89 2b       	or	r24, r25
    6180:	98 a5       	ldd	r25, Y+40	; 0x28
    6182:	89 2b       	or	r24, r25
    6184:	99 a5       	ldd	r25, Y+41	; 0x29
    6186:	89 2b       	or	r24, r25
    6188:	9a a5       	ldd	r25, Y+42	; 0x2a
    618a:	89 2b       	or	r24, r25
    618c:	9b a5       	ldd	r25, Y+43	; 0x2b
    618e:	89 2b       	or	r24, r25
    6190:	88 23       	and	r24, r24
    6192:	09 f0       	breq	.+2      	; 0x6196 <LCD_WriteNum+0x3e8>
    6194:	70 c0       	rjmp	.+224    	; 0x6276 <LCD_WriteNum+0x4c8>
	{
		LCD_WriteChar('0');
    6196:	80 e3       	ldi	r24, 0x30	; 48
    6198:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
    619c:	6c c0       	rjmp	.+216    	; 0x6276 <LCD_WriteNum+0x4c8>
	}
	while(num)
	{
		rem=(num%10)+'0';
    619e:	ac a0       	ldd	r10, Y+36	; 0x24
    61a0:	bd a0       	ldd	r11, Y+37	; 0x25
    61a2:	ce a0       	ldd	r12, Y+38	; 0x26
    61a4:	df a0       	ldd	r13, Y+39	; 0x27
    61a6:	e8 a4       	ldd	r14, Y+40	; 0x28
    61a8:	f9 a4       	ldd	r15, Y+41	; 0x29
    61aa:	0a a5       	ldd	r16, Y+42	; 0x2a
    61ac:	1b a5       	ldd	r17, Y+43	; 0x2b
    61ae:	2a 2d       	mov	r18, r10
    61b0:	3b 2d       	mov	r19, r11
    61b2:	4c 2d       	mov	r20, r12
    61b4:	5d 2d       	mov	r21, r13
    61b6:	6e 2d       	mov	r22, r14
    61b8:	7f 2d       	mov	r23, r15
    61ba:	80 2f       	mov	r24, r16
    61bc:	91 2f       	mov	r25, r17
    61be:	0f 2e       	mov	r0, r31
    61c0:	fa e0       	ldi	r31, 0x0A	; 10
    61c2:	af 2e       	mov	r10, r31
    61c4:	f0 2d       	mov	r31, r0
    61c6:	bb 24       	eor	r11, r11
    61c8:	cc 24       	eor	r12, r12
    61ca:	dd 24       	eor	r13, r13
    61cc:	ee 24       	eor	r14, r14
    61ce:	ff 24       	eor	r15, r15
    61d0:	00 e0       	ldi	r16, 0x00	; 0
    61d2:	10 e0       	ldi	r17, 0x00	; 0
    61d4:	0e 94 9d 08 	call	0x113a	; 0x113a <__moddi3>
    61d8:	a2 2e       	mov	r10, r18
    61da:	b3 2e       	mov	r11, r19
    61dc:	c4 2e       	mov	r12, r20
    61de:	d5 2e       	mov	r13, r21
    61e0:	e6 2e       	mov	r14, r22
    61e2:	f7 2e       	mov	r15, r23
    61e4:	08 2f       	mov	r16, r24
    61e6:	19 2f       	mov	r17, r25
    61e8:	2a 2d       	mov	r18, r10
    61ea:	3b 2d       	mov	r19, r11
    61ec:	4c 2d       	mov	r20, r12
    61ee:	5d 2d       	mov	r21, r13
    61f0:	6e 2d       	mov	r22, r14
    61f2:	7f 2d       	mov	r23, r15
    61f4:	80 2f       	mov	r24, r16
    61f6:	91 2f       	mov	r25, r17
    61f8:	82 2f       	mov	r24, r18
    61fa:	80 5d       	subi	r24, 0xD0	; 208
    61fc:	8a 83       	std	Y+2, r24	; 0x02
		
		str[i++]=rem;
    61fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6200:	28 2f       	mov	r18, r24
    6202:	33 27       	eor	r19, r19
    6204:	27 fd       	sbrc	r18, 7
    6206:	30 95       	com	r19
    6208:	4a 81       	ldd	r20, Y+2	; 0x02
    620a:	ce 01       	movw	r24, r28
    620c:	04 96       	adiw	r24, 0x04	; 4
    620e:	fc 01       	movw	r30, r24
    6210:	e2 0f       	add	r30, r18
    6212:	f3 1f       	adc	r31, r19
    6214:	40 83       	st	Z, r20
    6216:	8b 81       	ldd	r24, Y+3	; 0x03
    6218:	8f 5f       	subi	r24, 0xFF	; 255
    621a:	8b 83       	std	Y+3, r24	; 0x03
		num=num/10;
    621c:	ac a0       	ldd	r10, Y+36	; 0x24
    621e:	bd a0       	ldd	r11, Y+37	; 0x25
    6220:	ce a0       	ldd	r12, Y+38	; 0x26
    6222:	df a0       	ldd	r13, Y+39	; 0x27
    6224:	e8 a4       	ldd	r14, Y+40	; 0x28
    6226:	f9 a4       	ldd	r15, Y+41	; 0x29
    6228:	0a a5       	ldd	r16, Y+42	; 0x2a
    622a:	1b a5       	ldd	r17, Y+43	; 0x2b
    622c:	2a 2d       	mov	r18, r10
    622e:	3b 2d       	mov	r19, r11
    6230:	4c 2d       	mov	r20, r12
    6232:	5d 2d       	mov	r21, r13
    6234:	6e 2d       	mov	r22, r14
    6236:	7f 2d       	mov	r23, r15
    6238:	80 2f       	mov	r24, r16
    623a:	91 2f       	mov	r25, r17
    623c:	0f 2e       	mov	r0, r31
    623e:	fa e0       	ldi	r31, 0x0A	; 10
    6240:	af 2e       	mov	r10, r31
    6242:	f0 2d       	mov	r31, r0
    6244:	bb 24       	eor	r11, r11
    6246:	cc 24       	eor	r12, r12
    6248:	dd 24       	eor	r13, r13
    624a:	ee 24       	eor	r14, r14
    624c:	ff 24       	eor	r15, r15
    624e:	00 e0       	ldi	r16, 0x00	; 0
    6250:	10 e0       	ldi	r17, 0x00	; 0
    6252:	0e 94 75 00 	call	0xea	; 0xea <__divdi3>
    6256:	a2 2e       	mov	r10, r18
    6258:	b3 2e       	mov	r11, r19
    625a:	c4 2e       	mov	r12, r20
    625c:	d5 2e       	mov	r13, r21
    625e:	e6 2e       	mov	r14, r22
    6260:	f7 2e       	mov	r15, r23
    6262:	08 2f       	mov	r16, r24
    6264:	19 2f       	mov	r17, r25
    6266:	ac a2       	std	Y+36, r10	; 0x24
    6268:	bd a2       	std	Y+37, r11	; 0x25
    626a:	ce a2       	std	Y+38, r12	; 0x26
    626c:	df a2       	std	Y+39, r13	; 0x27
    626e:	e8 a6       	std	Y+40, r14	; 0x28
    6270:	f9 a6       	std	Y+41, r15	; 0x29
    6272:	0a a7       	std	Y+42, r16	; 0x2a
    6274:	1b a7       	std	Y+43, r17	; 0x2b
	}
	else if(num==0)
	{
		LCD_WriteChar('0');
	}
	while(num)
    6276:	8c a1       	ldd	r24, Y+36	; 0x24
    6278:	9d a1       	ldd	r25, Y+37	; 0x25
    627a:	89 2b       	or	r24, r25
    627c:	9e a1       	ldd	r25, Y+38	; 0x26
    627e:	89 2b       	or	r24, r25
    6280:	9f a1       	ldd	r25, Y+39	; 0x27
    6282:	89 2b       	or	r24, r25
    6284:	98 a5       	ldd	r25, Y+40	; 0x28
    6286:	89 2b       	or	r24, r25
    6288:	99 a5       	ldd	r25, Y+41	; 0x29
    628a:	89 2b       	or	r24, r25
    628c:	9a a5       	ldd	r25, Y+42	; 0x2a
    628e:	89 2b       	or	r24, r25
    6290:	9b a5       	ldd	r25, Y+43	; 0x2b
    6292:	89 2b       	or	r24, r25
    6294:	88 23       	and	r24, r24
    6296:	09 f0       	breq	.+2      	; 0x629a <LCD_WriteNum+0x4ec>
    6298:	82 cf       	rjmp	.-252    	; 0x619e <LCD_WriteNum+0x3f0>
		
		str[i++]=rem;
		num=num/10;
		
	}
	str[i]=0;
    629a:	8b 81       	ldd	r24, Y+3	; 0x03
    629c:	28 2f       	mov	r18, r24
    629e:	33 27       	eor	r19, r19
    62a0:	27 fd       	sbrc	r18, 7
    62a2:	30 95       	com	r19
    62a4:	ce 01       	movw	r24, r28
    62a6:	04 96       	adiw	r24, 0x04	; 4
    62a8:	fc 01       	movw	r30, r24
    62aa:	e2 0f       	add	r30, r18
    62ac:	f3 1f       	adc	r31, r19
    62ae:	10 82       	st	Z, r1
	for(j=i-1;j>=0;j--)
    62b0:	8b 81       	ldd	r24, Y+3	; 0x03
    62b2:	81 50       	subi	r24, 0x01	; 1
    62b4:	89 83       	std	Y+1, r24	; 0x01
    62b6:	10 c0       	rjmp	.+32     	; 0x62d8 <LCD_WriteNum+0x52a>
	{
		LCD_WriteChar(str[j]);
    62b8:	89 81       	ldd	r24, Y+1	; 0x01
    62ba:	28 2f       	mov	r18, r24
    62bc:	33 27       	eor	r19, r19
    62be:	27 fd       	sbrc	r18, 7
    62c0:	30 95       	com	r19
    62c2:	ce 01       	movw	r24, r28
    62c4:	04 96       	adiw	r24, 0x04	; 4
    62c6:	fc 01       	movw	r30, r24
    62c8:	e2 0f       	add	r30, r18
    62ca:	f3 1f       	adc	r31, r19
    62cc:	80 81       	ld	r24, Z
    62ce:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
		str[i++]=rem;
		num=num/10;
		
	}
	str[i]=0;
	for(j=i-1;j>=0;j--)
    62d2:	89 81       	ldd	r24, Y+1	; 0x01
    62d4:	81 50       	subi	r24, 0x01	; 1
    62d6:	89 83       	std	Y+1, r24	; 0x01
    62d8:	89 81       	ldd	r24, Y+1	; 0x01
    62da:	88 23       	and	r24, r24
    62dc:	6c f7       	brge	.-38     	; 0x62b8 <LCD_WriteNum+0x50a>
	{
		LCD_WriteChar(str[j]);
	}
	
}
    62de:	c9 5a       	subi	r28, 0xA9	; 169
    62e0:	df 4f       	sbci	r29, 0xFF	; 255
    62e2:	0f b6       	in	r0, 0x3f	; 63
    62e4:	f8 94       	cli
    62e6:	de bf       	out	0x3e, r29	; 62
    62e8:	0f be       	out	0x3f, r0	; 63
    62ea:	cd bf       	out	0x3d, r28	; 61
    62ec:	cf 91       	pop	r28
    62ee:	df 91       	pop	r29
    62f0:	1f 91       	pop	r17
    62f2:	0f 91       	pop	r16
    62f4:	ff 90       	pop	r15
    62f6:	ef 90       	pop	r14
    62f8:	df 90       	pop	r13
    62fa:	cf 90       	pop	r12
    62fc:	bf 90       	pop	r11
    62fe:	af 90       	pop	r10
    6300:	08 95       	ret

00006302 <LCD_WriteBinary>:
	 }
	
}
*/
void LCD_WriteBinary(u8 num)
{
    6302:	df 93       	push	r29
    6304:	cf 93       	push	r28
    6306:	00 d0       	rcall	.+0      	; 0x6308 <LCD_WriteBinary+0x6>
    6308:	00 d0       	rcall	.+0      	; 0x630a <LCD_WriteBinary+0x8>
    630a:	cd b7       	in	r28, 0x3d	; 61
    630c:	de b7       	in	r29, 0x3e	; 62
    630e:	8c 83       	std	Y+4, r24	; 0x04
	u8 j=0,flag=0;
    6310:	1b 82       	std	Y+3, r1	; 0x03
    6312:	1a 82       	std	Y+2, r1	; 0x02
	s8 i=7;
    6314:	87 e0       	ldi	r24, 0x07	; 7
    6316:	89 83       	std	Y+1, r24	; 0x01
	//LCD_WriteString("0b");
	for(i=7;i>=0;i--)
    6318:	87 e0       	ldi	r24, 0x07	; 7
    631a:	89 83       	std	Y+1, r24	; 0x01
    631c:	33 c0       	rjmp	.+102    	; 0x6384 <LCD_WriteBinary+0x82>
	{
		if(READ_BIT(num,i)==1)
    631e:	8c 81       	ldd	r24, Y+4	; 0x04
    6320:	28 2f       	mov	r18, r24
    6322:	30 e0       	ldi	r19, 0x00	; 0
    6324:	89 81       	ldd	r24, Y+1	; 0x01
    6326:	99 27       	eor	r25, r25
    6328:	87 fd       	sbrc	r24, 7
    632a:	90 95       	com	r25
    632c:	a9 01       	movw	r20, r18
    632e:	02 c0       	rjmp	.+4      	; 0x6334 <LCD_WriteBinary+0x32>
    6330:	55 95       	asr	r21
    6332:	47 95       	ror	r20
    6334:	8a 95       	dec	r24
    6336:	e2 f7       	brpl	.-8      	; 0x6330 <LCD_WriteBinary+0x2e>
    6338:	ca 01       	movw	r24, r20
    633a:	81 70       	andi	r24, 0x01	; 1
    633c:	90 70       	andi	r25, 0x00	; 0
    633e:	88 23       	and	r24, r24
    6340:	31 f0       	breq	.+12     	; 0x634e <LCD_WriteBinary+0x4c>
		{
			LCD_WriteChar('1');
    6342:	81 e3       	ldi	r24, 0x31	; 49
    6344:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
			
			flag=1;
    6348:	81 e0       	ldi	r24, 0x01	; 1
    634a:	8a 83       	std	Y+2, r24	; 0x02
    634c:	18 c0       	rjmp	.+48     	; 0x637e <LCD_WriteBinary+0x7c>
		}
		else if(READ_BIT(num,i)==0&&flag==1)
    634e:	8c 81       	ldd	r24, Y+4	; 0x04
    6350:	28 2f       	mov	r18, r24
    6352:	30 e0       	ldi	r19, 0x00	; 0
    6354:	89 81       	ldd	r24, Y+1	; 0x01
    6356:	99 27       	eor	r25, r25
    6358:	87 fd       	sbrc	r24, 7
    635a:	90 95       	com	r25
    635c:	a9 01       	movw	r20, r18
    635e:	02 c0       	rjmp	.+4      	; 0x6364 <LCD_WriteBinary+0x62>
    6360:	55 95       	asr	r21
    6362:	47 95       	ror	r20
    6364:	8a 95       	dec	r24
    6366:	e2 f7       	brpl	.-8      	; 0x6360 <LCD_WriteBinary+0x5e>
    6368:	ca 01       	movw	r24, r20
    636a:	81 70       	andi	r24, 0x01	; 1
    636c:	90 70       	andi	r25, 0x00	; 0
    636e:	00 97       	sbiw	r24, 0x00	; 0
    6370:	31 f4       	brne	.+12     	; 0x637e <LCD_WriteBinary+0x7c>
    6372:	8a 81       	ldd	r24, Y+2	; 0x02
    6374:	81 30       	cpi	r24, 0x01	; 1
    6376:	19 f4       	brne	.+6      	; 0x637e <LCD_WriteBinary+0x7c>
		{
			LCD_WriteChar('0');
    6378:	80 e3       	ldi	r24, 0x30	; 48
    637a:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
void LCD_WriteBinary(u8 num)
{
	u8 j=0,flag=0;
	s8 i=7;
	//LCD_WriteString("0b");
	for(i=7;i>=0;i--)
    637e:	89 81       	ldd	r24, Y+1	; 0x01
    6380:	81 50       	subi	r24, 0x01	; 1
    6382:	89 83       	std	Y+1, r24	; 0x01
    6384:	89 81       	ldd	r24, Y+1	; 0x01
    6386:	88 23       	and	r24, r24
    6388:	54 f6       	brge	.-108    	; 0x631e <LCD_WriteBinary+0x1c>
		}
	}

	
	
}
    638a:	0f 90       	pop	r0
    638c:	0f 90       	pop	r0
    638e:	0f 90       	pop	r0
    6390:	0f 90       	pop	r0
    6392:	cf 91       	pop	r28
    6394:	df 91       	pop	r29
    6396:	08 95       	ret

00006398 <LCD_WriteHex>:

void LCD_WriteHex(u32 num)
{
    6398:	df 93       	push	r29
    639a:	cf 93       	push	r28
    639c:	cd b7       	in	r28, 0x3d	; 61
    639e:	de b7       	in	r29, 0x3e	; 62
    63a0:	2a 97       	sbiw	r28, 0x0a	; 10
    63a2:	0f b6       	in	r0, 0x3f	; 63
    63a4:	f8 94       	cli
    63a6:	de bf       	out	0x3e, r29	; 62
    63a8:	0f be       	out	0x3f, r0	; 63
    63aa:	cd bf       	out	0x3d, r28	; 61
    63ac:	6f 83       	std	Y+7, r22	; 0x07
    63ae:	78 87       	std	Y+8, r23	; 0x08
    63b0:	89 87       	std	Y+9, r24	; 0x09
    63b2:	9a 87       	std	Y+10, r25	; 0x0a
	u32 rem;
	u8 flag=0;
    63b4:	1a 82       	std	Y+2, r1	; 0x02
	//LCD_WriteString("0x");
	for(u8 i=0;i<8;i++)
    63b6:	19 82       	std	Y+1, r1	; 0x01
    63b8:	6a c0       	rjmp	.+212    	; 0x648e <LCD_WriteHex+0xf6>
	{
		rem=num/268435456;
    63ba:	8f 81       	ldd	r24, Y+7	; 0x07
    63bc:	98 85       	ldd	r25, Y+8	; 0x08
    63be:	a9 85       	ldd	r26, Y+9	; 0x09
    63c0:	ba 85       	ldd	r27, Y+10	; 0x0a
    63c2:	07 2e       	mov	r0, r23
    63c4:	7c e1       	ldi	r23, 0x1C	; 28
    63c6:	b6 95       	lsr	r27
    63c8:	a7 95       	ror	r26
    63ca:	97 95       	ror	r25
    63cc:	87 95       	ror	r24
    63ce:	7a 95       	dec	r23
    63d0:	d1 f7       	brne	.-12     	; 0x63c6 <LCD_WriteHex+0x2e>
    63d2:	70 2d       	mov	r23, r0
    63d4:	8b 83       	std	Y+3, r24	; 0x03
    63d6:	9c 83       	std	Y+4, r25	; 0x04
    63d8:	ad 83       	std	Y+5, r26	; 0x05
    63da:	be 83       	std	Y+6, r27	; 0x06
		
		if(rem>=0&&rem<=9)
    63dc:	8b 81       	ldd	r24, Y+3	; 0x03
    63de:	9c 81       	ldd	r25, Y+4	; 0x04
    63e0:	ad 81       	ldd	r26, Y+5	; 0x05
    63e2:	be 81       	ldd	r27, Y+6	; 0x06
    63e4:	8a 30       	cpi	r24, 0x0A	; 10
    63e6:	91 05       	cpc	r25, r1
    63e8:	a1 05       	cpc	r26, r1
    63ea:	b1 05       	cpc	r27, r1
    63ec:	60 f4       	brcc	.+24     	; 0x6406 <LCD_WriteHex+0x6e>
		{
			rem=rem+'0';
    63ee:	8b 81       	ldd	r24, Y+3	; 0x03
    63f0:	9c 81       	ldd	r25, Y+4	; 0x04
    63f2:	ad 81       	ldd	r26, Y+5	; 0x05
    63f4:	be 81       	ldd	r27, Y+6	; 0x06
    63f6:	c0 96       	adiw	r24, 0x30	; 48
    63f8:	a1 1d       	adc	r26, r1
    63fa:	b1 1d       	adc	r27, r1
    63fc:	8b 83       	std	Y+3, r24	; 0x03
    63fe:	9c 83       	std	Y+4, r25	; 0x04
    6400:	ad 83       	std	Y+5, r26	; 0x05
    6402:	be 83       	std	Y+6, r27	; 0x06
    6404:	0b c0       	rjmp	.+22     	; 0x641c <LCD_WriteHex+0x84>
			
		}
		else
		{
			rem=rem-10+'A';
    6406:	8b 81       	ldd	r24, Y+3	; 0x03
    6408:	9c 81       	ldd	r25, Y+4	; 0x04
    640a:	ad 81       	ldd	r26, Y+5	; 0x05
    640c:	be 81       	ldd	r27, Y+6	; 0x06
    640e:	c7 96       	adiw	r24, 0x37	; 55
    6410:	a1 1d       	adc	r26, r1
    6412:	b1 1d       	adc	r27, r1
    6414:	8b 83       	std	Y+3, r24	; 0x03
    6416:	9c 83       	std	Y+4, r25	; 0x04
    6418:	ad 83       	std	Y+5, r26	; 0x05
    641a:	be 83       	std	Y+6, r27	; 0x06
		}
		
		if(rem!='0')
    641c:	8b 81       	ldd	r24, Y+3	; 0x03
    641e:	9c 81       	ldd	r25, Y+4	; 0x04
    6420:	ad 81       	ldd	r26, Y+5	; 0x05
    6422:	be 81       	ldd	r27, Y+6	; 0x06
    6424:	80 33       	cpi	r24, 0x30	; 48
    6426:	91 05       	cpc	r25, r1
    6428:	a1 05       	cpc	r26, r1
    642a:	b1 05       	cpc	r27, r1
    642c:	31 f0       	breq	.+12     	; 0x643a <LCD_WriteHex+0xa2>
		{
			LCD_WriteChar(rem);
    642e:	8b 81       	ldd	r24, Y+3	; 0x03
    6430:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
			flag=1;
    6434:	81 e0       	ldi	r24, 0x01	; 1
    6436:	8a 83       	std	Y+2, r24	; 0x02
    6438:	0f c0       	rjmp	.+30     	; 0x6458 <LCD_WriteHex+0xc0>
			
		}
		else if(rem=='0'&&flag==1)
    643a:	8b 81       	ldd	r24, Y+3	; 0x03
    643c:	9c 81       	ldd	r25, Y+4	; 0x04
    643e:	ad 81       	ldd	r26, Y+5	; 0x05
    6440:	be 81       	ldd	r27, Y+6	; 0x06
    6442:	80 33       	cpi	r24, 0x30	; 48
    6444:	91 05       	cpc	r25, r1
    6446:	a1 05       	cpc	r26, r1
    6448:	b1 05       	cpc	r27, r1
    644a:	31 f4       	brne	.+12     	; 0x6458 <LCD_WriteHex+0xc0>
    644c:	8a 81       	ldd	r24, Y+2	; 0x02
    644e:	81 30       	cpi	r24, 0x01	; 1
    6450:	19 f4       	brne	.+6      	; 0x6458 <LCD_WriteHex+0xc0>
		{
			LCD_WriteChar(rem);
    6452:	8b 81       	ldd	r24, Y+3	; 0x03
    6454:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
		}
		
		num=num<<4;
    6458:	8f 81       	ldd	r24, Y+7	; 0x07
    645a:	98 85       	ldd	r25, Y+8	; 0x08
    645c:	a9 85       	ldd	r26, Y+9	; 0x09
    645e:	ba 85       	ldd	r27, Y+10	; 0x0a
    6460:	88 0f       	add	r24, r24
    6462:	99 1f       	adc	r25, r25
    6464:	aa 1f       	adc	r26, r26
    6466:	bb 1f       	adc	r27, r27
    6468:	88 0f       	add	r24, r24
    646a:	99 1f       	adc	r25, r25
    646c:	aa 1f       	adc	r26, r26
    646e:	bb 1f       	adc	r27, r27
    6470:	88 0f       	add	r24, r24
    6472:	99 1f       	adc	r25, r25
    6474:	aa 1f       	adc	r26, r26
    6476:	bb 1f       	adc	r27, r27
    6478:	88 0f       	add	r24, r24
    647a:	99 1f       	adc	r25, r25
    647c:	aa 1f       	adc	r26, r26
    647e:	bb 1f       	adc	r27, r27
    6480:	8f 83       	std	Y+7, r24	; 0x07
    6482:	98 87       	std	Y+8, r25	; 0x08
    6484:	a9 87       	std	Y+9, r26	; 0x09
    6486:	ba 87       	std	Y+10, r27	; 0x0a
void LCD_WriteHex(u32 num)
{
	u32 rem;
	u8 flag=0;
	//LCD_WriteString("0x");
	for(u8 i=0;i<8;i++)
    6488:	89 81       	ldd	r24, Y+1	; 0x01
    648a:	8f 5f       	subi	r24, 0xFF	; 255
    648c:	89 83       	std	Y+1, r24	; 0x01
    648e:	89 81       	ldd	r24, Y+1	; 0x01
    6490:	88 30       	cpi	r24, 0x08	; 8
    6492:	08 f4       	brcc	.+2      	; 0x6496 <LCD_WriteHex+0xfe>
    6494:	92 cf       	rjmp	.-220    	; 0x63ba <LCD_WriteHex+0x22>
		num=num<<4;
		
		
	}
	
}
    6496:	2a 96       	adiw	r28, 0x0a	; 10
    6498:	0f b6       	in	r0, 0x3f	; 63
    649a:	f8 94       	cli
    649c:	de bf       	out	0x3e, r29	; 62
    649e:	0f be       	out	0x3f, r0	; 63
    64a0:	cd bf       	out	0x3d, r28	; 61
    64a2:	cf 91       	pop	r28
    64a4:	df 91       	pop	r29
    64a6:	08 95       	ret

000064a8 <LCD_Write_4D>:
			
	}
}
*/
void LCD_Write_4D(u16 num)
{
    64a8:	df 93       	push	r29
    64aa:	cf 93       	push	r28
    64ac:	cd b7       	in	r28, 0x3d	; 61
    64ae:	de b7       	in	r29, 0x3e	; 62
    64b0:	a5 97       	sbiw	r28, 0x25	; 37
    64b2:	0f b6       	in	r0, 0x3f	; 63
    64b4:	f8 94       	cli
    64b6:	de bf       	out	0x3e, r29	; 62
    64b8:	0f be       	out	0x3f, r0	; 63
    64ba:	cd bf       	out	0x3d, r28	; 61
    64bc:	9d a3       	std	Y+37, r25	; 0x25
    64be:	8c a3       	std	Y+36, r24	; 0x24
	u8 str[32];
	s8 rem,i=0,j;
    64c0:	1a 82       	std	Y+2, r1	; 0x02
	str[i++]=(num%10000)/1000+'0';
    64c2:	8a 81       	ldd	r24, Y+2	; 0x02
    64c4:	e8 2f       	mov	r30, r24
    64c6:	ff 27       	eor	r31, r31
    64c8:	e7 fd       	sbrc	r30, 7
    64ca:	f0 95       	com	r31
    64cc:	8c a1       	ldd	r24, Y+36	; 0x24
    64ce:	9d a1       	ldd	r25, Y+37	; 0x25
    64d0:	20 e1       	ldi	r18, 0x10	; 16
    64d2:	37 e2       	ldi	r19, 0x27	; 39
    64d4:	b9 01       	movw	r22, r18
    64d6:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    64da:	28 ee       	ldi	r18, 0xE8	; 232
    64dc:	33 e0       	ldi	r19, 0x03	; 3
    64de:	b9 01       	movw	r22, r18
    64e0:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    64e4:	cb 01       	movw	r24, r22
    64e6:	28 2f       	mov	r18, r24
    64e8:	20 5d       	subi	r18, 0xD0	; 208
    64ea:	ce 01       	movw	r24, r28
    64ec:	04 96       	adiw	r24, 0x04	; 4
    64ee:	e8 0f       	add	r30, r24
    64f0:	f9 1f       	adc	r31, r25
    64f2:	20 83       	st	Z, r18
    64f4:	8a 81       	ldd	r24, Y+2	; 0x02
    64f6:	8f 5f       	subi	r24, 0xFF	; 255
    64f8:	8a 83       	std	Y+2, r24	; 0x02
	str[i++]=(num%1000)/100+'0';
    64fa:	8a 81       	ldd	r24, Y+2	; 0x02
    64fc:	e8 2f       	mov	r30, r24
    64fe:	ff 27       	eor	r31, r31
    6500:	e7 fd       	sbrc	r30, 7
    6502:	f0 95       	com	r31
    6504:	8c a1       	ldd	r24, Y+36	; 0x24
    6506:	9d a1       	ldd	r25, Y+37	; 0x25
    6508:	28 ee       	ldi	r18, 0xE8	; 232
    650a:	33 e0       	ldi	r19, 0x03	; 3
    650c:	b9 01       	movw	r22, r18
    650e:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    6512:	24 e6       	ldi	r18, 0x64	; 100
    6514:	30 e0       	ldi	r19, 0x00	; 0
    6516:	b9 01       	movw	r22, r18
    6518:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    651c:	cb 01       	movw	r24, r22
    651e:	28 2f       	mov	r18, r24
    6520:	20 5d       	subi	r18, 0xD0	; 208
    6522:	ce 01       	movw	r24, r28
    6524:	04 96       	adiw	r24, 0x04	; 4
    6526:	e8 0f       	add	r30, r24
    6528:	f9 1f       	adc	r31, r25
    652a:	20 83       	st	Z, r18
    652c:	8a 81       	ldd	r24, Y+2	; 0x02
    652e:	8f 5f       	subi	r24, 0xFF	; 255
    6530:	8a 83       	std	Y+2, r24	; 0x02
	str[i++]=(num%100)/10+'0';
    6532:	8a 81       	ldd	r24, Y+2	; 0x02
    6534:	e8 2f       	mov	r30, r24
    6536:	ff 27       	eor	r31, r31
    6538:	e7 fd       	sbrc	r30, 7
    653a:	f0 95       	com	r31
    653c:	8c a1       	ldd	r24, Y+36	; 0x24
    653e:	9d a1       	ldd	r25, Y+37	; 0x25
    6540:	24 e6       	ldi	r18, 0x64	; 100
    6542:	30 e0       	ldi	r19, 0x00	; 0
    6544:	b9 01       	movw	r22, r18
    6546:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    654a:	2a e0       	ldi	r18, 0x0A	; 10
    654c:	30 e0       	ldi	r19, 0x00	; 0
    654e:	b9 01       	movw	r22, r18
    6550:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    6554:	cb 01       	movw	r24, r22
    6556:	28 2f       	mov	r18, r24
    6558:	20 5d       	subi	r18, 0xD0	; 208
    655a:	ce 01       	movw	r24, r28
    655c:	04 96       	adiw	r24, 0x04	; 4
    655e:	e8 0f       	add	r30, r24
    6560:	f9 1f       	adc	r31, r25
    6562:	20 83       	st	Z, r18
    6564:	8a 81       	ldd	r24, Y+2	; 0x02
    6566:	8f 5f       	subi	r24, 0xFF	; 255
    6568:	8a 83       	std	Y+2, r24	; 0x02
	str[i++]=(num%10)/1+'0';
    656a:	8a 81       	ldd	r24, Y+2	; 0x02
    656c:	e8 2f       	mov	r30, r24
    656e:	ff 27       	eor	r31, r31
    6570:	e7 fd       	sbrc	r30, 7
    6572:	f0 95       	com	r31
    6574:	8c a1       	ldd	r24, Y+36	; 0x24
    6576:	9d a1       	ldd	r25, Y+37	; 0x25
    6578:	2a e0       	ldi	r18, 0x0A	; 10
    657a:	30 e0       	ldi	r19, 0x00	; 0
    657c:	b9 01       	movw	r22, r18
    657e:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <__udivmodhi4>
    6582:	28 2f       	mov	r18, r24
    6584:	20 5d       	subi	r18, 0xD0	; 208
    6586:	ce 01       	movw	r24, r28
    6588:	04 96       	adiw	r24, 0x04	; 4
    658a:	e8 0f       	add	r30, r24
    658c:	f9 1f       	adc	r31, r25
    658e:	20 83       	st	Z, r18
    6590:	8a 81       	ldd	r24, Y+2	; 0x02
    6592:	8f 5f       	subi	r24, 0xFF	; 255
    6594:	8a 83       	std	Y+2, r24	; 0x02
	str[i]=0;
    6596:	8a 81       	ldd	r24, Y+2	; 0x02
    6598:	28 2f       	mov	r18, r24
    659a:	33 27       	eor	r19, r19
    659c:	27 fd       	sbrc	r18, 7
    659e:	30 95       	com	r19
    65a0:	ce 01       	movw	r24, r28
    65a2:	04 96       	adiw	r24, 0x04	; 4
    65a4:	fc 01       	movw	r30, r24
    65a6:	e2 0f       	add	r30, r18
    65a8:	f3 1f       	adc	r31, r19
    65aa:	10 82       	st	Z, r1
	LCD_WriteString(str);
    65ac:	ce 01       	movw	r24, r28
    65ae:	04 96       	adiw	r24, 0x04	; 4
    65b0:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <LCD_WriteString>
}
    65b4:	a5 96       	adiw	r28, 0x25	; 37
    65b6:	0f b6       	in	r0, 0x3f	; 63
    65b8:	f8 94       	cli
    65ba:	de bf       	out	0x3e, r29	; 62
    65bc:	0f be       	out	0x3f, r0	; 63
    65be:	cd bf       	out	0x3d, r28	; 61
    65c0:	cf 91       	pop	r28
    65c2:	df 91       	pop	r29
    65c4:	08 95       	ret

000065c6 <LCD_CustomChar>:

void LCD_CustomChar(u8 address,u8*pattern)
{
    65c6:	df 93       	push	r29
    65c8:	cf 93       	push	r28
    65ca:	00 d0       	rcall	.+0      	; 0x65cc <LCD_CustomChar+0x6>
    65cc:	00 d0       	rcall	.+0      	; 0x65ce <LCD_CustomChar+0x8>
    65ce:	cd b7       	in	r28, 0x3d	; 61
    65d0:	de b7       	in	r29, 0x3e	; 62
    65d2:	8a 83       	std	Y+2, r24	; 0x02
    65d4:	7c 83       	std	Y+4, r23	; 0x04
    65d6:	6b 83       	std	Y+3, r22	; 0x03
	u8 i=0;
    65d8:	19 82       	std	Y+1, r1	; 0x01
	address=0x40+address*8;
    65da:	8a 81       	ldd	r24, Y+2	; 0x02
    65dc:	88 2f       	mov	r24, r24
    65de:	90 e0       	ldi	r25, 0x00	; 0
    65e0:	08 96       	adiw	r24, 0x08	; 8
    65e2:	88 0f       	add	r24, r24
    65e4:	99 1f       	adc	r25, r25
    65e6:	88 0f       	add	r24, r24
    65e8:	99 1f       	adc	r25, r25
    65ea:	88 0f       	add	r24, r24
    65ec:	99 1f       	adc	r25, r25
    65ee:	8a 83       	std	Y+2, r24	; 0x02
	Write_Ins(address);
    65f0:	8a 81       	ldd	r24, Y+2	; 0x02
    65f2:	0e 94 25 29 	call	0x524a	; 0x524a <Write_Ins>
	for(i=0;i<8;i++)
    65f6:	19 82       	std	Y+1, r1	; 0x01
    65f8:	0e c0       	rjmp	.+28     	; 0x6616 <LCD_CustomChar+0x50>
	{
		
		Write_Data(pattern[i]);
    65fa:	89 81       	ldd	r24, Y+1	; 0x01
    65fc:	28 2f       	mov	r18, r24
    65fe:	30 e0       	ldi	r19, 0x00	; 0
    6600:	8b 81       	ldd	r24, Y+3	; 0x03
    6602:	9c 81       	ldd	r25, Y+4	; 0x04
    6604:	fc 01       	movw	r30, r24
    6606:	e2 0f       	add	r30, r18
    6608:	f3 1f       	adc	r31, r19
    660a:	80 81       	ld	r24, Z
    660c:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <Write_Data>
void LCD_CustomChar(u8 address,u8*pattern)
{
	u8 i=0;
	address=0x40+address*8;
	Write_Ins(address);
	for(i=0;i<8;i++)
    6610:	89 81       	ldd	r24, Y+1	; 0x01
    6612:	8f 5f       	subi	r24, 0xFF	; 255
    6614:	89 83       	std	Y+1, r24	; 0x01
    6616:	89 81       	ldd	r24, Y+1	; 0x01
    6618:	88 30       	cpi	r24, 0x08	; 8
    661a:	78 f3       	brcs	.-34     	; 0x65fa <LCD_CustomChar+0x34>
	{
		
		Write_Data(pattern[i]);
		
	}
	LCD_GoTO(0,0);
    661c:	80 e0       	ldi	r24, 0x00	; 0
    661e:	60 e0       	ldi	r22, 0x00	; 0
    6620:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	
}
    6624:	0f 90       	pop	r0
    6626:	0f 90       	pop	r0
    6628:	0f 90       	pop	r0
    662a:	0f 90       	pop	r0
    662c:	cf 91       	pop	r28
    662e:	df 91       	pop	r29
    6630:	08 95       	ret

00006632 <LCD_WriteStringGoTo>:
void LCD_WriteStringGoTo(u8 line,u8 cell,u8*str)
{
    6632:	df 93       	push	r29
    6634:	cf 93       	push	r28
    6636:	00 d0       	rcall	.+0      	; 0x6638 <LCD_WriteStringGoTo+0x6>
    6638:	00 d0       	rcall	.+0      	; 0x663a <LCD_WriteStringGoTo+0x8>
    663a:	cd b7       	in	r28, 0x3d	; 61
    663c:	de b7       	in	r29, 0x3e	; 62
    663e:	89 83       	std	Y+1, r24	; 0x01
    6640:	6a 83       	std	Y+2, r22	; 0x02
    6642:	5c 83       	std	Y+4, r21	; 0x04
    6644:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoTO(line,cell);
    6646:	89 81       	ldd	r24, Y+1	; 0x01
    6648:	6a 81       	ldd	r22, Y+2	; 0x02
    664a:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteString(str);
    664e:	8b 81       	ldd	r24, Y+3	; 0x03
    6650:	9c 81       	ldd	r25, Y+4	; 0x04
    6652:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <LCD_WriteString>
	
}
    6656:	0f 90       	pop	r0
    6658:	0f 90       	pop	r0
    665a:	0f 90       	pop	r0
    665c:	0f 90       	pop	r0
    665e:	cf 91       	pop	r28
    6660:	df 91       	pop	r29
    6662:	08 95       	ret

00006664 <LCD_name>:
void LCD_name(u8 line,u8 cell)
{
    6664:	df 93       	push	r29
    6666:	cf 93       	push	r28
    6668:	00 d0       	rcall	.+0      	; 0x666a <LCD_name+0x6>
    666a:	cd b7       	in	r28, 0x3d	; 61
    666c:	de b7       	in	r29, 0x3e	; 62
    666e:	89 83       	std	Y+1, r24	; 0x01
    6670:	6a 83       	std	Y+2, r22	; 0x02
	LCD_GoTO(line,cell+4);
    6672:	8a 81       	ldd	r24, Y+2	; 0x02
    6674:	98 2f       	mov	r25, r24
    6676:	9c 5f       	subi	r25, 0xFC	; 252
    6678:	89 81       	ldd	r24, Y+1	; 0x01
    667a:	69 2f       	mov	r22, r25
    667c:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteChar(0);
    6680:	80 e0       	ldi	r24, 0x00	; 0
    6682:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
	LCD_GoTO(line,cell+3);
    6686:	8a 81       	ldd	r24, Y+2	; 0x02
    6688:	98 2f       	mov	r25, r24
    668a:	9d 5f       	subi	r25, 0xFD	; 253
    668c:	89 81       	ldd	r24, Y+1	; 0x01
    668e:	69 2f       	mov	r22, r25
    6690:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteChar(1);
    6694:	81 e0       	ldi	r24, 0x01	; 1
    6696:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
	LCD_GoTO(line,cell+2);
    669a:	8a 81       	ldd	r24, Y+2	; 0x02
    669c:	98 2f       	mov	r25, r24
    669e:	9e 5f       	subi	r25, 0xFE	; 254
    66a0:	89 81       	ldd	r24, Y+1	; 0x01
    66a2:	69 2f       	mov	r22, r25
    66a4:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteChar(2);
    66a8:	82 e0       	ldi	r24, 0x02	; 2
    66aa:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
	LCD_GoTO(line,cell+1);
    66ae:	8a 81       	ldd	r24, Y+2	; 0x02
    66b0:	98 2f       	mov	r25, r24
    66b2:	9f 5f       	subi	r25, 0xFF	; 255
    66b4:	89 81       	ldd	r24, Y+1	; 0x01
    66b6:	69 2f       	mov	r22, r25
    66b8:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteChar(3);
    66bc:	83 e0       	ldi	r24, 0x03	; 3
    66be:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
	LCD_GoTO(line,cell);
    66c2:	89 81       	ldd	r24, Y+1	; 0x01
    66c4:	6a 81       	ldd	r22, Y+2	; 0x02
    66c6:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteChar(4);
    66ca:	84 e0       	ldi	r24, 0x04	; 4
    66cc:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
}
    66d0:	0f 90       	pop	r0
    66d2:	0f 90       	pop	r0
    66d4:	cf 91       	pop	r28
    66d6:	df 91       	pop	r29
    66d8:	08 95       	ret

000066da <LCD_Man>:
void LCD_Man(void)
{
    66da:	df 93       	push	r29
    66dc:	cf 93       	push	r28
    66de:	cd b7       	in	r28, 0x3d	; 61
    66e0:	de b7       	in	r29, 0x3e	; 62
    66e2:	ab 97       	sbiw	r28, 0x2b	; 43
    66e4:	0f b6       	in	r0, 0x3f	; 63
    66e6:	f8 94       	cli
    66e8:	de bf       	out	0x3e, r29	; 62
    66ea:	0f be       	out	0x3f, r0	; 63
    66ec:	cd bf       	out	0x3d, r28	; 61
	LCD_GoTO(0,0);
    66ee:	80 e0       	ldi	r24, 0x00	; 0
    66f0:	60 e0       	ldi	r22, 0x00	; 0
    66f2:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteChar(0);
    66f6:	80 e0       	ldi	r24, 0x00	; 0
    66f8:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
	LCD_GoTO(0,15);
    66fc:	80 e0       	ldi	r24, 0x00	; 0
    66fe:	6f e0       	ldi	r22, 0x0F	; 15
    6700:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteChar(0);
    6704:	80 e0       	ldi	r24, 0x00	; 0
    6706:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
    670a:	80 e0       	ldi	r24, 0x00	; 0
    670c:	90 e0       	ldi	r25, 0x00	; 0
    670e:	a6 e9       	ldi	r26, 0x96	; 150
    6710:	b3 e4       	ldi	r27, 0x43	; 67
    6712:	8f a3       	std	Y+39, r24	; 0x27
    6714:	98 a7       	std	Y+40, r25	; 0x28
    6716:	a9 a7       	std	Y+41, r26	; 0x29
    6718:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    671a:	6f a1       	ldd	r22, Y+39	; 0x27
    671c:	78 a5       	ldd	r23, Y+40	; 0x28
    671e:	89 a5       	ldd	r24, Y+41	; 0x29
    6720:	9a a5       	ldd	r25, Y+42	; 0x2a
    6722:	20 e0       	ldi	r18, 0x00	; 0
    6724:	30 e0       	ldi	r19, 0x00	; 0
    6726:	4a ef       	ldi	r20, 0xFA	; 250
    6728:	54 e4       	ldi	r21, 0x44	; 68
    672a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    672e:	dc 01       	movw	r26, r24
    6730:	cb 01       	movw	r24, r22
    6732:	8b a3       	std	Y+35, r24	; 0x23
    6734:	9c a3       	std	Y+36, r25	; 0x24
    6736:	ad a3       	std	Y+37, r26	; 0x25
    6738:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    673a:	6b a1       	ldd	r22, Y+35	; 0x23
    673c:	7c a1       	ldd	r23, Y+36	; 0x24
    673e:	8d a1       	ldd	r24, Y+37	; 0x25
    6740:	9e a1       	ldd	r25, Y+38	; 0x26
    6742:	20 e0       	ldi	r18, 0x00	; 0
    6744:	30 e0       	ldi	r19, 0x00	; 0
    6746:	40 e8       	ldi	r20, 0x80	; 128
    6748:	5f e3       	ldi	r21, 0x3F	; 63
    674a:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    674e:	88 23       	and	r24, r24
    6750:	2c f4       	brge	.+10     	; 0x675c <LCD_Man+0x82>
		__ticks = 1;
    6752:	81 e0       	ldi	r24, 0x01	; 1
    6754:	90 e0       	ldi	r25, 0x00	; 0
    6756:	9a a3       	std	Y+34, r25	; 0x22
    6758:	89 a3       	std	Y+33, r24	; 0x21
    675a:	3f c0       	rjmp	.+126    	; 0x67da <LCD_Man+0x100>
	else if (__tmp > 65535)
    675c:	6b a1       	ldd	r22, Y+35	; 0x23
    675e:	7c a1       	ldd	r23, Y+36	; 0x24
    6760:	8d a1       	ldd	r24, Y+37	; 0x25
    6762:	9e a1       	ldd	r25, Y+38	; 0x26
    6764:	20 e0       	ldi	r18, 0x00	; 0
    6766:	3f ef       	ldi	r19, 0xFF	; 255
    6768:	4f e7       	ldi	r20, 0x7F	; 127
    676a:	57 e4       	ldi	r21, 0x47	; 71
    676c:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    6770:	18 16       	cp	r1, r24
    6772:	4c f5       	brge	.+82     	; 0x67c6 <LCD_Man+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6774:	6f a1       	ldd	r22, Y+39	; 0x27
    6776:	78 a5       	ldd	r23, Y+40	; 0x28
    6778:	89 a5       	ldd	r24, Y+41	; 0x29
    677a:	9a a5       	ldd	r25, Y+42	; 0x2a
    677c:	20 e0       	ldi	r18, 0x00	; 0
    677e:	30 e0       	ldi	r19, 0x00	; 0
    6780:	40 e2       	ldi	r20, 0x20	; 32
    6782:	51 e4       	ldi	r21, 0x41	; 65
    6784:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    6788:	dc 01       	movw	r26, r24
    678a:	cb 01       	movw	r24, r22
    678c:	bc 01       	movw	r22, r24
    678e:	cd 01       	movw	r24, r26
    6790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6794:	dc 01       	movw	r26, r24
    6796:	cb 01       	movw	r24, r22
    6798:	9a a3       	std	Y+34, r25	; 0x22
    679a:	89 a3       	std	Y+33, r24	; 0x21
    679c:	0f c0       	rjmp	.+30     	; 0x67bc <LCD_Man+0xe2>
    679e:	88 ec       	ldi	r24, 0xC8	; 200
    67a0:	90 e0       	ldi	r25, 0x00	; 0
    67a2:	98 a3       	std	Y+32, r25	; 0x20
    67a4:	8f 8f       	std	Y+31, r24	; 0x1f
    67a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    67a8:	98 a1       	ldd	r25, Y+32	; 0x20
    67aa:	01 97       	sbiw	r24, 0x01	; 1
    67ac:	f1 f7       	brne	.-4      	; 0x67aa <LCD_Man+0xd0>
    67ae:	98 a3       	std	Y+32, r25	; 0x20
    67b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67b2:	89 a1       	ldd	r24, Y+33	; 0x21
    67b4:	9a a1       	ldd	r25, Y+34	; 0x22
    67b6:	01 97       	sbiw	r24, 0x01	; 1
    67b8:	9a a3       	std	Y+34, r25	; 0x22
    67ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67bc:	89 a1       	ldd	r24, Y+33	; 0x21
    67be:	9a a1       	ldd	r25, Y+34	; 0x22
    67c0:	00 97       	sbiw	r24, 0x00	; 0
    67c2:	69 f7       	brne	.-38     	; 0x679e <LCD_Man+0xc4>
    67c4:	14 c0       	rjmp	.+40     	; 0x67ee <LCD_Man+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67c6:	6b a1       	ldd	r22, Y+35	; 0x23
    67c8:	7c a1       	ldd	r23, Y+36	; 0x24
    67ca:	8d a1       	ldd	r24, Y+37	; 0x25
    67cc:	9e a1       	ldd	r25, Y+38	; 0x26
    67ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67d2:	dc 01       	movw	r26, r24
    67d4:	cb 01       	movw	r24, r22
    67d6:	9a a3       	std	Y+34, r25	; 0x22
    67d8:	89 a3       	std	Y+33, r24	; 0x21
    67da:	89 a1       	ldd	r24, Y+33	; 0x21
    67dc:	9a a1       	ldd	r25, Y+34	; 0x22
    67de:	9e 8f       	std	Y+30, r25	; 0x1e
    67e0:	8d 8f       	std	Y+29, r24	; 0x1d
    67e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    67e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    67e6:	01 97       	sbiw	r24, 0x01	; 1
    67e8:	f1 f7       	brne	.-4      	; 0x67e6 <LCD_Man+0x10c>
    67ea:	9e 8f       	std	Y+30, r25	; 0x1e
    67ec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);
	
	for(u8 i=2;i<15;i++)
    67ee:	82 e0       	ldi	r24, 0x02	; 2
    67f0:	8b a7       	std	Y+43, r24	; 0x2b
    67f2:	83 c0       	rjmp	.+262    	; 0x68fa <LCD_Man+0x220>
	{
		LCD_GoTO(0,i);
    67f4:	80 e0       	ldi	r24, 0x00	; 0
    67f6:	6b a5       	ldd	r22, Y+43	; 0x2b
    67f8:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
		LCD_WriteChar('>');
    67fc:	8e e3       	ldi	r24, 0x3E	; 62
    67fe:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
    6802:	80 e0       	ldi	r24, 0x00	; 0
    6804:	90 e0       	ldi	r25, 0x00	; 0
    6806:	a6 e9       	ldi	r26, 0x96	; 150
    6808:	b3 e4       	ldi	r27, 0x43	; 67
    680a:	89 8f       	std	Y+25, r24	; 0x19
    680c:	9a 8f       	std	Y+26, r25	; 0x1a
    680e:	ab 8f       	std	Y+27, r26	; 0x1b
    6810:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6812:	69 8d       	ldd	r22, Y+25	; 0x19
    6814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    681a:	20 e0       	ldi	r18, 0x00	; 0
    681c:	30 e0       	ldi	r19, 0x00	; 0
    681e:	4a ef       	ldi	r20, 0xFA	; 250
    6820:	54 e4       	ldi	r21, 0x44	; 68
    6822:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    6826:	dc 01       	movw	r26, r24
    6828:	cb 01       	movw	r24, r22
    682a:	8d 8b       	std	Y+21, r24	; 0x15
    682c:	9e 8b       	std	Y+22, r25	; 0x16
    682e:	af 8b       	std	Y+23, r26	; 0x17
    6830:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6832:	6d 89       	ldd	r22, Y+21	; 0x15
    6834:	7e 89       	ldd	r23, Y+22	; 0x16
    6836:	8f 89       	ldd	r24, Y+23	; 0x17
    6838:	98 8d       	ldd	r25, Y+24	; 0x18
    683a:	20 e0       	ldi	r18, 0x00	; 0
    683c:	30 e0       	ldi	r19, 0x00	; 0
    683e:	40 e8       	ldi	r20, 0x80	; 128
    6840:	5f e3       	ldi	r21, 0x3F	; 63
    6842:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    6846:	88 23       	and	r24, r24
    6848:	2c f4       	brge	.+10     	; 0x6854 <LCD_Man+0x17a>
		__ticks = 1;
    684a:	81 e0       	ldi	r24, 0x01	; 1
    684c:	90 e0       	ldi	r25, 0x00	; 0
    684e:	9c 8b       	std	Y+20, r25	; 0x14
    6850:	8b 8b       	std	Y+19, r24	; 0x13
    6852:	3f c0       	rjmp	.+126    	; 0x68d2 <LCD_Man+0x1f8>
	else if (__tmp > 65535)
    6854:	6d 89       	ldd	r22, Y+21	; 0x15
    6856:	7e 89       	ldd	r23, Y+22	; 0x16
    6858:	8f 89       	ldd	r24, Y+23	; 0x17
    685a:	98 8d       	ldd	r25, Y+24	; 0x18
    685c:	20 e0       	ldi	r18, 0x00	; 0
    685e:	3f ef       	ldi	r19, 0xFF	; 255
    6860:	4f e7       	ldi	r20, 0x7F	; 127
    6862:	57 e4       	ldi	r21, 0x47	; 71
    6864:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    6868:	18 16       	cp	r1, r24
    686a:	4c f5       	brge	.+82     	; 0x68be <LCD_Man+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    686c:	69 8d       	ldd	r22, Y+25	; 0x19
    686e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6874:	20 e0       	ldi	r18, 0x00	; 0
    6876:	30 e0       	ldi	r19, 0x00	; 0
    6878:	40 e2       	ldi	r20, 0x20	; 32
    687a:	51 e4       	ldi	r21, 0x41	; 65
    687c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    6880:	dc 01       	movw	r26, r24
    6882:	cb 01       	movw	r24, r22
    6884:	bc 01       	movw	r22, r24
    6886:	cd 01       	movw	r24, r26
    6888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    688c:	dc 01       	movw	r26, r24
    688e:	cb 01       	movw	r24, r22
    6890:	9c 8b       	std	Y+20, r25	; 0x14
    6892:	8b 8b       	std	Y+19, r24	; 0x13
    6894:	0f c0       	rjmp	.+30     	; 0x68b4 <LCD_Man+0x1da>
    6896:	88 ec       	ldi	r24, 0xC8	; 200
    6898:	90 e0       	ldi	r25, 0x00	; 0
    689a:	9a 8b       	std	Y+18, r25	; 0x12
    689c:	89 8b       	std	Y+17, r24	; 0x11
    689e:	89 89       	ldd	r24, Y+17	; 0x11
    68a0:	9a 89       	ldd	r25, Y+18	; 0x12
    68a2:	01 97       	sbiw	r24, 0x01	; 1
    68a4:	f1 f7       	brne	.-4      	; 0x68a2 <LCD_Man+0x1c8>
    68a6:	9a 8b       	std	Y+18, r25	; 0x12
    68a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68aa:	8b 89       	ldd	r24, Y+19	; 0x13
    68ac:	9c 89       	ldd	r25, Y+20	; 0x14
    68ae:	01 97       	sbiw	r24, 0x01	; 1
    68b0:	9c 8b       	std	Y+20, r25	; 0x14
    68b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68b4:	8b 89       	ldd	r24, Y+19	; 0x13
    68b6:	9c 89       	ldd	r25, Y+20	; 0x14
    68b8:	00 97       	sbiw	r24, 0x00	; 0
    68ba:	69 f7       	brne	.-38     	; 0x6896 <LCD_Man+0x1bc>
    68bc:	14 c0       	rjmp	.+40     	; 0x68e6 <LCD_Man+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68be:	6d 89       	ldd	r22, Y+21	; 0x15
    68c0:	7e 89       	ldd	r23, Y+22	; 0x16
    68c2:	8f 89       	ldd	r24, Y+23	; 0x17
    68c4:	98 8d       	ldd	r25, Y+24	; 0x18
    68c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68ca:	dc 01       	movw	r26, r24
    68cc:	cb 01       	movw	r24, r22
    68ce:	9c 8b       	std	Y+20, r25	; 0x14
    68d0:	8b 8b       	std	Y+19, r24	; 0x13
    68d2:	8b 89       	ldd	r24, Y+19	; 0x13
    68d4:	9c 89       	ldd	r25, Y+20	; 0x14
    68d6:	98 8b       	std	Y+16, r25	; 0x10
    68d8:	8f 87       	std	Y+15, r24	; 0x0f
    68da:	8f 85       	ldd	r24, Y+15	; 0x0f
    68dc:	98 89       	ldd	r25, Y+16	; 0x10
    68de:	01 97       	sbiw	r24, 0x01	; 1
    68e0:	f1 f7       	brne	.-4      	; 0x68de <LCD_Man+0x204>
    68e2:	98 8b       	std	Y+16, r25	; 0x10
    68e4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		LCD_GoTO(0,i);
    68e6:	80 e0       	ldi	r24, 0x00	; 0
    68e8:	6b a5       	ldd	r22, Y+43	; 0x2b
    68ea:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
		LCD_WriteChar(' ');
    68ee:	80 e2       	ldi	r24, 0x20	; 32
    68f0:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
	LCD_WriteChar(0);
	LCD_GoTO(0,15);
	LCD_WriteChar(0);
	_delay_ms(300);
	
	for(u8 i=2;i<15;i++)
    68f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    68f6:	8f 5f       	subi	r24, 0xFF	; 255
    68f8:	8b a7       	std	Y+43, r24	; 0x2b
    68fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    68fc:	8f 30       	cpi	r24, 0x0F	; 15
    68fe:	08 f4       	brcc	.+2      	; 0x6902 <LCD_Man+0x228>
    6900:	79 cf       	rjmp	.-270    	; 0x67f4 <LCD_Man+0x11a>
		LCD_GoTO(0,i);
		LCD_WriteChar(' ');
		
		
	}
	LCD_GoTO(0,15);
    6902:	80 e0       	ldi	r24, 0x00	; 0
    6904:	6f e0       	ldi	r22, 0x0F	; 15
    6906:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteChar(1);
    690a:	81 e0       	ldi	r24, 0x01	; 1
    690c:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
    6910:	80 e0       	ldi	r24, 0x00	; 0
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	a6 e9       	ldi	r26, 0x96	; 150
    6916:	b3 e4       	ldi	r27, 0x43	; 67
    6918:	8b 87       	std	Y+11, r24	; 0x0b
    691a:	9c 87       	std	Y+12, r25	; 0x0c
    691c:	ad 87       	std	Y+13, r26	; 0x0d
    691e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6920:	6b 85       	ldd	r22, Y+11	; 0x0b
    6922:	7c 85       	ldd	r23, Y+12	; 0x0c
    6924:	8d 85       	ldd	r24, Y+13	; 0x0d
    6926:	9e 85       	ldd	r25, Y+14	; 0x0e
    6928:	20 e0       	ldi	r18, 0x00	; 0
    692a:	30 e0       	ldi	r19, 0x00	; 0
    692c:	4a ef       	ldi	r20, 0xFA	; 250
    692e:	54 e4       	ldi	r21, 0x44	; 68
    6930:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    6934:	dc 01       	movw	r26, r24
    6936:	cb 01       	movw	r24, r22
    6938:	8f 83       	std	Y+7, r24	; 0x07
    693a:	98 87       	std	Y+8, r25	; 0x08
    693c:	a9 87       	std	Y+9, r26	; 0x09
    693e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6940:	6f 81       	ldd	r22, Y+7	; 0x07
    6942:	78 85       	ldd	r23, Y+8	; 0x08
    6944:	89 85       	ldd	r24, Y+9	; 0x09
    6946:	9a 85       	ldd	r25, Y+10	; 0x0a
    6948:	20 e0       	ldi	r18, 0x00	; 0
    694a:	30 e0       	ldi	r19, 0x00	; 0
    694c:	40 e8       	ldi	r20, 0x80	; 128
    694e:	5f e3       	ldi	r21, 0x3F	; 63
    6950:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    6954:	88 23       	and	r24, r24
    6956:	2c f4       	brge	.+10     	; 0x6962 <LCD_Man+0x288>
		__ticks = 1;
    6958:	81 e0       	ldi	r24, 0x01	; 1
    695a:	90 e0       	ldi	r25, 0x00	; 0
    695c:	9e 83       	std	Y+6, r25	; 0x06
    695e:	8d 83       	std	Y+5, r24	; 0x05
    6960:	3f c0       	rjmp	.+126    	; 0x69e0 <LCD_Man+0x306>
	else if (__tmp > 65535)
    6962:	6f 81       	ldd	r22, Y+7	; 0x07
    6964:	78 85       	ldd	r23, Y+8	; 0x08
    6966:	89 85       	ldd	r24, Y+9	; 0x09
    6968:	9a 85       	ldd	r25, Y+10	; 0x0a
    696a:	20 e0       	ldi	r18, 0x00	; 0
    696c:	3f ef       	ldi	r19, 0xFF	; 255
    696e:	4f e7       	ldi	r20, 0x7F	; 127
    6970:	57 e4       	ldi	r21, 0x47	; 71
    6972:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    6976:	18 16       	cp	r1, r24
    6978:	4c f5       	brge	.+82     	; 0x69cc <LCD_Man+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    697a:	6b 85       	ldd	r22, Y+11	; 0x0b
    697c:	7c 85       	ldd	r23, Y+12	; 0x0c
    697e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6980:	9e 85       	ldd	r25, Y+14	; 0x0e
    6982:	20 e0       	ldi	r18, 0x00	; 0
    6984:	30 e0       	ldi	r19, 0x00	; 0
    6986:	40 e2       	ldi	r20, 0x20	; 32
    6988:	51 e4       	ldi	r21, 0x41	; 65
    698a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    698e:	dc 01       	movw	r26, r24
    6990:	cb 01       	movw	r24, r22
    6992:	bc 01       	movw	r22, r24
    6994:	cd 01       	movw	r24, r26
    6996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    699a:	dc 01       	movw	r26, r24
    699c:	cb 01       	movw	r24, r22
    699e:	9e 83       	std	Y+6, r25	; 0x06
    69a0:	8d 83       	std	Y+5, r24	; 0x05
    69a2:	0f c0       	rjmp	.+30     	; 0x69c2 <LCD_Man+0x2e8>
    69a4:	88 ec       	ldi	r24, 0xC8	; 200
    69a6:	90 e0       	ldi	r25, 0x00	; 0
    69a8:	9c 83       	std	Y+4, r25	; 0x04
    69aa:	8b 83       	std	Y+3, r24	; 0x03
    69ac:	8b 81       	ldd	r24, Y+3	; 0x03
    69ae:	9c 81       	ldd	r25, Y+4	; 0x04
    69b0:	01 97       	sbiw	r24, 0x01	; 1
    69b2:	f1 f7       	brne	.-4      	; 0x69b0 <LCD_Man+0x2d6>
    69b4:	9c 83       	std	Y+4, r25	; 0x04
    69b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69b8:	8d 81       	ldd	r24, Y+5	; 0x05
    69ba:	9e 81       	ldd	r25, Y+6	; 0x06
    69bc:	01 97       	sbiw	r24, 0x01	; 1
    69be:	9e 83       	std	Y+6, r25	; 0x06
    69c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69c2:	8d 81       	ldd	r24, Y+5	; 0x05
    69c4:	9e 81       	ldd	r25, Y+6	; 0x06
    69c6:	00 97       	sbiw	r24, 0x00	; 0
    69c8:	69 f7       	brne	.-38     	; 0x69a4 <LCD_Man+0x2ca>
    69ca:	14 c0       	rjmp	.+40     	; 0x69f4 <LCD_Man+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69cc:	6f 81       	ldd	r22, Y+7	; 0x07
    69ce:	78 85       	ldd	r23, Y+8	; 0x08
    69d0:	89 85       	ldd	r24, Y+9	; 0x09
    69d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    69d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69d8:	dc 01       	movw	r26, r24
    69da:	cb 01       	movw	r24, r22
    69dc:	9e 83       	std	Y+6, r25	; 0x06
    69de:	8d 83       	std	Y+5, r24	; 0x05
    69e0:	8d 81       	ldd	r24, Y+5	; 0x05
    69e2:	9e 81       	ldd	r25, Y+6	; 0x06
    69e4:	9a 83       	std	Y+2, r25	; 0x02
    69e6:	89 83       	std	Y+1, r24	; 0x01
    69e8:	89 81       	ldd	r24, Y+1	; 0x01
    69ea:	9a 81       	ldd	r25, Y+2	; 0x02
    69ec:	01 97       	sbiw	r24, 0x01	; 1
    69ee:	f1 f7       	brne	.-4      	; 0x69ec <LCD_Man+0x312>
    69f0:	9a 83       	std	Y+2, r25	; 0x02
    69f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LCD_Clear();
    69f4:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <LCD_Clear>
	LCD_GoTO(0,3);
    69f8:	80 e0       	ldi	r24, 0x00	; 0
    69fa:	63 e0       	ldi	r22, 0x03	; 3
    69fc:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteString("GAME OVER");
    6a00:	88 ee       	ldi	r24, 0xE8	; 232
    6a02:	90 e0       	ldi	r25, 0x00	; 0
    6a04:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <LCD_WriteString>
	
	
	
	
}
    6a08:	ab 96       	adiw	r28, 0x2b	; 43
    6a0a:	0f b6       	in	r0, 0x3f	; 63
    6a0c:	f8 94       	cli
    6a0e:	de bf       	out	0x3e, r29	; 62
    6a10:	0f be       	out	0x3f, r0	; 63
    6a12:	cd bf       	out	0x3d, r28	; 61
    6a14:	cf 91       	pop	r28
    6a16:	df 91       	pop	r29
    6a18:	08 95       	ret

00006a1a <MOTOR_Stop>:




void MOTOR_Stop(MOTOR_type m)
{
    6a1a:	df 93       	push	r29
    6a1c:	cf 93       	push	r28
    6a1e:	0f 92       	push	r0
    6a20:	cd b7       	in	r28, 0x3d	; 61
    6a22:	de b7       	in	r29, 0x3e	; 62
    6a24:	89 83       	std	Y+1, r24	; 0x01
	
	
	DIO_WritePin(MOTOR_PinsStatusArr[m][IN1],LOW);
    6a26:	89 81       	ldd	r24, Y+1	; 0x01
    6a28:	28 2f       	mov	r18, r24
    6a2a:	30 e0       	ldi	r19, 0x00	; 0
    6a2c:	c9 01       	movw	r24, r18
    6a2e:	88 0f       	add	r24, r24
    6a30:	99 1f       	adc	r25, r25
    6a32:	82 0f       	add	r24, r18
    6a34:	93 1f       	adc	r25, r19
    6a36:	fc 01       	movw	r30, r24
    6a38:	e6 5d       	subi	r30, 0xD6	; 214
    6a3a:	fd 4f       	sbci	r31, 0xFD	; 253
    6a3c:	80 81       	ld	r24, Z
    6a3e:	60 e0       	ldi	r22, 0x00	; 0
    6a40:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(MOTOR_PinsStatusArr[m][IN2],LOW);
    6a44:	89 81       	ldd	r24, Y+1	; 0x01
    6a46:	28 2f       	mov	r18, r24
    6a48:	30 e0       	ldi	r19, 0x00	; 0
    6a4a:	c9 01       	movw	r24, r18
    6a4c:	88 0f       	add	r24, r24
    6a4e:	99 1f       	adc	r25, r25
    6a50:	82 0f       	add	r24, r18
    6a52:	93 1f       	adc	r25, r19
    6a54:	fc 01       	movw	r30, r24
    6a56:	e5 5d       	subi	r30, 0xD5	; 213
    6a58:	fd 4f       	sbci	r31, 0xFD	; 253
    6a5a:	80 81       	ld	r24, Z
    6a5c:	60 e0       	ldi	r22, 0x00	; 0
    6a5e:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(MOTOR_PinsStatusArr[m][EN],LOW);
    6a62:	89 81       	ldd	r24, Y+1	; 0x01
    6a64:	28 2f       	mov	r18, r24
    6a66:	30 e0       	ldi	r19, 0x00	; 0
    6a68:	c9 01       	movw	r24, r18
    6a6a:	88 0f       	add	r24, r24
    6a6c:	99 1f       	adc	r25, r25
    6a6e:	82 0f       	add	r24, r18
    6a70:	93 1f       	adc	r25, r19
    6a72:	fc 01       	movw	r30, r24
    6a74:	e4 5d       	subi	r30, 0xD4	; 212
    6a76:	fd 4f       	sbci	r31, 0xFD	; 253
    6a78:	80 81       	ld	r24, Z
    6a7a:	60 e0       	ldi	r22, 0x00	; 0
    6a7c:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	
}
    6a80:	0f 90       	pop	r0
    6a82:	cf 91       	pop	r28
    6a84:	df 91       	pop	r29
    6a86:	08 95       	ret

00006a88 <MOTOR_Cw>:
	
}
*/

void MOTOR_Cw(MOTOR_type m)
{
    6a88:	df 93       	push	r29
    6a8a:	cf 93       	push	r28
    6a8c:	0f 92       	push	r0
    6a8e:	cd b7       	in	r28, 0x3d	; 61
    6a90:	de b7       	in	r29, 0x3e	; 62
    6a92:	89 83       	std	Y+1, r24	; 0x01
	
	
	
	DIO_WritePin(MOTOR_PinsStatusArr[m][IN1],HIGH);
    6a94:	89 81       	ldd	r24, Y+1	; 0x01
    6a96:	28 2f       	mov	r18, r24
    6a98:	30 e0       	ldi	r19, 0x00	; 0
    6a9a:	c9 01       	movw	r24, r18
    6a9c:	88 0f       	add	r24, r24
    6a9e:	99 1f       	adc	r25, r25
    6aa0:	82 0f       	add	r24, r18
    6aa2:	93 1f       	adc	r25, r19
    6aa4:	fc 01       	movw	r30, r24
    6aa6:	e6 5d       	subi	r30, 0xD6	; 214
    6aa8:	fd 4f       	sbci	r31, 0xFD	; 253
    6aaa:	80 81       	ld	r24, Z
    6aac:	61 e0       	ldi	r22, 0x01	; 1
    6aae:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(MOTOR_PinsStatusArr[m][IN2],LOW);
    6ab2:	89 81       	ldd	r24, Y+1	; 0x01
    6ab4:	28 2f       	mov	r18, r24
    6ab6:	30 e0       	ldi	r19, 0x00	; 0
    6ab8:	c9 01       	movw	r24, r18
    6aba:	88 0f       	add	r24, r24
    6abc:	99 1f       	adc	r25, r25
    6abe:	82 0f       	add	r24, r18
    6ac0:	93 1f       	adc	r25, r19
    6ac2:	fc 01       	movw	r30, r24
    6ac4:	e5 5d       	subi	r30, 0xD5	; 213
    6ac6:	fd 4f       	sbci	r31, 0xFD	; 253
    6ac8:	80 81       	ld	r24, Z
    6aca:	60 e0       	ldi	r22, 0x00	; 0
    6acc:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(MOTOR_PinsStatusArr[m][EN],HIGH);
    6ad0:	89 81       	ldd	r24, Y+1	; 0x01
    6ad2:	28 2f       	mov	r18, r24
    6ad4:	30 e0       	ldi	r19, 0x00	; 0
    6ad6:	c9 01       	movw	r24, r18
    6ad8:	88 0f       	add	r24, r24
    6ada:	99 1f       	adc	r25, r25
    6adc:	82 0f       	add	r24, r18
    6ade:	93 1f       	adc	r25, r19
    6ae0:	fc 01       	movw	r30, r24
    6ae2:	e4 5d       	subi	r30, 0xD4	; 212
    6ae4:	fd 4f       	sbci	r31, 0xFD	; 253
    6ae6:	80 81       	ld	r24, Z
    6ae8:	61 e0       	ldi	r22, 0x01	; 1
    6aea:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>

	
}
    6aee:	0f 90       	pop	r0
    6af0:	cf 91       	pop	r28
    6af2:	df 91       	pop	r29
    6af4:	08 95       	ret

00006af6 <MOTOR_Ccw>:
	}
}
*/

void MOTOR_Ccw(MOTOR_type m)
{
    6af6:	df 93       	push	r29
    6af8:	cf 93       	push	r28
    6afa:	0f 92       	push	r0
    6afc:	cd b7       	in	r28, 0x3d	; 61
    6afe:	de b7       	in	r29, 0x3e	; 62
    6b00:	89 83       	std	Y+1, r24	; 0x01
	   
	DIO_WritePin(MOTOR_PinsStatusArr[m][IN1],LOW);
    6b02:	89 81       	ldd	r24, Y+1	; 0x01
    6b04:	28 2f       	mov	r18, r24
    6b06:	30 e0       	ldi	r19, 0x00	; 0
    6b08:	c9 01       	movw	r24, r18
    6b0a:	88 0f       	add	r24, r24
    6b0c:	99 1f       	adc	r25, r25
    6b0e:	82 0f       	add	r24, r18
    6b10:	93 1f       	adc	r25, r19
    6b12:	fc 01       	movw	r30, r24
    6b14:	e6 5d       	subi	r30, 0xD6	; 214
    6b16:	fd 4f       	sbci	r31, 0xFD	; 253
    6b18:	80 81       	ld	r24, Z
    6b1a:	60 e0       	ldi	r22, 0x00	; 0
    6b1c:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(MOTOR_PinsStatusArr[m][IN2],HIGH);
    6b20:	89 81       	ldd	r24, Y+1	; 0x01
    6b22:	28 2f       	mov	r18, r24
    6b24:	30 e0       	ldi	r19, 0x00	; 0
    6b26:	c9 01       	movw	r24, r18
    6b28:	88 0f       	add	r24, r24
    6b2a:	99 1f       	adc	r25, r25
    6b2c:	82 0f       	add	r24, r18
    6b2e:	93 1f       	adc	r25, r19
    6b30:	fc 01       	movw	r30, r24
    6b32:	e5 5d       	subi	r30, 0xD5	; 213
    6b34:	fd 4f       	sbci	r31, 0xFD	; 253
    6b36:	80 81       	ld	r24, Z
    6b38:	61 e0       	ldi	r22, 0x01	; 1
    6b3a:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	DIO_WritePin(MOTOR_PinsStatusArr[m][EN],HIGH);
    6b3e:	89 81       	ldd	r24, Y+1	; 0x01
    6b40:	28 2f       	mov	r18, r24
    6b42:	30 e0       	ldi	r19, 0x00	; 0
    6b44:	c9 01       	movw	r24, r18
    6b46:	88 0f       	add	r24, r24
    6b48:	99 1f       	adc	r25, r25
    6b4a:	82 0f       	add	r24, r18
    6b4c:	93 1f       	adc	r25, r19
    6b4e:	fc 01       	movw	r30, r24
    6b50:	e4 5d       	subi	r30, 0xD4	; 212
    6b52:	fd 4f       	sbci	r31, 0xFD	; 253
    6b54:	80 81       	ld	r24, Z
    6b56:	61 e0       	ldi	r22, 0x01	; 1
    6b58:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
	
}
    6b5c:	0f 90       	pop	r0
    6b5e:	cf 91       	pop	r28
    6b60:	df 91       	pop	r29
    6b62:	08 95       	ret

00006b64 <MOTOR_Init>:
	}
}
*/

void MOTOR_Init(void)
{
    6b64:	df 93       	push	r29
    6b66:	cf 93       	push	r28
    6b68:	cd b7       	in	r28, 0x3d	; 61
    6b6a:	de b7       	in	r29, 0x3e	; 62
	MOTOR_Stop(M1);
    6b6c:	80 e0       	ldi	r24, 0x00	; 0
    6b6e:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <MOTOR_Stop>
// 	MOTOR_Stop(M2);
// 	MOTOR_Stop(M3);
// 	MOTOR_Stop(M4);
	//_delay_ms(5000);
	
}
    6b72:	cf 91       	pop	r28
    6b74:	df 91       	pop	r29
    6b76:	08 95       	ret

00006b78 <Pot_Get_Synch>:




u16 Pot_Get_Synch(void)
{
    6b78:	df 93       	push	r29
    6b7a:	cf 93       	push	r28
    6b7c:	00 d0       	rcall	.+0      	; 0x6b7e <Pot_Get_Synch+0x6>
    6b7e:	cd b7       	in	r28, 0x3d	; 61
    6b80:	de b7       	in	r29, 0x3e	; 62
	u16 pot=0;
    6b82:	1a 82       	std	Y+2, r1	; 0x02
    6b84:	19 82       	std	Y+1, r1	; 0x01

	pot=(((u32)ADC_Read(POT_CH)*100)+512)/1024;//vref=5v  ->c*10
    6b86:	80 e0       	ldi	r24, 0x00	; 0
    6b88:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <ADC_Read>
    6b8c:	cc 01       	movw	r24, r24
    6b8e:	a0 e0       	ldi	r26, 0x00	; 0
    6b90:	b0 e0       	ldi	r27, 0x00	; 0
    6b92:	24 e6       	ldi	r18, 0x64	; 100
    6b94:	30 e0       	ldi	r19, 0x00	; 0
    6b96:	40 e0       	ldi	r20, 0x00	; 0
    6b98:	50 e0       	ldi	r21, 0x00	; 0
    6b9a:	bc 01       	movw	r22, r24
    6b9c:	cd 01       	movw	r24, r26
    6b9e:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    6ba2:	dc 01       	movw	r26, r24
    6ba4:	cb 01       	movw	r24, r22
    6ba6:	80 50       	subi	r24, 0x00	; 0
    6ba8:	9e 4f       	sbci	r25, 0xFE	; 254
    6baa:	af 4f       	sbci	r26, 0xFF	; 255
    6bac:	bf 4f       	sbci	r27, 0xFF	; 255
    6bae:	07 2e       	mov	r0, r23
    6bb0:	7a e0       	ldi	r23, 0x0A	; 10
    6bb2:	b6 95       	lsr	r27
    6bb4:	a7 95       	ror	r26
    6bb6:	97 95       	ror	r25
    6bb8:	87 95       	ror	r24
    6bba:	7a 95       	dec	r23
    6bbc:	d1 f7       	brne	.-12     	; 0x6bb2 <Pot_Get_Synch+0x3a>
    6bbe:	70 2d       	mov	r23, r0
    6bc0:	9a 83       	std	Y+2, r25	; 0x02
    6bc2:	89 83       	std	Y+1, r24	; 0x01

	return pot;
    6bc4:	89 81       	ldd	r24, Y+1	; 0x01
    6bc6:	9a 81       	ldd	r25, Y+2	; 0x02

}
    6bc8:	0f 90       	pop	r0
    6bca:	0f 90       	pop	r0
    6bcc:	cf 91       	pop	r28
    6bce:	df 91       	pop	r29
    6bd0:	08 95       	ret

00006bd2 <String_Len>:
#include "Utils.h"
#include "String_Serive.h"
#include "LCD_Inerface.h"

u8 String_Len(u8*str)
{
    6bd2:	df 93       	push	r29
    6bd4:	cf 93       	push	r28
    6bd6:	00 d0       	rcall	.+0      	; 0x6bd8 <String_Len+0x6>
    6bd8:	0f 92       	push	r0
    6bda:	cd b7       	in	r28, 0x3d	; 61
    6bdc:	de b7       	in	r29, 0x3e	; 62
    6bde:	9b 83       	std	Y+3, r25	; 0x03
    6be0:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    6be2:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;str[i];i++);
    6be4:	19 82       	std	Y+1, r1	; 0x01
    6be6:	03 c0       	rjmp	.+6      	; 0x6bee <String_Len+0x1c>
    6be8:	89 81       	ldd	r24, Y+1	; 0x01
    6bea:	8f 5f       	subi	r24, 0xFF	; 255
    6bec:	89 83       	std	Y+1, r24	; 0x01
    6bee:	89 81       	ldd	r24, Y+1	; 0x01
    6bf0:	28 2f       	mov	r18, r24
    6bf2:	30 e0       	ldi	r19, 0x00	; 0
    6bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    6bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    6bf8:	fc 01       	movw	r30, r24
    6bfa:	e2 0f       	add	r30, r18
    6bfc:	f3 1f       	adc	r31, r19
    6bfe:	80 81       	ld	r24, Z
    6c00:	88 23       	and	r24, r24
    6c02:	91 f7       	brne	.-28     	; 0x6be8 <String_Len+0x16>
	return i;
    6c04:	89 81       	ldd	r24, Y+1	; 0x01
}
    6c06:	0f 90       	pop	r0
    6c08:	0f 90       	pop	r0
    6c0a:	0f 90       	pop	r0
    6c0c:	cf 91       	pop	r28
    6c0e:	df 91       	pop	r29
    6c10:	08 95       	ret

00006c12 <String_Reverse>:
void String_Reverse(u8*str)
{
    6c12:	df 93       	push	r29
    6c14:	cf 93       	push	r28
    6c16:	00 d0       	rcall	.+0      	; 0x6c18 <String_Reverse+0x6>
    6c18:	00 d0       	rcall	.+0      	; 0x6c1a <String_Reverse+0x8>
    6c1a:	00 d0       	rcall	.+0      	; 0x6c1c <String_Reverse+0xa>
    6c1c:	cd b7       	in	r28, 0x3d	; 61
    6c1e:	de b7       	in	r29, 0x3e	; 62
    6c20:	9e 83       	std	Y+6, r25	; 0x06
    6c22:	8d 83       	std	Y+5, r24	; 0x05
	u8 i,j,temp;
	u8 l=String_Len(str);
    6c24:	8d 81       	ldd	r24, Y+5	; 0x05
    6c26:	9e 81       	ldd	r25, Y+6	; 0x06
    6c28:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <String_Len>
    6c2c:	89 83       	std	Y+1, r24	; 0x01
	for(i=0,j=l-1;i<=j;i++,j--)
    6c2e:	1c 82       	std	Y+4, r1	; 0x04
    6c30:	89 81       	ldd	r24, Y+1	; 0x01
    6c32:	81 50       	subi	r24, 0x01	; 1
    6c34:	8b 83       	std	Y+3, r24	; 0x03
    6c36:	2c c0       	rjmp	.+88     	; 0x6c90 <String_Reverse+0x7e>
	{
		temp=str[i];
    6c38:	8c 81       	ldd	r24, Y+4	; 0x04
    6c3a:	28 2f       	mov	r18, r24
    6c3c:	30 e0       	ldi	r19, 0x00	; 0
    6c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    6c40:	9e 81       	ldd	r25, Y+6	; 0x06
    6c42:	fc 01       	movw	r30, r24
    6c44:	e2 0f       	add	r30, r18
    6c46:	f3 1f       	adc	r31, r19
    6c48:	80 81       	ld	r24, Z
    6c4a:	8a 83       	std	Y+2, r24	; 0x02
		str[i]=str[j];
    6c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    6c4e:	28 2f       	mov	r18, r24
    6c50:	30 e0       	ldi	r19, 0x00	; 0
    6c52:	8d 81       	ldd	r24, Y+5	; 0x05
    6c54:	9e 81       	ldd	r25, Y+6	; 0x06
    6c56:	dc 01       	movw	r26, r24
    6c58:	a2 0f       	add	r26, r18
    6c5a:	b3 1f       	adc	r27, r19
    6c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    6c5e:	28 2f       	mov	r18, r24
    6c60:	30 e0       	ldi	r19, 0x00	; 0
    6c62:	8d 81       	ldd	r24, Y+5	; 0x05
    6c64:	9e 81       	ldd	r25, Y+6	; 0x06
    6c66:	fc 01       	movw	r30, r24
    6c68:	e2 0f       	add	r30, r18
    6c6a:	f3 1f       	adc	r31, r19
    6c6c:	80 81       	ld	r24, Z
    6c6e:	8c 93       	st	X, r24
		str[j]=temp;
    6c70:	8b 81       	ldd	r24, Y+3	; 0x03
    6c72:	28 2f       	mov	r18, r24
    6c74:	30 e0       	ldi	r19, 0x00	; 0
    6c76:	8d 81       	ldd	r24, Y+5	; 0x05
    6c78:	9e 81       	ldd	r25, Y+6	; 0x06
    6c7a:	fc 01       	movw	r30, r24
    6c7c:	e2 0f       	add	r30, r18
    6c7e:	f3 1f       	adc	r31, r19
    6c80:	8a 81       	ldd	r24, Y+2	; 0x02
    6c82:	80 83       	st	Z, r24
}
void String_Reverse(u8*str)
{
	u8 i,j,temp;
	u8 l=String_Len(str);
	for(i=0,j=l-1;i<=j;i++,j--)
    6c84:	8c 81       	ldd	r24, Y+4	; 0x04
    6c86:	8f 5f       	subi	r24, 0xFF	; 255
    6c88:	8c 83       	std	Y+4, r24	; 0x04
    6c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    6c8c:	81 50       	subi	r24, 0x01	; 1
    6c8e:	8b 83       	std	Y+3, r24	; 0x03
    6c90:	9c 81       	ldd	r25, Y+4	; 0x04
    6c92:	8b 81       	ldd	r24, Y+3	; 0x03
    6c94:	89 17       	cp	r24, r25
    6c96:	80 f6       	brcc	.-96     	; 0x6c38 <String_Reverse+0x26>
		temp=str[i];
		str[i]=str[j];
		str[j]=temp;
	}
	
}
    6c98:	26 96       	adiw	r28, 0x06	; 6
    6c9a:	0f b6       	in	r0, 0x3f	; 63
    6c9c:	f8 94       	cli
    6c9e:	de bf       	out	0x3e, r29	; 62
    6ca0:	0f be       	out	0x3f, r0	; 63
    6ca2:	cd bf       	out	0x3d, r28	; 61
    6ca4:	cf 91       	pop	r28
    6ca6:	df 91       	pop	r29
    6ca8:	08 95       	ret

00006caa <String_Cpy>:

void String_Cpy(u8*str1,u8*str2)
{
    6caa:	df 93       	push	r29
    6cac:	cf 93       	push	r28
    6cae:	00 d0       	rcall	.+0      	; 0x6cb0 <String_Cpy+0x6>
    6cb0:	00 d0       	rcall	.+0      	; 0x6cb2 <String_Cpy+0x8>
    6cb2:	0f 92       	push	r0
    6cb4:	cd b7       	in	r28, 0x3d	; 61
    6cb6:	de b7       	in	r29, 0x3e	; 62
    6cb8:	9b 83       	std	Y+3, r25	; 0x03
    6cba:	8a 83       	std	Y+2, r24	; 0x02
    6cbc:	7d 83       	std	Y+5, r23	; 0x05
    6cbe:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	for(i=0;str1[i];i++)
    6cc0:	19 82       	std	Y+1, r1	; 0x01
    6cc2:	15 c0       	rjmp	.+42     	; 0x6cee <String_Cpy+0x44>
	{
		str2[i]=str1[i];
    6cc4:	89 81       	ldd	r24, Y+1	; 0x01
    6cc6:	28 2f       	mov	r18, r24
    6cc8:	30 e0       	ldi	r19, 0x00	; 0
    6cca:	8c 81       	ldd	r24, Y+4	; 0x04
    6ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    6cce:	dc 01       	movw	r26, r24
    6cd0:	a2 0f       	add	r26, r18
    6cd2:	b3 1f       	adc	r27, r19
    6cd4:	89 81       	ldd	r24, Y+1	; 0x01
    6cd6:	28 2f       	mov	r18, r24
    6cd8:	30 e0       	ldi	r19, 0x00	; 0
    6cda:	8a 81       	ldd	r24, Y+2	; 0x02
    6cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    6cde:	fc 01       	movw	r30, r24
    6ce0:	e2 0f       	add	r30, r18
    6ce2:	f3 1f       	adc	r31, r19
    6ce4:	80 81       	ld	r24, Z
    6ce6:	8c 93       	st	X, r24
}

void String_Cpy(u8*str1,u8*str2)
{
	u8 i;
	for(i=0;str1[i];i++)
    6ce8:	89 81       	ldd	r24, Y+1	; 0x01
    6cea:	8f 5f       	subi	r24, 0xFF	; 255
    6cec:	89 83       	std	Y+1, r24	; 0x01
    6cee:	89 81       	ldd	r24, Y+1	; 0x01
    6cf0:	28 2f       	mov	r18, r24
    6cf2:	30 e0       	ldi	r19, 0x00	; 0
    6cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    6cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    6cf8:	fc 01       	movw	r30, r24
    6cfa:	e2 0f       	add	r30, r18
    6cfc:	f3 1f       	adc	r31, r19
    6cfe:	80 81       	ld	r24, Z
    6d00:	88 23       	and	r24, r24
    6d02:	01 f7       	brne	.-64     	; 0x6cc4 <String_Cpy+0x1a>
	{
		str2[i]=str1[i];
		
	}
	str2[i]=0;
    6d04:	89 81       	ldd	r24, Y+1	; 0x01
    6d06:	28 2f       	mov	r18, r24
    6d08:	30 e0       	ldi	r19, 0x00	; 0
    6d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    6d0c:	9d 81       	ldd	r25, Y+5	; 0x05
    6d0e:	fc 01       	movw	r30, r24
    6d10:	e2 0f       	add	r30, r18
    6d12:	f3 1f       	adc	r31, r19
    6d14:	10 82       	st	Z, r1
	
}
    6d16:	0f 90       	pop	r0
    6d18:	0f 90       	pop	r0
    6d1a:	0f 90       	pop	r0
    6d1c:	0f 90       	pop	r0
    6d1e:	0f 90       	pop	r0
    6d20:	cf 91       	pop	r28
    6d22:	df 91       	pop	r29
    6d24:	08 95       	ret

00006d26 <String_Cmpr>:

String_Cmpr_type String_Cmpr(u8*str1,u8*str2)
{
    6d26:	df 93       	push	r29
    6d28:	cf 93       	push	r28
    6d2a:	cd b7       	in	r28, 0x3d	; 61
    6d2c:	de b7       	in	r29, 0x3e	; 62
    6d2e:	2b 97       	sbiw	r28, 0x0b	; 11
    6d30:	0f b6       	in	r0, 0x3f	; 63
    6d32:	f8 94       	cli
    6d34:	de bf       	out	0x3e, r29	; 62
    6d36:	0f be       	out	0x3f, r0	; 63
    6d38:	cd bf       	out	0x3d, r28	; 61
    6d3a:	99 87       	std	Y+9, r25	; 0x09
    6d3c:	88 87       	std	Y+8, r24	; 0x08
    6d3e:	7b 87       	std	Y+11, r23	; 0x0b
    6d40:	6a 87       	std	Y+10, r22	; 0x0a
	u8 i,j;
	u8 c1,c2;
	u8 l1=String_Len(str1);
    6d42:	88 85       	ldd	r24, Y+8	; 0x08
    6d44:	99 85       	ldd	r25, Y+9	; 0x09
    6d46:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <String_Len>
    6d4a:	8b 83       	std	Y+3, r24	; 0x03
	u8 l2=String_Len(str2);
    6d4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    6d4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6d50:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <String_Len>
    6d54:	8a 83       	std	Y+2, r24	; 0x02
	String_Cmpr_type flag=STRING_SAME;
    6d56:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;str1[i] || str2[i] ;i++)
    6d58:	1f 82       	std	Y+7, r1	; 0x07
    6d5a:	37 c0       	rjmp	.+110    	; 0x6dca <String_Cmpr+0xa4>
	{
		c1=str1[i];
    6d5c:	8f 81       	ldd	r24, Y+7	; 0x07
    6d5e:	28 2f       	mov	r18, r24
    6d60:	30 e0       	ldi	r19, 0x00	; 0
    6d62:	88 85       	ldd	r24, Y+8	; 0x08
    6d64:	99 85       	ldd	r25, Y+9	; 0x09
    6d66:	fc 01       	movw	r30, r24
    6d68:	e2 0f       	add	r30, r18
    6d6a:	f3 1f       	adc	r31, r19
    6d6c:	80 81       	ld	r24, Z
    6d6e:	8d 83       	std	Y+5, r24	; 0x05
		c2=str2[i];
    6d70:	8f 81       	ldd	r24, Y+7	; 0x07
    6d72:	28 2f       	mov	r18, r24
    6d74:	30 e0       	ldi	r19, 0x00	; 0
    6d76:	8a 85       	ldd	r24, Y+10	; 0x0a
    6d78:	9b 85       	ldd	r25, Y+11	; 0x0b
    6d7a:	fc 01       	movw	r30, r24
    6d7c:	e2 0f       	add	r30, r18
    6d7e:	f3 1f       	adc	r31, r19
    6d80:	80 81       	ld	r24, Z
    6d82:	8c 83       	std	Y+4, r24	; 0x04
		if(c1>='A'&&c1<='Z')
    6d84:	8d 81       	ldd	r24, Y+5	; 0x05
    6d86:	81 34       	cpi	r24, 0x41	; 65
    6d88:	30 f0       	brcs	.+12     	; 0x6d96 <String_Cmpr+0x70>
    6d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    6d8c:	8b 35       	cpi	r24, 0x5B	; 91
    6d8e:	18 f4       	brcc	.+6      	; 0x6d96 <String_Cmpr+0x70>
		{
			c1=c1-'A'+'a';
    6d90:	8d 81       	ldd	r24, Y+5	; 0x05
    6d92:	80 5e       	subi	r24, 0xE0	; 224
    6d94:	8d 83       	std	Y+5, r24	; 0x05
		}
		if(c2>='A'&&c2<='Z')
    6d96:	8c 81       	ldd	r24, Y+4	; 0x04
    6d98:	81 34       	cpi	r24, 0x41	; 65
    6d9a:	30 f0       	brcs	.+12     	; 0x6da8 <String_Cmpr+0x82>
    6d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    6d9e:	8b 35       	cpi	r24, 0x5B	; 91
    6da0:	18 f4       	brcc	.+6      	; 0x6da8 <String_Cmpr+0x82>
		{
			c2=c2-'A'+'a';
    6da2:	8c 81       	ldd	r24, Y+4	; 0x04
    6da4:	80 5e       	subi	r24, 0xE0	; 224
    6da6:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		if(c1<c2)
    6da8:	9d 81       	ldd	r25, Y+5	; 0x05
    6daa:	8c 81       	ldd	r24, Y+4	; 0x04
    6dac:	98 17       	cp	r25, r24
    6dae:	18 f4       	brcc	.+6      	; 0x6db6 <String_Cmpr+0x90>
		{
			flag=STRING1_LESS;
    6db0:	81 e0       	ldi	r24, 0x01	; 1
    6db2:	89 83       	std	Y+1, r24	; 0x01
    6db4:	22 c0       	rjmp	.+68     	; 0x6dfa <String_Cmpr+0xd4>
			break;
			
		}
		else if(c1>c2)
    6db6:	9d 81       	ldd	r25, Y+5	; 0x05
    6db8:	8c 81       	ldd	r24, Y+4	; 0x04
    6dba:	89 17       	cp	r24, r25
    6dbc:	18 f4       	brcc	.+6      	; 0x6dc4 <String_Cmpr+0x9e>
		{
			flag=STRING1_BIGGER;
    6dbe:	82 e0       	ldi	r24, 0x02	; 2
    6dc0:	89 83       	std	Y+1, r24	; 0x01
    6dc2:	1b c0       	rjmp	.+54     	; 0x6dfa <String_Cmpr+0xd4>
	u8 i,j;
	u8 c1,c2;
	u8 l1=String_Len(str1);
	u8 l2=String_Len(str2);
	String_Cmpr_type flag=STRING_SAME;
	for(i=0;str1[i] || str2[i] ;i++)
    6dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    6dc6:	8f 5f       	subi	r24, 0xFF	; 255
    6dc8:	8f 83       	std	Y+7, r24	; 0x07
    6dca:	8f 81       	ldd	r24, Y+7	; 0x07
    6dcc:	28 2f       	mov	r18, r24
    6dce:	30 e0       	ldi	r19, 0x00	; 0
    6dd0:	88 85       	ldd	r24, Y+8	; 0x08
    6dd2:	99 85       	ldd	r25, Y+9	; 0x09
    6dd4:	fc 01       	movw	r30, r24
    6dd6:	e2 0f       	add	r30, r18
    6dd8:	f3 1f       	adc	r31, r19
    6dda:	80 81       	ld	r24, Z
    6ddc:	88 23       	and	r24, r24
    6dde:	09 f0       	breq	.+2      	; 0x6de2 <String_Cmpr+0xbc>
    6de0:	bd cf       	rjmp	.-134    	; 0x6d5c <String_Cmpr+0x36>
    6de2:	8f 81       	ldd	r24, Y+7	; 0x07
    6de4:	28 2f       	mov	r18, r24
    6de6:	30 e0       	ldi	r19, 0x00	; 0
    6de8:	8a 85       	ldd	r24, Y+10	; 0x0a
    6dea:	9b 85       	ldd	r25, Y+11	; 0x0b
    6dec:	fc 01       	movw	r30, r24
    6dee:	e2 0f       	add	r30, r18
    6df0:	f3 1f       	adc	r31, r19
    6df2:	80 81       	ld	r24, Z
    6df4:	88 23       	and	r24, r24
    6df6:	09 f0       	breq	.+2      	; 0x6dfa <String_Cmpr+0xd4>
    6df8:	b1 cf       	rjmp	.-158    	; 0x6d5c <String_Cmpr+0x36>
			break;
		}
		
		
	}
	return flag;
    6dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    6dfc:	2b 96       	adiw	r28, 0x0b	; 11
    6dfe:	0f b6       	in	r0, 0x3f	; 63
    6e00:	f8 94       	cli
    6e02:	de bf       	out	0x3e, r29	; 62
    6e04:	0f be       	out	0x3f, r0	; 63
    6e06:	cd bf       	out	0x3d, r28	; 61
    6e08:	cf 91       	pop	r28
    6e0a:	df 91       	pop	r29
    6e0c:	08 95       	ret

00006e0e <String_To_Decimal>:
u32 String_To_Decimal(u8*str)
{
    6e0e:	df 93       	push	r29
    6e10:	cf 93       	push	r28
    6e12:	cd b7       	in	r28, 0x3d	; 61
    6e14:	de b7       	in	r29, 0x3e	; 62
    6e16:	27 97       	sbiw	r28, 0x07	; 7
    6e18:	0f b6       	in	r0, 0x3f	; 63
    6e1a:	f8 94       	cli
    6e1c:	de bf       	out	0x3e, r29	; 62
    6e1e:	0f be       	out	0x3f, r0	; 63
    6e20:	cd bf       	out	0x3d, r28	; 61
    6e22:	9f 83       	std	Y+7, r25	; 0x07
    6e24:	8e 83       	std	Y+6, r24	; 0x06
	u32 res=0;
    6e26:	1a 82       	std	Y+2, r1	; 0x02
    6e28:	1b 82       	std	Y+3, r1	; 0x03
    6e2a:	1c 82       	std	Y+4, r1	; 0x04
    6e2c:	1d 82       	std	Y+5, r1	; 0x05
	u8 i=0;
    6e2e:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;str[i];i++)
    6e30:	19 82       	std	Y+1, r1	; 0x01
    6e32:	29 c0       	rjmp	.+82     	; 0x6e86 <String_To_Decimal+0x78>
	{
		res=res*10+(str[i]-'0');
    6e34:	8a 81       	ldd	r24, Y+2	; 0x02
    6e36:	9b 81       	ldd	r25, Y+3	; 0x03
    6e38:	ac 81       	ldd	r26, Y+4	; 0x04
    6e3a:	bd 81       	ldd	r27, Y+5	; 0x05
    6e3c:	2a e0       	ldi	r18, 0x0A	; 10
    6e3e:	30 e0       	ldi	r19, 0x00	; 0
    6e40:	40 e0       	ldi	r20, 0x00	; 0
    6e42:	50 e0       	ldi	r21, 0x00	; 0
    6e44:	bc 01       	movw	r22, r24
    6e46:	cd 01       	movw	r24, r26
    6e48:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    6e4c:	ab 01       	movw	r20, r22
    6e4e:	bc 01       	movw	r22, r24
    6e50:	89 81       	ldd	r24, Y+1	; 0x01
    6e52:	28 2f       	mov	r18, r24
    6e54:	30 e0       	ldi	r19, 0x00	; 0
    6e56:	8e 81       	ldd	r24, Y+6	; 0x06
    6e58:	9f 81       	ldd	r25, Y+7	; 0x07
    6e5a:	fc 01       	movw	r30, r24
    6e5c:	e2 0f       	add	r30, r18
    6e5e:	f3 1f       	adc	r31, r19
    6e60:	80 81       	ld	r24, Z
    6e62:	88 2f       	mov	r24, r24
    6e64:	90 e0       	ldi	r25, 0x00	; 0
    6e66:	c0 97       	sbiw	r24, 0x30	; 48
    6e68:	aa 27       	eor	r26, r26
    6e6a:	97 fd       	sbrc	r25, 7
    6e6c:	a0 95       	com	r26
    6e6e:	ba 2f       	mov	r27, r26
    6e70:	84 0f       	add	r24, r20
    6e72:	95 1f       	adc	r25, r21
    6e74:	a6 1f       	adc	r26, r22
    6e76:	b7 1f       	adc	r27, r23
    6e78:	8a 83       	std	Y+2, r24	; 0x02
    6e7a:	9b 83       	std	Y+3, r25	; 0x03
    6e7c:	ac 83       	std	Y+4, r26	; 0x04
    6e7e:	bd 83       	std	Y+5, r27	; 0x05
}
u32 String_To_Decimal(u8*str)
{
	u32 res=0;
	u8 i=0;
	for(i=0;str[i];i++)
    6e80:	89 81       	ldd	r24, Y+1	; 0x01
    6e82:	8f 5f       	subi	r24, 0xFF	; 255
    6e84:	89 83       	std	Y+1, r24	; 0x01
    6e86:	89 81       	ldd	r24, Y+1	; 0x01
    6e88:	28 2f       	mov	r18, r24
    6e8a:	30 e0       	ldi	r19, 0x00	; 0
    6e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    6e8e:	9f 81       	ldd	r25, Y+7	; 0x07
    6e90:	fc 01       	movw	r30, r24
    6e92:	e2 0f       	add	r30, r18
    6e94:	f3 1f       	adc	r31, r19
    6e96:	80 81       	ld	r24, Z
    6e98:	88 23       	and	r24, r24
    6e9a:	61 f6       	brne	.-104    	; 0x6e34 <String_To_Decimal+0x26>
	{
		res=res*10+(str[i]-'0');
	}
	return res;
    6e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    6e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    6ea0:	ac 81       	ldd	r26, Y+4	; 0x04
    6ea2:	bd 81       	ldd	r27, Y+5	; 0x05
}
    6ea4:	bc 01       	movw	r22, r24
    6ea6:	cd 01       	movw	r24, r26
    6ea8:	27 96       	adiw	r28, 0x07	; 7
    6eaa:	0f b6       	in	r0, 0x3f	; 63
    6eac:	f8 94       	cli
    6eae:	de bf       	out	0x3e, r29	; 62
    6eb0:	0f be       	out	0x3f, r0	; 63
    6eb2:	cd bf       	out	0x3d, r28	; 61
    6eb4:	cf 91       	pop	r28
    6eb6:	df 91       	pop	r29
    6eb8:	08 95       	ret

00006eba <String_Print>:

void String_Print(u8*str)
{
    6eba:	df 93       	push	r29
    6ebc:	cf 93       	push	r28
    6ebe:	00 d0       	rcall	.+0      	; 0x6ec0 <String_Print+0x6>
    6ec0:	0f 92       	push	r0
    6ec2:	cd b7       	in	r28, 0x3d	; 61
    6ec4:	de b7       	in	r29, 0x3e	; 62
    6ec6:	9b 83       	std	Y+3, r25	; 0x03
    6ec8:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;str[i];i++)
    6eca:	19 82       	std	Y+1, r1	; 0x01
    6ecc:	0e c0       	rjmp	.+28     	; 0x6eea <String_Print+0x30>
	{
		LCD_WriteChar(str[i]);
    6ece:	89 81       	ldd	r24, Y+1	; 0x01
    6ed0:	28 2f       	mov	r18, r24
    6ed2:	30 e0       	ldi	r19, 0x00	; 0
    6ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    6ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    6ed8:	fc 01       	movw	r30, r24
    6eda:	e2 0f       	add	r30, r18
    6edc:	f3 1f       	adc	r31, r19
    6ede:	80 81       	ld	r24, Z
    6ee0:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <LCD_WriteChar>
	return res;
}

void String_Print(u8*str)
{
	for(u8 i=0;str[i];i++)
    6ee4:	89 81       	ldd	r24, Y+1	; 0x01
    6ee6:	8f 5f       	subi	r24, 0xFF	; 255
    6ee8:	89 83       	std	Y+1, r24	; 0x01
    6eea:	89 81       	ldd	r24, Y+1	; 0x01
    6eec:	28 2f       	mov	r18, r24
    6eee:	30 e0       	ldi	r19, 0x00	; 0
    6ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    6ef4:	fc 01       	movw	r30, r24
    6ef6:	e2 0f       	add	r30, r18
    6ef8:	f3 1f       	adc	r31, r19
    6efa:	80 81       	ld	r24, Z
    6efc:	88 23       	and	r24, r24
    6efe:	39 f7       	brne	.-50     	; 0x6ece <String_Print+0x14>
	{
		LCD_WriteChar(str[i]);
	}
    6f00:	0f 90       	pop	r0
    6f02:	0f 90       	pop	r0
    6f04:	0f 90       	pop	r0
    6f06:	cf 91       	pop	r28
    6f08:	df 91       	pop	r29
    6f0a:	08 95       	ret

00006f0c <FILTER_init>:
static  u8  i=0,j=0,k=0;
u16 MeanTemp=0,temp=0;
u32 SumTemp=0;
static  filter_flag=0; 
void FILTER_init(void)
{
    6f0c:	df 93       	push	r29
    6f0e:	cf 93       	push	r28
    6f10:	cd b7       	in	r28, 0x3d	; 61
    6f12:	de b7       	in	r29, 0x3e	; 62
	
	temp=Temp_Get_Synch();
    6f14:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <Temp_Get_Synch>
    6f18:	90 93 77 02 	sts	0x0277, r25
    6f1c:	80 93 76 02 	sts	0x0276, r24
	MeanTemp=temp;
    6f20:	80 91 76 02 	lds	r24, 0x0276
    6f24:	90 91 77 02 	lds	r25, 0x0277
    6f28:	90 93 75 02 	sts	0x0275, r25
    6f2c:	80 93 74 02 	sts	0x0274, r24
	

}
    6f30:	cf 91       	pop	r28
    6f32:	df 91       	pop	r29
    6f34:	08 95       	ret

00006f36 <FILTER_Runnable>:
/* not more than 250us */
void FILTER_Runnable(void)
{
    6f36:	ef 92       	push	r14
    6f38:	ff 92       	push	r15
    6f3a:	0f 93       	push	r16
    6f3c:	1f 93       	push	r17
    6f3e:	df 93       	push	r29
    6f40:	cf 93       	push	r28
    6f42:	cd b7       	in	r28, 0x3d	; 61
    6f44:	de b7       	in	r29, 0x3e	; 62
	temp=Temp_Get_Synch();
    6f46:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <Temp_Get_Synch>
    6f4a:	90 93 77 02 	sts	0x0277, r25
    6f4e:	80 93 76 02 	sts	0x0276, r24
	
	
	if(j<NUMBER_OF_ELES_IN_FILTER)
    6f52:	80 91 72 02 	lds	r24, 0x0272
    6f56:	8a 30       	cpi	r24, 0x0A	; 10
    6f58:	08 f0       	brcs	.+2      	; 0x6f5c <FILTER_Runnable+0x26>
    6f5a:	9a c0       	rjmp	.+308    	; 0x7090 <FILTER_Runnable+0x15a>
	{
		
		temp_arr[j]=temp;
    6f5c:	80 91 72 02 	lds	r24, 0x0272
    6f60:	88 2f       	mov	r24, r24
    6f62:	90 e0       	ldi	r25, 0x00	; 0
    6f64:	20 91 76 02 	lds	r18, 0x0276
    6f68:	30 91 77 02 	lds	r19, 0x0277
    6f6c:	88 0f       	add	r24, r24
    6f6e:	99 1f       	adc	r25, r25
    6f70:	fc 01       	movw	r30, r24
    6f72:	e3 5a       	subi	r30, 0xA3	; 163
    6f74:	fd 4f       	sbci	r31, 0xFD	; 253
    6f76:	31 83       	std	Z+1, r19	; 0x01
    6f78:	20 83       	st	Z, r18
		
		SumTemp=SumTemp+temp_arr[j];
    6f7a:	80 91 72 02 	lds	r24, 0x0272
    6f7e:	88 2f       	mov	r24, r24
    6f80:	90 e0       	ldi	r25, 0x00	; 0
    6f82:	88 0f       	add	r24, r24
    6f84:	99 1f       	adc	r25, r25
    6f86:	fc 01       	movw	r30, r24
    6f88:	e3 5a       	subi	r30, 0xA3	; 163
    6f8a:	fd 4f       	sbci	r31, 0xFD	; 253
    6f8c:	80 81       	ld	r24, Z
    6f8e:	91 81       	ldd	r25, Z+1	; 0x01
    6f90:	9c 01       	movw	r18, r24
    6f92:	40 e0       	ldi	r20, 0x00	; 0
    6f94:	50 e0       	ldi	r21, 0x00	; 0
    6f96:	80 91 78 02 	lds	r24, 0x0278
    6f9a:	90 91 79 02 	lds	r25, 0x0279
    6f9e:	a0 91 7a 02 	lds	r26, 0x027A
    6fa2:	b0 91 7b 02 	lds	r27, 0x027B
    6fa6:	82 0f       	add	r24, r18
    6fa8:	93 1f       	adc	r25, r19
    6faa:	a4 1f       	adc	r26, r20
    6fac:	b5 1f       	adc	r27, r21
    6fae:	80 93 78 02 	sts	0x0278, r24
    6fb2:	90 93 79 02 	sts	0x0279, r25
    6fb6:	a0 93 7a 02 	sts	0x027A, r26
    6fba:	b0 93 7b 02 	sts	0x027B, r27
		
		if(filter_flag==1)
    6fbe:	80 91 7c 02 	lds	r24, 0x027C
    6fc2:	90 91 7d 02 	lds	r25, 0x027D
    6fc6:	81 30       	cpi	r24, 0x01	; 1
    6fc8:	91 05       	cpc	r25, r1
    6fca:	19 f4       	brne	.+6      	; 0x6fd2 <FILTER_Runnable+0x9c>
		{
			j=NUMBER_OF_ELES_IN_FILTER-1;
    6fcc:	89 e0       	ldi	r24, 0x09	; 9
    6fce:	80 93 72 02 	sts	0x0272, r24
		}
		
		if(j==NUMBER_OF_ELES_IN_FILTER-1)
    6fd2:	80 91 72 02 	lds	r24, 0x0272
    6fd6:	89 30       	cpi	r24, 0x09	; 9
    6fd8:	09 f0       	breq	.+2      	; 0x6fdc <FILTER_Runnable+0xa6>
    6fda:	55 c0       	rjmp	.+170    	; 0x7086 <FILTER_Runnable+0x150>
		{
			MeanTemp=(SumTemp+(NUMBER_OF_ELES_IN_FILTER/2))/NUMBER_OF_ELES_IN_FILTER;
    6fdc:	80 91 78 02 	lds	r24, 0x0278
    6fe0:	90 91 79 02 	lds	r25, 0x0279
    6fe4:	a0 91 7a 02 	lds	r26, 0x027A
    6fe8:	b0 91 7b 02 	lds	r27, 0x027B
    6fec:	05 96       	adiw	r24, 0x05	; 5
    6fee:	a1 1d       	adc	r26, r1
    6ff0:	b1 1d       	adc	r27, r1
    6ff2:	2a e0       	ldi	r18, 0x0A	; 10
    6ff4:	30 e0       	ldi	r19, 0x00	; 0
    6ff6:	40 e0       	ldi	r20, 0x00	; 0
    6ff8:	50 e0       	ldi	r21, 0x00	; 0
    6ffa:	bc 01       	movw	r22, r24
    6ffc:	cd 01       	movw	r24, r26
    6ffe:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    7002:	da 01       	movw	r26, r20
    7004:	c9 01       	movw	r24, r18
    7006:	90 93 75 02 	sts	0x0275, r25
    700a:	80 93 74 02 	sts	0x0274, r24
			SumTemp=SumTemp-temp_arr[k];
    700e:	20 91 78 02 	lds	r18, 0x0278
    7012:	30 91 79 02 	lds	r19, 0x0279
    7016:	40 91 7a 02 	lds	r20, 0x027A
    701a:	50 91 7b 02 	lds	r21, 0x027B
    701e:	80 91 73 02 	lds	r24, 0x0273
    7022:	88 2f       	mov	r24, r24
    7024:	90 e0       	ldi	r25, 0x00	; 0
    7026:	88 0f       	add	r24, r24
    7028:	99 1f       	adc	r25, r25
    702a:	fc 01       	movw	r30, r24
    702c:	e3 5a       	subi	r30, 0xA3	; 163
    702e:	fd 4f       	sbci	r31, 0xFD	; 253
    7030:	80 81       	ld	r24, Z
    7032:	91 81       	ldd	r25, Z+1	; 0x01
    7034:	cc 01       	movw	r24, r24
    7036:	a0 e0       	ldi	r26, 0x00	; 0
    7038:	b0 e0       	ldi	r27, 0x00	; 0
    703a:	79 01       	movw	r14, r18
    703c:	8a 01       	movw	r16, r20
    703e:	e8 1a       	sub	r14, r24
    7040:	f9 0a       	sbc	r15, r25
    7042:	0a 0b       	sbc	r16, r26
    7044:	1b 0b       	sbc	r17, r27
    7046:	d8 01       	movw	r26, r16
    7048:	c7 01       	movw	r24, r14
    704a:	80 93 78 02 	sts	0x0278, r24
    704e:	90 93 79 02 	sts	0x0279, r25
    7052:	a0 93 7a 02 	sts	0x027A, r26
    7056:	b0 93 7b 02 	sts	0x027B, r27
			j=k;
    705a:	80 91 73 02 	lds	r24, 0x0273
    705e:	80 93 72 02 	sts	0x0272, r24
			k++;
    7062:	80 91 73 02 	lds	r24, 0x0273
    7066:	8f 5f       	subi	r24, 0xFF	; 255
    7068:	80 93 73 02 	sts	0x0273, r24
			if(k==NUMBER_OF_ELES_IN_FILTER)
    706c:	80 91 73 02 	lds	r24, 0x0273
    7070:	8a 30       	cpi	r24, 0x0A	; 10
    7072:	11 f4       	brne	.+4      	; 0x7078 <FILTER_Runnable+0x142>
			{
				k=0;
    7074:	10 92 73 02 	sts	0x0273, r1
			}
			filter_flag=1;
    7078:	81 e0       	ldi	r24, 0x01	; 1
    707a:	90 e0       	ldi	r25, 0x00	; 0
    707c:	90 93 7d 02 	sts	0x027D, r25
    7080:	80 93 7c 02 	sts	0x027C, r24
    7084:	05 c0       	rjmp	.+10     	; 0x7090 <FILTER_Runnable+0x15a>
			
						
		}
		else
		{
			j++;
    7086:	80 91 72 02 	lds	r24, 0x0272
    708a:	8f 5f       	subi	r24, 0xFF	; 255
    708c:	80 93 72 02 	sts	0x0272, r24
	}
	

	
	
}
    7090:	cf 91       	pop	r28
    7092:	df 91       	pop	r29
    7094:	1f 91       	pop	r17
    7096:	0f 91       	pop	r16
    7098:	ff 90       	pop	r15
    709a:	ef 90       	pop	r14
    709c:	08 95       	ret

0000709e <FILTER_GetFilteredTemp>:

u16 FILTER_GetFilteredTemp(void)
{
    709e:	df 93       	push	r29
    70a0:	cf 93       	push	r28
    70a2:	cd b7       	in	r28, 0x3d	; 61
    70a4:	de b7       	in	r29, 0x3e	; 62
	return MeanTemp;
    70a6:	80 91 74 02 	lds	r24, 0x0274
    70aa:	90 91 75 02 	lds	r25, 0x0275
	
}
    70ae:	cf 91       	pop	r28
    70b0:	df 91       	pop	r29
    70b2:	08 95       	ret

000070b4 <FILTER_GetUnFilteredTemp>:

u16 FILTER_GetUnFilteredTemp(void)
{
    70b4:	df 93       	push	r29
    70b6:	cf 93       	push	r28
    70b8:	cd b7       	in	r28, 0x3d	; 61
    70ba:	de b7       	in	r29, 0x3e	; 62
	return temp;
    70bc:	80 91 76 02 	lds	r24, 0x0276
    70c0:	90 91 77 02 	lds	r25, 0x0277
}
    70c4:	cf 91       	pop	r28
    70c6:	df 91       	pop	r29
    70c8:	08 95       	ret

000070ca <ADC_ReadFunc>:
#include "Temp_Interface.h"
#include "Temp_Cfg.h"

static u16 adc,volt,temp;
void ADC_ReadFunc(void)
{
    70ca:	df 93       	push	r29
    70cc:	cf 93       	push	r28
    70ce:	cd b7       	in	r28, 0x3d	; 61
    70d0:	de b7       	in	r29, 0x3e	; 62

	adc=ADC;
    70d2:	e4 e2       	ldi	r30, 0x24	; 36
    70d4:	f0 e0       	ldi	r31, 0x00	; 0
    70d6:	80 81       	ld	r24, Z
    70d8:	91 81       	ldd	r25, Z+1	; 0x01
    70da:	90 93 7f 02 	sts	0x027F, r25
    70de:	80 93 7e 02 	sts	0x027E, r24
    ADC_StartConversion(TEMP_CH);
    70e2:	87 e0       	ldi	r24, 0x07	; 7
    70e4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <ADC_StartConversion>

}
    70e8:	cf 91       	pop	r28
    70ea:	df 91       	pop	r29
    70ec:	08 95       	ret

000070ee <ADC_ReadVoltFunc>:
void ADC_ReadVoltFunc(void)
{
    70ee:	df 93       	push	r29
    70f0:	cf 93       	push	r28
    70f2:	cd b7       	in	r28, 0x3d	; 61
    70f4:	de b7       	in	r29, 0x3e	; 62

	adc=ADC;
    70f6:	e4 e2       	ldi	r30, 0x24	; 36
    70f8:	f0 e0       	ldi	r31, 0x00	; 0
    70fa:	80 81       	ld	r24, Z
    70fc:	91 81       	ldd	r25, Z+1	; 0x01
    70fe:	90 93 7f 02 	sts	0x027F, r25
    7102:	80 93 7e 02 	sts	0x027E, r24
	volt=((u32)adc*VREF)/1024;
    7106:	80 91 7e 02 	lds	r24, 0x027E
    710a:	90 91 7f 02 	lds	r25, 0x027F
    710e:	cc 01       	movw	r24, r24
    7110:	a0 e0       	ldi	r26, 0x00	; 0
    7112:	b0 e0       	ldi	r27, 0x00	; 0
    7114:	28 e8       	ldi	r18, 0x88	; 136
    7116:	33 e1       	ldi	r19, 0x13	; 19
    7118:	40 e0       	ldi	r20, 0x00	; 0
    711a:	50 e0       	ldi	r21, 0x00	; 0
    711c:	bc 01       	movw	r22, r24
    711e:	cd 01       	movw	r24, r26
    7120:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    7124:	dc 01       	movw	r26, r24
    7126:	cb 01       	movw	r24, r22
    7128:	07 2e       	mov	r0, r23
    712a:	7a e0       	ldi	r23, 0x0A	; 10
    712c:	b6 95       	lsr	r27
    712e:	a7 95       	ror	r26
    7130:	97 95       	ror	r25
    7132:	87 95       	ror	r24
    7134:	7a 95       	dec	r23
    7136:	d1 f7       	brne	.-12     	; 0x712c <ADC_ReadVoltFunc+0x3e>
    7138:	70 2d       	mov	r23, r0
    713a:	90 93 81 02 	sts	0x0281, r25
    713e:	80 93 80 02 	sts	0x0280, r24
     ADC_StartConversion(TEMP_CH);
    7142:	87 e0       	ldi	r24, 0x07	; 7
    7144:	0e 94 40 17 	call	0x2e80	; 0x2e80 <ADC_StartConversion>

}
    7148:	cf 91       	pop	r28
    714a:	df 91       	pop	r29
    714c:	08 95       	ret

0000714e <Temp_Init>:

void Temp_Init(void)
{
    714e:	df 93       	push	r29
    7150:	cf 93       	push	r28
    7152:	cd b7       	in	r28, 0x3d	; 61
    7154:	de b7       	in	r29, 0x3e	; 62
	ADC_SetCallback(ADC_ReadFunc);
    7156:	85 e6       	ldi	r24, 0x65	; 101
    7158:	98 e3       	ldi	r25, 0x38	; 56
    715a:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <ADC_SetCallback>
	ADC_IntEnable();
    715e:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <ADC_IntEnable>
	ADC_StartConversion(TEMP_CH);
    7162:	87 e0       	ldi	r24, 0x07	; 7
    7164:	0e 94 40 17 	call	0x2e80	; 0x2e80 <ADC_StartConversion>
}
    7168:	cf 91       	pop	r28
    716a:	df 91       	pop	r29
    716c:	08 95       	ret

0000716e <Temp_Get>:

u16 Temp_Get(void)
{
    716e:	df 93       	push	r29
    7170:	cf 93       	push	r28
    7172:	cd b7       	in	r28, 0x3d	; 61
    7174:	de b7       	in	r29, 0x3e	; 62
	//usin adc
	//temp=((u32)adc*150)/1024;//vref=1.5v
	//temp=((u32)adc*150)/307;//vref=5v

	//temp=((u32)adc*1500)/1024;//vref=1.5v-> c*10
	temp=(((u32)adc*1500))/308;//vref=5v  ->c*10
    7176:	80 91 7e 02 	lds	r24, 0x027E
    717a:	90 91 7f 02 	lds	r25, 0x027F
    717e:	cc 01       	movw	r24, r24
    7180:	a0 e0       	ldi	r26, 0x00	; 0
    7182:	b0 e0       	ldi	r27, 0x00	; 0
    7184:	2c ed       	ldi	r18, 0xDC	; 220
    7186:	35 e0       	ldi	r19, 0x05	; 5
    7188:	40 e0       	ldi	r20, 0x00	; 0
    718a:	50 e0       	ldi	r21, 0x00	; 0
    718c:	bc 01       	movw	r22, r24
    718e:	cd 01       	movw	r24, r26
    7190:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    7194:	dc 01       	movw	r26, r24
    7196:	cb 01       	movw	r24, r22
    7198:	24 e3       	ldi	r18, 0x34	; 52
    719a:	31 e0       	ldi	r19, 0x01	; 1
    719c:	40 e0       	ldi	r20, 0x00	; 0
    719e:	50 e0       	ldi	r21, 0x00	; 0
    71a0:	bc 01       	movw	r22, r24
    71a2:	cd 01       	movw	r24, r26
    71a4:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    71a8:	da 01       	movw	r26, r20
    71aa:	c9 01       	movw	r24, r18
    71ac:	90 93 83 02 	sts	0x0283, r25
    71b0:	80 93 82 02 	sts	0x0282, r24

	return temp;
    71b4:	80 91 82 02 	lds	r24, 0x0282
    71b8:	90 91 83 02 	lds	r25, 0x0283

}
    71bc:	cf 91       	pop	r28
    71be:	df 91       	pop	r29
    71c0:	08 95       	ret

000071c2 <Temp_Get_Synch>:

u16 Temp_Get_Synch(void)
{
    71c2:	df 93       	push	r29
    71c4:	cf 93       	push	r28
    71c6:	cd b7       	in	r28, 0x3d	; 61
    71c8:	de b7       	in	r29, 0x3e	; 62
	//usin adc
	//temp=((u32)adc*150)/1024;//vref=1.5v
	//temp=((u32)adc*150)/307;//vref=5v

	//temp=((u32)adc*1500)/1024;//vref=1.5v-> c*10
	temp=(((u32)ADC_Read(TEMP_CH)*1500))/308;//vref=5v  ->c*10
    71ca:	87 e0       	ldi	r24, 0x07	; 7
    71cc:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <ADC_Read>
    71d0:	cc 01       	movw	r24, r24
    71d2:	a0 e0       	ldi	r26, 0x00	; 0
    71d4:	b0 e0       	ldi	r27, 0x00	; 0
    71d6:	2c ed       	ldi	r18, 0xDC	; 220
    71d8:	35 e0       	ldi	r19, 0x05	; 5
    71da:	40 e0       	ldi	r20, 0x00	; 0
    71dc:	50 e0       	ldi	r21, 0x00	; 0
    71de:	bc 01       	movw	r22, r24
    71e0:	cd 01       	movw	r24, r26
    71e2:	0e 94 ed 3c 	call	0x79da	; 0x79da <__mulsi3>
    71e6:	dc 01       	movw	r26, r24
    71e8:	cb 01       	movw	r24, r22
    71ea:	24 e3       	ldi	r18, 0x34	; 52
    71ec:	31 e0       	ldi	r19, 0x01	; 1
    71ee:	40 e0       	ldi	r20, 0x00	; 0
    71f0:	50 e0       	ldi	r21, 0x00	; 0
    71f2:	bc 01       	movw	r22, r24
    71f4:	cd 01       	movw	r24, r26
    71f6:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    71fa:	da 01       	movw	r26, r20
    71fc:	c9 01       	movw	r24, r18
    71fe:	90 93 83 02 	sts	0x0283, r25
    7202:	80 93 82 02 	sts	0x0282, r24

	return temp;
    7206:	80 91 82 02 	lds	r24, 0x0282
    720a:	90 91 83 02 	lds	r25, 0x0283

}
    720e:	cf 91       	pop	r28
    7210:	df 91       	pop	r29
    7212:	08 95       	ret

00007214 <UART_Init>:
	
	
}
*/
void UART_Init(void)
{
    7214:	df 93       	push	r29
    7216:	cf 93       	push	r28
    7218:	cd b7       	in	r28, 0x3d	; 61
    721a:	de b7       	in	r29, 0x3e	; 62
	
	
	#if UART_MODE==UART_NORMAL_MODE
	
	
	CLR_BIT(UCSRA,U2X);//Normal mode
    721c:	ab e2       	ldi	r26, 0x2B	; 43
    721e:	b0 e0       	ldi	r27, 0x00	; 0
    7220:	eb e2       	ldi	r30, 0x2B	; 43
    7222:	f0 e0       	ldi	r31, 0x00	; 0
    7224:	80 81       	ld	r24, Z
    7226:	8d 7f       	andi	r24, 0xFD	; 253
    7228:	8c 93       	st	X, r24
		
	//Baud Rate
	
	UBRRL=((u32)F_CPU/(16*(u32)UART_BAUD_RATE))-1;//9600
    722a:	e9 e2       	ldi	r30, 0x29	; 41
    722c:	f0 e0       	ldi	r31, 0x00	; 0
    722e:	83 e3       	ldi	r24, 0x33	; 51
    7230:	80 83       	st	Z, r24
	#endif


	
	//Transmitter Enable
	SET_BIT(UCSRB,TXEN);
    7232:	aa e2       	ldi	r26, 0x2A	; 42
    7234:	b0 e0       	ldi	r27, 0x00	; 0
    7236:	ea e2       	ldi	r30, 0x2A	; 42
    7238:	f0 e0       	ldi	r31, 0x00	; 0
    723a:	80 81       	ld	r24, Z
    723c:	88 60       	ori	r24, 0x08	; 8
    723e:	8c 93       	st	X, r24
	
	//Receiver Enable
	SET_BIT(UCSRB,RXEN);
    7240:	aa e2       	ldi	r26, 0x2A	; 42
    7242:	b0 e0       	ldi	r27, 0x00	; 0
    7244:	ea e2       	ldi	r30, 0x2A	; 42
    7246:	f0 e0       	ldi	r31, 0x00	; 0
    7248:	80 81       	ld	r24, Z
    724a:	80 61       	ori	r24, 0x10	; 16
    724c:	8c 93       	st	X, r24
// 	SET_BIT(UCSRC,UCSZ0); // 8bit selcet data length
// 	SET_BIT(UCSRC,UCSZ1);
// 	
	
	
}
    724e:	cf 91       	pop	r28
    7250:	df 91       	pop	r29
    7252:	08 95       	ret

00007254 <UART_Send>:
//Busy wait design
void UART_Send(u8 data)
{
    7254:	df 93       	push	r29
    7256:	cf 93       	push	r28
    7258:	0f 92       	push	r0
    725a:	cd b7       	in	r28, 0x3d	; 61
    725c:	de b7       	in	r29, 0x3e	; 62
    725e:	89 83       	std	Y+1, r24	; 0x01
	while(!READ_BIT(UCSRA,UDRE));
    7260:	eb e2       	ldi	r30, 0x2B	; 43
    7262:	f0 e0       	ldi	r31, 0x00	; 0
    7264:	80 81       	ld	r24, Z
    7266:	82 95       	swap	r24
    7268:	86 95       	lsr	r24
    726a:	87 70       	andi	r24, 0x07	; 7
    726c:	88 2f       	mov	r24, r24
    726e:	90 e0       	ldi	r25, 0x00	; 0
    7270:	81 70       	andi	r24, 0x01	; 1
    7272:	90 70       	andi	r25, 0x00	; 0
    7274:	00 97       	sbiw	r24, 0x00	; 0
    7276:	a1 f3       	breq	.-24     	; 0x7260 <UART_Send+0xc>
	
	UDR=data;
    7278:	ec e2       	ldi	r30, 0x2C	; 44
    727a:	f0 e0       	ldi	r31, 0x00	; 0
    727c:	89 81       	ldd	r24, Y+1	; 0x01
    727e:	80 83       	st	Z, r24
	
}
    7280:	0f 90       	pop	r0
    7282:	cf 91       	pop	r28
    7284:	df 91       	pop	r29
    7286:	08 95       	ret

00007288 <UART_Receive>:

u8 UART_Receive(void)
{
    7288:	df 93       	push	r29
    728a:	cf 93       	push	r28
    728c:	0f 92       	push	r0
    728e:	cd b7       	in	r28, 0x3d	; 61
    7290:	de b7       	in	r29, 0x3e	; 62
	u8 data;
	while(!READ_BIT(UCSRA,RXC));
    7292:	eb e2       	ldi	r30, 0x2B	; 43
    7294:	f0 e0       	ldi	r31, 0x00	; 0
    7296:	80 81       	ld	r24, Z
    7298:	88 23       	and	r24, r24
    729a:	dc f7       	brge	.-10     	; 0x7292 <UART_Receive+0xa>
	
	data=UDR;
    729c:	ec e2       	ldi	r30, 0x2C	; 44
    729e:	f0 e0       	ldi	r31, 0x00	; 0
    72a0:	80 81       	ld	r24, Z
    72a2:	89 83       	std	Y+1, r24	; 0x01
	return data;
    72a4:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    72a6:	0f 90       	pop	r0
    72a8:	cf 91       	pop	r28
    72aa:	df 91       	pop	r29
    72ac:	08 95       	ret

000072ae <UART_ReceivePerodic>:

u8 UART_ReceivePerodic(u8*pdata)//Periodic check
{
    72ae:	df 93       	push	r29
    72b0:	cf 93       	push	r28
    72b2:	00 d0       	rcall	.+0      	; 0x72b4 <UART_ReceivePerodic+0x6>
    72b4:	0f 92       	push	r0
    72b6:	cd b7       	in	r28, 0x3d	; 61
    72b8:	de b7       	in	r29, 0x3e	; 62
    72ba:	9a 83       	std	Y+2, r25	; 0x02
    72bc:	89 83       	std	Y+1, r24	; 0x01

	if(READ_BIT(UCSRA,RXC))
    72be:	eb e2       	ldi	r30, 0x2B	; 43
    72c0:	f0 e0       	ldi	r31, 0x00	; 0
    72c2:	80 81       	ld	r24, Z
    72c4:	88 23       	and	r24, r24
    72c6:	4c f4       	brge	.+18     	; 0x72da <UART_ReceivePerodic+0x2c>
	{
		*pdata=UDR;
    72c8:	ec e2       	ldi	r30, 0x2C	; 44
    72ca:	f0 e0       	ldi	r31, 0x00	; 0
    72cc:	80 81       	ld	r24, Z
    72ce:	e9 81       	ldd	r30, Y+1	; 0x01
    72d0:	fa 81       	ldd	r31, Y+2	; 0x02
    72d2:	80 83       	st	Z, r24
		return 1;
    72d4:	81 e0       	ldi	r24, 0x01	; 1
    72d6:	8b 83       	std	Y+3, r24	; 0x03
    72d8:	01 c0       	rjmp	.+2      	; 0x72dc <UART_ReceivePerodic+0x2e>
	}
	else
	{
		return 0;
    72da:	1b 82       	std	Y+3, r1	; 0x03
    72dc:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	
	
	
	
}
    72de:	0f 90       	pop	r0
    72e0:	0f 90       	pop	r0
    72e2:	0f 90       	pop	r0
    72e4:	cf 91       	pop	r28
    72e6:	df 91       	pop	r29
    72e8:	08 95       	ret

000072ea <UART_SendNoBlock>:

void UART_SendNoBlock(u8 data)
{
    72ea:	df 93       	push	r29
    72ec:	cf 93       	push	r28
    72ee:	0f 92       	push	r0
    72f0:	cd b7       	in	r28, 0x3d	; 61
    72f2:	de b7       	in	r29, 0x3e	; 62
    72f4:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    72f6:	ec e2       	ldi	r30, 0x2C	; 44
    72f8:	f0 e0       	ldi	r31, 0x00	; 0
    72fa:	89 81       	ldd	r24, Y+1	; 0x01
    72fc:	80 83       	st	Z, r24
}
    72fe:	0f 90       	pop	r0
    7300:	cf 91       	pop	r28
    7302:	df 91       	pop	r29
    7304:	08 95       	ret

00007306 <UART_ReceiveNoBlock>:

u8 UART_ReceiveNoBlock(void)
{
    7306:	df 93       	push	r29
    7308:	cf 93       	push	r28
    730a:	cd b7       	in	r28, 0x3d	; 61
    730c:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    730e:	ec e2       	ldi	r30, 0x2C	; 44
    7310:	f0 e0       	ldi	r31, 0x00	; 0
    7312:	80 81       	ld	r24, Z
}
    7314:	cf 91       	pop	r28
    7316:	df 91       	pop	r29
    7318:	08 95       	ret

0000731a <UART_Tx_InterruptEnable>:
static void (*UART_Rx_Fptr)(void)=NULLPTR;

/**************************** Uart Interrupt functions **************************************/

void UART_Tx_InterruptEnable(void)
{
    731a:	df 93       	push	r29
    731c:	cf 93       	push	r28
    731e:	cd b7       	in	r28, 0x3d	; 61
    7320:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
    7322:	aa e2       	ldi	r26, 0x2A	; 42
    7324:	b0 e0       	ldi	r27, 0x00	; 0
    7326:	ea e2       	ldi	r30, 0x2A	; 42
    7328:	f0 e0       	ldi	r31, 0x00	; 0
    732a:	80 81       	ld	r24, Z
    732c:	80 64       	ori	r24, 0x40	; 64
    732e:	8c 93       	st	X, r24
}
    7330:	cf 91       	pop	r28
    7332:	df 91       	pop	r29
    7334:	08 95       	ret

00007336 <UART_Tx_InterruptDisable>:

void UART_Tx_InterruptDisable(void)
{
    7336:	df 93       	push	r29
    7338:	cf 93       	push	r28
    733a:	cd b7       	in	r28, 0x3d	; 61
    733c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,TXCIE);
    733e:	aa e2       	ldi	r26, 0x2A	; 42
    7340:	b0 e0       	ldi	r27, 0x00	; 0
    7342:	ea e2       	ldi	r30, 0x2A	; 42
    7344:	f0 e0       	ldi	r31, 0x00	; 0
    7346:	80 81       	ld	r24, Z
    7348:	8f 7b       	andi	r24, 0xBF	; 191
    734a:	8c 93       	st	X, r24
}
    734c:	cf 91       	pop	r28
    734e:	df 91       	pop	r29
    7350:	08 95       	ret

00007352 <UART_Rx_InterruptEnable>:

void UART_Rx_InterruptEnable(void)
{
    7352:	df 93       	push	r29
    7354:	cf 93       	push	r28
    7356:	cd b7       	in	r28, 0x3d	; 61
    7358:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
    735a:	aa e2       	ldi	r26, 0x2A	; 42
    735c:	b0 e0       	ldi	r27, 0x00	; 0
    735e:	ea e2       	ldi	r30, 0x2A	; 42
    7360:	f0 e0       	ldi	r31, 0x00	; 0
    7362:	80 81       	ld	r24, Z
    7364:	80 68       	ori	r24, 0x80	; 128
    7366:	8c 93       	st	X, r24
}
    7368:	cf 91       	pop	r28
    736a:	df 91       	pop	r29
    736c:	08 95       	ret

0000736e <UART_Rx_InterruptDisable>:

void UART_Rx_InterruptDisable(void)
{
    736e:	df 93       	push	r29
    7370:	cf 93       	push	r28
    7372:	cd b7       	in	r28, 0x3d	; 61
    7374:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,RXCIE);
    7376:	aa e2       	ldi	r26, 0x2A	; 42
    7378:	b0 e0       	ldi	r27, 0x00	; 0
    737a:	ea e2       	ldi	r30, 0x2A	; 42
    737c:	f0 e0       	ldi	r31, 0x00	; 0
    737e:	80 81       	ld	r24, Z
    7380:	8f 77       	andi	r24, 0x7F	; 127
    7382:	8c 93       	st	X, r24
}
    7384:	cf 91       	pop	r28
    7386:	df 91       	pop	r29
    7388:	08 95       	ret

0000738a <UART_Tx_SetCallback>:

/********************************* Uart Call Back functions*****************************************/

void UART_Tx_SetCallback(void(*LocalFptr)(void))
{
    738a:	df 93       	push	r29
    738c:	cf 93       	push	r28
    738e:	00 d0       	rcall	.+0      	; 0x7390 <UART_Tx_SetCallback+0x6>
    7390:	cd b7       	in	r28, 0x3d	; 61
    7392:	de b7       	in	r29, 0x3e	; 62
    7394:	9a 83       	std	Y+2, r25	; 0x02
    7396:	89 83       	std	Y+1, r24	; 0x01
	UART_Tx_Fptr=LocalFptr;
    7398:	89 81       	ldd	r24, Y+1	; 0x01
    739a:	9a 81       	ldd	r25, Y+2	; 0x02
    739c:	90 93 85 02 	sts	0x0285, r25
    73a0:	80 93 84 02 	sts	0x0284, r24
}
    73a4:	0f 90       	pop	r0
    73a6:	0f 90       	pop	r0
    73a8:	cf 91       	pop	r28
    73aa:	df 91       	pop	r29
    73ac:	08 95       	ret

000073ae <UART_Rx_SetCallback>:

void UART_Rx_SetCallback(void(*LocalFptr)(void))
{
    73ae:	df 93       	push	r29
    73b0:	cf 93       	push	r28
    73b2:	00 d0       	rcall	.+0      	; 0x73b4 <UART_Rx_SetCallback+0x6>
    73b4:	cd b7       	in	r28, 0x3d	; 61
    73b6:	de b7       	in	r29, 0x3e	; 62
    73b8:	9a 83       	std	Y+2, r25	; 0x02
    73ba:	89 83       	std	Y+1, r24	; 0x01
	UART_Rx_Fptr=LocalFptr;
    73bc:	89 81       	ldd	r24, Y+1	; 0x01
    73be:	9a 81       	ldd	r25, Y+2	; 0x02
    73c0:	90 93 87 02 	sts	0x0287, r25
    73c4:	80 93 86 02 	sts	0x0286, r24
}
    73c8:	0f 90       	pop	r0
    73ca:	0f 90       	pop	r0
    73cc:	cf 91       	pop	r28
    73ce:	df 91       	pop	r29
    73d0:	08 95       	ret

000073d2 <__vector_15>:

/*********************************Uart ISR functions*********************************************/

ISR(UART_TX_vect)
{
    73d2:	1f 92       	push	r1
    73d4:	0f 92       	push	r0
    73d6:	0f b6       	in	r0, 0x3f	; 63
    73d8:	0f 92       	push	r0
    73da:	11 24       	eor	r1, r1
    73dc:	2f 93       	push	r18
    73de:	3f 93       	push	r19
    73e0:	4f 93       	push	r20
    73e2:	5f 93       	push	r21
    73e4:	6f 93       	push	r22
    73e6:	7f 93       	push	r23
    73e8:	8f 93       	push	r24
    73ea:	9f 93       	push	r25
    73ec:	af 93       	push	r26
    73ee:	bf 93       	push	r27
    73f0:	ef 93       	push	r30
    73f2:	ff 93       	push	r31
    73f4:	df 93       	push	r29
    73f6:	cf 93       	push	r28
    73f8:	cd b7       	in	r28, 0x3d	; 61
    73fa:	de b7       	in	r29, 0x3e	; 62
	if (UART_Tx_Fptr!=NULLPTR)
    73fc:	80 91 84 02 	lds	r24, 0x0284
    7400:	90 91 85 02 	lds	r25, 0x0285
    7404:	00 97       	sbiw	r24, 0x00	; 0
    7406:	29 f0       	breq	.+10     	; 0x7412 <__vector_15+0x40>
	{
		UART_Tx_Fptr();
    7408:	e0 91 84 02 	lds	r30, 0x0284
    740c:	f0 91 85 02 	lds	r31, 0x0285
    7410:	09 95       	icall
	}
}
    7412:	cf 91       	pop	r28
    7414:	df 91       	pop	r29
    7416:	ff 91       	pop	r31
    7418:	ef 91       	pop	r30
    741a:	bf 91       	pop	r27
    741c:	af 91       	pop	r26
    741e:	9f 91       	pop	r25
    7420:	8f 91       	pop	r24
    7422:	7f 91       	pop	r23
    7424:	6f 91       	pop	r22
    7426:	5f 91       	pop	r21
    7428:	4f 91       	pop	r20
    742a:	3f 91       	pop	r19
    742c:	2f 91       	pop	r18
    742e:	0f 90       	pop	r0
    7430:	0f be       	out	0x3f, r0	; 63
    7432:	0f 90       	pop	r0
    7434:	1f 90       	pop	r1
    7436:	18 95       	reti

00007438 <__vector_13>:

ISR(UART_RX_vect)
{
    7438:	1f 92       	push	r1
    743a:	0f 92       	push	r0
    743c:	0f b6       	in	r0, 0x3f	; 63
    743e:	0f 92       	push	r0
    7440:	11 24       	eor	r1, r1
    7442:	2f 93       	push	r18
    7444:	3f 93       	push	r19
    7446:	4f 93       	push	r20
    7448:	5f 93       	push	r21
    744a:	6f 93       	push	r22
    744c:	7f 93       	push	r23
    744e:	8f 93       	push	r24
    7450:	9f 93       	push	r25
    7452:	af 93       	push	r26
    7454:	bf 93       	push	r27
    7456:	ef 93       	push	r30
    7458:	ff 93       	push	r31
    745a:	df 93       	push	r29
    745c:	cf 93       	push	r28
    745e:	cd b7       	in	r28, 0x3d	; 61
    7460:	de b7       	in	r29, 0x3e	; 62
	if (UART_Rx_Fptr!=NULLPTR)
    7462:	80 91 86 02 	lds	r24, 0x0286
    7466:	90 91 87 02 	lds	r25, 0x0287
    746a:	00 97       	sbiw	r24, 0x00	; 0
    746c:	29 f0       	breq	.+10     	; 0x7478 <__vector_13+0x40>
	{
		UART_Rx_Fptr();
    746e:	e0 91 86 02 	lds	r30, 0x0286
    7472:	f0 91 87 02 	lds	r31, 0x0287
    7476:	09 95       	icall
	}
}
    7478:	cf 91       	pop	r28
    747a:	df 91       	pop	r29
    747c:	ff 91       	pop	r31
    747e:	ef 91       	pop	r30
    7480:	bf 91       	pop	r27
    7482:	af 91       	pop	r26
    7484:	9f 91       	pop	r25
    7486:	8f 91       	pop	r24
    7488:	7f 91       	pop	r23
    748a:	6f 91       	pop	r22
    748c:	5f 91       	pop	r21
    748e:	4f 91       	pop	r20
    7490:	3f 91       	pop	r19
    7492:	2f 91       	pop	r18
    7494:	0f 90       	pop	r0
    7496:	0f be       	out	0x3f, r0	; 63
    7498:	0f 90       	pop	r0
    749a:	1f 90       	pop	r1
    749c:	18 95       	reti

0000749e <UART_Frame_Sw>:
#include <util/delay.h>

#if UART_PARITY==UART_PARITY_EVEN

u16 UART_Frame_Sw(u8 data)//even partity
{
    749e:	df 93       	push	r29
    74a0:	cf 93       	push	r28
    74a2:	00 d0       	rcall	.+0      	; 0x74a4 <UART_Frame_Sw+0x6>
    74a4:	00 d0       	rcall	.+0      	; 0x74a6 <UART_Frame_Sw+0x8>
    74a6:	cd b7       	in	r28, 0x3d	; 61
    74a8:	de b7       	in	r29, 0x3e	; 62
    74aa:	8c 83       	std	Y+4, r24	; 0x04
	u16 frame=0;
    74ac:	1b 82       	std	Y+3, r1	; 0x03
    74ae:	1a 82       	std	Y+2, r1	; 0x02
	u8 ones=0;
    74b0:	19 82       	std	Y+1, r1	; 0x01
	frame=data<<1;//stop bit +data
    74b2:	8c 81       	ldd	r24, Y+4	; 0x04
    74b4:	88 2f       	mov	r24, r24
    74b6:	90 e0       	ldi	r25, 0x00	; 0
    74b8:	88 0f       	add	r24, r24
    74ba:	99 1f       	adc	r25, r25
    74bc:	9b 83       	std	Y+3, r25	; 0x03
    74be:	8a 83       	std	Y+2, r24	; 0x02
    74c0:	0d c0       	rjmp	.+26     	; 0x74dc <UART_Frame_Sw+0x3e>
	while(data)
	{
		if(READ_BIT(data,0)==1)
    74c2:	8c 81       	ldd	r24, Y+4	; 0x04
    74c4:	88 2f       	mov	r24, r24
    74c6:	90 e0       	ldi	r25, 0x00	; 0
    74c8:	81 70       	andi	r24, 0x01	; 1
    74ca:	90 70       	andi	r25, 0x00	; 0
    74cc:	88 23       	and	r24, r24
    74ce:	19 f0       	breq	.+6      	; 0x74d6 <UART_Frame_Sw+0x38>
		{
			ones++;
    74d0:	89 81       	ldd	r24, Y+1	; 0x01
    74d2:	8f 5f       	subi	r24, 0xFF	; 255
    74d4:	89 83       	std	Y+1, r24	; 0x01
		}
		data=data>>1;
    74d6:	8c 81       	ldd	r24, Y+4	; 0x04
    74d8:	86 95       	lsr	r24
    74da:	8c 83       	std	Y+4, r24	; 0x04
u16 UART_Frame_Sw(u8 data)//even partity
{
	u16 frame=0;
	u8 ones=0;
	frame=data<<1;//stop bit +data
	while(data)
    74dc:	8c 81       	ldd	r24, Y+4	; 0x04
    74de:	88 23       	and	r24, r24
    74e0:	81 f7       	brne	.-32     	; 0x74c2 <UART_Frame_Sw+0x24>
		{
			ones++;
		}
		data=data>>1;
	}
	if(ones%2==1)
    74e2:	89 81       	ldd	r24, Y+1	; 0x01
    74e4:	88 2f       	mov	r24, r24
    74e6:	90 e0       	ldi	r25, 0x00	; 0
    74e8:	81 70       	andi	r24, 0x01	; 1
    74ea:	90 70       	andi	r25, 0x00	; 0
    74ec:	88 23       	and	r24, r24
    74ee:	29 f0       	breq	.+10     	; 0x74fa <UART_Frame_Sw+0x5c>
	{
		SET_BIT(frame,9);//Parity =1;
    74f0:	8a 81       	ldd	r24, Y+2	; 0x02
    74f2:	9b 81       	ldd	r25, Y+3	; 0x03
    74f4:	92 60       	ori	r25, 0x02	; 2
    74f6:	9b 83       	std	Y+3, r25	; 0x03
    74f8:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	SET_BIT(frame,10);
    74fa:	8a 81       	ldd	r24, Y+2	; 0x02
    74fc:	9b 81       	ldd	r25, Y+3	; 0x03
    74fe:	94 60       	ori	r25, 0x04	; 4
    7500:	9b 83       	std	Y+3, r25	; 0x03
    7502:	8a 83       	std	Y+2, r24	; 0x02
	return frame;
    7504:	8a 81       	ldd	r24, Y+2	; 0x02
    7506:	9b 81       	ldd	r25, Y+3	; 0x03
}
    7508:	0f 90       	pop	r0
    750a:	0f 90       	pop	r0
    750c:	0f 90       	pop	r0
    750e:	0f 90       	pop	r0
    7510:	cf 91       	pop	r28
    7512:	df 91       	pop	r29
    7514:	08 95       	ret

00007516 <UART_Send_Sw>:

#endif


void UART_Send_Sw(u16 frame,u32 baudrate)
{
    7516:	af 92       	push	r10
    7518:	bf 92       	push	r11
    751a:	cf 92       	push	r12
    751c:	df 92       	push	r13
    751e:	ef 92       	push	r14
    7520:	ff 92       	push	r15
    7522:	0f 93       	push	r16
    7524:	1f 93       	push	r17
    7526:	df 93       	push	r29
    7528:	cf 93       	push	r28
    752a:	cd b7       	in	r28, 0x3d	; 61
    752c:	de b7       	in	r29, 0x3e	; 62
    752e:	a5 97       	sbiw	r28, 0x25	; 37
    7530:	0f b6       	in	r0, 0x3f	; 63
    7532:	f8 94       	cli
    7534:	de bf       	out	0x3e, r29	; 62
    7536:	0f be       	out	0x3f, r0	; 63
    7538:	cd bf       	out	0x3d, r28	; 61
    753a:	99 a3       	std	Y+33, r25	; 0x21
    753c:	88 a3       	std	Y+32, r24	; 0x20
    753e:	4a a3       	std	Y+34, r20	; 0x22
    7540:	5b a3       	std	Y+35, r21	; 0x23
    7542:	6c a3       	std	Y+36, r22	; 0x24
    7544:	7d a3       	std	Y+37, r23	; 0x25
	u8 i;
	u8 Frame_bit=0;
    7546:	1e 8e       	std	Y+30, r1	; 0x1e
	u32 time_bit=(u32)1000000/baudrate;
    7548:	80 e4       	ldi	r24, 0x40	; 64
    754a:	92 e4       	ldi	r25, 0x42	; 66
    754c:	af e0       	ldi	r26, 0x0F	; 15
    754e:	b0 e0       	ldi	r27, 0x00	; 0
    7550:	2a a1       	ldd	r18, Y+34	; 0x22
    7552:	3b a1       	ldd	r19, Y+35	; 0x23
    7554:	4c a1       	ldd	r20, Y+36	; 0x24
    7556:	5d a1       	ldd	r21, Y+37	; 0x25
    7558:	bc 01       	movw	r22, r24
    755a:	cd 01       	movw	r24, r26
    755c:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <__udivmodsi4>
    7560:	da 01       	movw	r26, r20
    7562:	c9 01       	movw	r24, r18
    7564:	8a 8f       	std	Y+26, r24	; 0x1a
    7566:	9b 8f       	std	Y+27, r25	; 0x1b
    7568:	ac 8f       	std	Y+28, r26	; 0x1c
    756a:	bd 8f       	std	Y+29, r27	; 0x1d
	for ( i=0;i<11;i++)
    756c:	1f 8e       	std	Y+31, r1	; 0x1f
    756e:	e5 c0       	rjmp	.+458    	; 0x773a <UART_Send_Sw+0x224>
	{
		//Frame_bit=READ_BIT(frame,i);
		DIO_WritePin(PIND1,READ_BIT(frame,i));
    7570:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7572:	28 2f       	mov	r18, r24
    7574:	30 e0       	ldi	r19, 0x00	; 0
    7576:	88 a1       	ldd	r24, Y+32	; 0x20
    7578:	99 a1       	ldd	r25, Y+33	; 0x21
    757a:	02 c0       	rjmp	.+4      	; 0x7580 <UART_Send_Sw+0x6a>
    757c:	96 95       	lsr	r25
    757e:	87 95       	ror	r24
    7580:	2a 95       	dec	r18
    7582:	e2 f7       	brpl	.-8      	; 0x757c <UART_Send_Sw+0x66>
    7584:	98 2f       	mov	r25, r24
    7586:	91 70       	andi	r25, 0x01	; 1
    7588:	89 e1       	ldi	r24, 0x19	; 25
    758a:	69 2f       	mov	r22, r25
    758c:	0e 94 4d 1a 	call	0x349a	; 0x349a <DIO_WritePin>
		//_delay_us(104);
		for(u8 j=0;j<time_bit;j++)
    7590:	19 8e       	std	Y+25, r1	; 0x19
    7592:	c1 c0       	rjmp	.+386    	; 0x7716 <UART_Send_Sw+0x200>
    7594:	80 e0       	ldi	r24, 0x00	; 0
    7596:	90 e0       	ldi	r25, 0x00	; 0
    7598:	a0 e8       	ldi	r26, 0x80	; 128
    759a:	bf e3       	ldi	r27, 0x3F	; 63
    759c:	8d 8b       	std	Y+21, r24	; 0x15
    759e:	9e 8b       	std	Y+22, r25	; 0x16
    75a0:	af 8b       	std	Y+23, r26	; 0x17
    75a2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    75a4:	6d 89       	ldd	r22, Y+21	; 0x15
    75a6:	7e 89       	ldd	r23, Y+22	; 0x16
    75a8:	8f 89       	ldd	r24, Y+23	; 0x17
    75aa:	98 8d       	ldd	r25, Y+24	; 0x18
    75ac:	2b ea       	ldi	r18, 0xAB	; 171
    75ae:	3a ea       	ldi	r19, 0xAA	; 170
    75b0:	4a e2       	ldi	r20, 0x2A	; 42
    75b2:	50 e4       	ldi	r21, 0x40	; 64
    75b4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    75b8:	dc 01       	movw	r26, r24
    75ba:	cb 01       	movw	r24, r22
    75bc:	89 8b       	std	Y+17, r24	; 0x11
    75be:	9a 8b       	std	Y+18, r25	; 0x12
    75c0:	ab 8b       	std	Y+19, r26	; 0x13
    75c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    75c4:	69 89       	ldd	r22, Y+17	; 0x11
    75c6:	7a 89       	ldd	r23, Y+18	; 0x12
    75c8:	8b 89       	ldd	r24, Y+19	; 0x13
    75ca:	9c 89       	ldd	r25, Y+20	; 0x14
    75cc:	20 e0       	ldi	r18, 0x00	; 0
    75ce:	30 e0       	ldi	r19, 0x00	; 0
    75d0:	40 e8       	ldi	r20, 0x80	; 128
    75d2:	5f e3       	ldi	r21, 0x3F	; 63
    75d4:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    75d8:	88 23       	and	r24, r24
    75da:	1c f4       	brge	.+6      	; 0x75e2 <UART_Send_Sw+0xcc>
		__ticks = 1;
    75dc:	81 e0       	ldi	r24, 0x01	; 1
    75de:	88 8b       	std	Y+16, r24	; 0x10
    75e0:	91 c0       	rjmp	.+290    	; 0x7704 <UART_Send_Sw+0x1ee>
	else if (__tmp > 255)
    75e2:	69 89       	ldd	r22, Y+17	; 0x11
    75e4:	7a 89       	ldd	r23, Y+18	; 0x12
    75e6:	8b 89       	ldd	r24, Y+19	; 0x13
    75e8:	9c 89       	ldd	r25, Y+20	; 0x14
    75ea:	20 e0       	ldi	r18, 0x00	; 0
    75ec:	30 e0       	ldi	r19, 0x00	; 0
    75ee:	4f e7       	ldi	r20, 0x7F	; 127
    75f0:	53 e4       	ldi	r21, 0x43	; 67
    75f2:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    75f6:	18 16       	cp	r1, r24
    75f8:	0c f0       	brlt	.+2      	; 0x75fc <UART_Send_Sw+0xe6>
    75fa:	7b c0       	rjmp	.+246    	; 0x76f2 <UART_Send_Sw+0x1dc>
	{
		_delay_ms(__us / 1000.0);
    75fc:	6d 89       	ldd	r22, Y+21	; 0x15
    75fe:	7e 89       	ldd	r23, Y+22	; 0x16
    7600:	8f 89       	ldd	r24, Y+23	; 0x17
    7602:	98 8d       	ldd	r25, Y+24	; 0x18
    7604:	20 e0       	ldi	r18, 0x00	; 0
    7606:	30 e0       	ldi	r19, 0x00	; 0
    7608:	4a e7       	ldi	r20, 0x7A	; 122
    760a:	54 e4       	ldi	r21, 0x44	; 68
    760c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__divsf3>
    7610:	dc 01       	movw	r26, r24
    7612:	cb 01       	movw	r24, r22
    7614:	8c 87       	std	Y+12, r24	; 0x0c
    7616:	9d 87       	std	Y+13, r25	; 0x0d
    7618:	ae 87       	std	Y+14, r26	; 0x0e
    761a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    761c:	6c 85       	ldd	r22, Y+12	; 0x0c
    761e:	7d 85       	ldd	r23, Y+13	; 0x0d
    7620:	8e 85       	ldd	r24, Y+14	; 0x0e
    7622:	9f 85       	ldd	r25, Y+15	; 0x0f
    7624:	20 e0       	ldi	r18, 0x00	; 0
    7626:	30 e0       	ldi	r19, 0x00	; 0
    7628:	4a ef       	ldi	r20, 0xFA	; 250
    762a:	54 e4       	ldi	r21, 0x44	; 68
    762c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    7630:	dc 01       	movw	r26, r24
    7632:	cb 01       	movw	r24, r22
    7634:	88 87       	std	Y+8, r24	; 0x08
    7636:	99 87       	std	Y+9, r25	; 0x09
    7638:	aa 87       	std	Y+10, r26	; 0x0a
    763a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    763c:	68 85       	ldd	r22, Y+8	; 0x08
    763e:	79 85       	ldd	r23, Y+9	; 0x09
    7640:	8a 85       	ldd	r24, Y+10	; 0x0a
    7642:	9b 85       	ldd	r25, Y+11	; 0x0b
    7644:	20 e0       	ldi	r18, 0x00	; 0
    7646:	30 e0       	ldi	r19, 0x00	; 0
    7648:	40 e8       	ldi	r20, 0x80	; 128
    764a:	5f e3       	ldi	r21, 0x3F	; 63
    764c:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    7650:	88 23       	and	r24, r24
    7652:	2c f4       	brge	.+10     	; 0x765e <UART_Send_Sw+0x148>
		__ticks = 1;
    7654:	81 e0       	ldi	r24, 0x01	; 1
    7656:	90 e0       	ldi	r25, 0x00	; 0
    7658:	9f 83       	std	Y+7, r25	; 0x07
    765a:	8e 83       	std	Y+6, r24	; 0x06
    765c:	3f c0       	rjmp	.+126    	; 0x76dc <UART_Send_Sw+0x1c6>
	else if (__tmp > 65535)
    765e:	68 85       	ldd	r22, Y+8	; 0x08
    7660:	79 85       	ldd	r23, Y+9	; 0x09
    7662:	8a 85       	ldd	r24, Y+10	; 0x0a
    7664:	9b 85       	ldd	r25, Y+11	; 0x0b
    7666:	20 e0       	ldi	r18, 0x00	; 0
    7668:	3f ef       	ldi	r19, 0xFF	; 255
    766a:	4f e7       	ldi	r20, 0x7F	; 127
    766c:	57 e4       	ldi	r21, 0x47	; 71
    766e:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    7672:	18 16       	cp	r1, r24
    7674:	4c f5       	brge	.+82     	; 0x76c8 <UART_Send_Sw+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7676:	6c 85       	ldd	r22, Y+12	; 0x0c
    7678:	7d 85       	ldd	r23, Y+13	; 0x0d
    767a:	8e 85       	ldd	r24, Y+14	; 0x0e
    767c:	9f 85       	ldd	r25, Y+15	; 0x0f
    767e:	20 e0       	ldi	r18, 0x00	; 0
    7680:	30 e0       	ldi	r19, 0x00	; 0
    7682:	40 e2       	ldi	r20, 0x20	; 32
    7684:	51 e4       	ldi	r21, 0x41	; 65
    7686:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    768a:	dc 01       	movw	r26, r24
    768c:	cb 01       	movw	r24, r22
    768e:	bc 01       	movw	r22, r24
    7690:	cd 01       	movw	r24, r26
    7692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7696:	dc 01       	movw	r26, r24
    7698:	cb 01       	movw	r24, r22
    769a:	9f 83       	std	Y+7, r25	; 0x07
    769c:	8e 83       	std	Y+6, r24	; 0x06
    769e:	0f c0       	rjmp	.+30     	; 0x76be <UART_Send_Sw+0x1a8>
    76a0:	88 ec       	ldi	r24, 0xC8	; 200
    76a2:	90 e0       	ldi	r25, 0x00	; 0
    76a4:	9d 83       	std	Y+5, r25	; 0x05
    76a6:	8c 83       	std	Y+4, r24	; 0x04
    76a8:	8c 81       	ldd	r24, Y+4	; 0x04
    76aa:	9d 81       	ldd	r25, Y+5	; 0x05
    76ac:	01 97       	sbiw	r24, 0x01	; 1
    76ae:	f1 f7       	brne	.-4      	; 0x76ac <UART_Send_Sw+0x196>
    76b0:	9d 83       	std	Y+5, r25	; 0x05
    76b2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76b4:	8e 81       	ldd	r24, Y+6	; 0x06
    76b6:	9f 81       	ldd	r25, Y+7	; 0x07
    76b8:	01 97       	sbiw	r24, 0x01	; 1
    76ba:	9f 83       	std	Y+7, r25	; 0x07
    76bc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76be:	8e 81       	ldd	r24, Y+6	; 0x06
    76c0:	9f 81       	ldd	r25, Y+7	; 0x07
    76c2:	00 97       	sbiw	r24, 0x00	; 0
    76c4:	69 f7       	brne	.-38     	; 0x76a0 <UART_Send_Sw+0x18a>
    76c6:	24 c0       	rjmp	.+72     	; 0x7710 <UART_Send_Sw+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76c8:	68 85       	ldd	r22, Y+8	; 0x08
    76ca:	79 85       	ldd	r23, Y+9	; 0x09
    76cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    76ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    76d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    76d4:	dc 01       	movw	r26, r24
    76d6:	cb 01       	movw	r24, r22
    76d8:	9f 83       	std	Y+7, r25	; 0x07
    76da:	8e 83       	std	Y+6, r24	; 0x06
    76dc:	8e 81       	ldd	r24, Y+6	; 0x06
    76de:	9f 81       	ldd	r25, Y+7	; 0x07
    76e0:	9b 83       	std	Y+3, r25	; 0x03
    76e2:	8a 83       	std	Y+2, r24	; 0x02
    76e4:	8a 81       	ldd	r24, Y+2	; 0x02
    76e6:	9b 81       	ldd	r25, Y+3	; 0x03
    76e8:	01 97       	sbiw	r24, 0x01	; 1
    76ea:	f1 f7       	brne	.-4      	; 0x76e8 <UART_Send_Sw+0x1d2>
    76ec:	9b 83       	std	Y+3, r25	; 0x03
    76ee:	8a 83       	std	Y+2, r24	; 0x02
    76f0:	0f c0       	rjmp	.+30     	; 0x7710 <UART_Send_Sw+0x1fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    76f2:	69 89       	ldd	r22, Y+17	; 0x11
    76f4:	7a 89       	ldd	r23, Y+18	; 0x12
    76f6:	8b 89       	ldd	r24, Y+19	; 0x13
    76f8:	9c 89       	ldd	r25, Y+20	; 0x14
    76fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    76fe:	dc 01       	movw	r26, r24
    7700:	cb 01       	movw	r24, r22
    7702:	88 8b       	std	Y+16, r24	; 0x10
    7704:	88 89       	ldd	r24, Y+16	; 0x10
    7706:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    7708:	89 81       	ldd	r24, Y+1	; 0x01
    770a:	8a 95       	dec	r24
    770c:	f1 f7       	brne	.-4      	; 0x770a <UART_Send_Sw+0x1f4>
    770e:	89 83       	std	Y+1, r24	; 0x01
    7710:	89 8d       	ldd	r24, Y+25	; 0x19
    7712:	8f 5f       	subi	r24, 0xFF	; 255
    7714:	89 8f       	std	Y+25, r24	; 0x19
    7716:	89 8d       	ldd	r24, Y+25	; 0x19
    7718:	28 2f       	mov	r18, r24
    771a:	30 e0       	ldi	r19, 0x00	; 0
    771c:	40 e0       	ldi	r20, 0x00	; 0
    771e:	50 e0       	ldi	r21, 0x00	; 0
    7720:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7722:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7724:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7726:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7728:	28 17       	cp	r18, r24
    772a:	39 07       	cpc	r19, r25
    772c:	4a 07       	cpc	r20, r26
    772e:	5b 07       	cpc	r21, r27
    7730:	08 f4       	brcc	.+2      	; 0x7734 <UART_Send_Sw+0x21e>
    7732:	30 cf       	rjmp	.-416    	; 0x7594 <UART_Send_Sw+0x7e>
void UART_Send_Sw(u16 frame,u32 baudrate)
{
	u8 i;
	u8 Frame_bit=0;
	u32 time_bit=(u32)1000000/baudrate;
	for ( i=0;i<11;i++)
    7734:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7736:	8f 5f       	subi	r24, 0xFF	; 255
    7738:	8f 8f       	std	Y+31, r24	; 0x1f
    773a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    773c:	8b 30       	cpi	r24, 0x0B	; 11
    773e:	08 f4       	brcc	.+2      	; 0x7742 <UART_Send_Sw+0x22c>
    7740:	17 cf       	rjmp	.-466    	; 0x7570 <UART_Send_Sw+0x5a>
		for(u8 j=0;j<time_bit;j++)
		{
			_delay_us(1);
		}
	}
	LCD_GoTO(1,0);
    7742:	81 e0       	ldi	r24, 0x01	; 1
    7744:	60 e0       	ldi	r22, 0x00	; 0
    7746:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteNum(READ_BIT(frame,i-1));
    774a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    774c:	88 2f       	mov	r24, r24
    774e:	90 e0       	ldi	r25, 0x00	; 0
    7750:	9c 01       	movw	r18, r24
    7752:	21 50       	subi	r18, 0x01	; 1
    7754:	30 40       	sbci	r19, 0x00	; 0
    7756:	88 a1       	ldd	r24, Y+32	; 0x20
    7758:	99 a1       	ldd	r25, Y+33	; 0x21
    775a:	02 c0       	rjmp	.+4      	; 0x7760 <UART_Send_Sw+0x24a>
    775c:	96 95       	lsr	r25
    775e:	87 95       	ror	r24
    7760:	2a 95       	dec	r18
    7762:	e2 f7       	brpl	.-8      	; 0x775c <UART_Send_Sw+0x246>
    7764:	9c 01       	movw	r18, r24
    7766:	40 e0       	ldi	r20, 0x00	; 0
    7768:	50 e0       	ldi	r21, 0x00	; 0
    776a:	60 e0       	ldi	r22, 0x00	; 0
    776c:	70 e0       	ldi	r23, 0x00	; 0
    776e:	80 e0       	ldi	r24, 0x00	; 0
    7770:	90 e0       	ldi	r25, 0x00	; 0
    7772:	aa 24       	eor	r10, r10
    7774:	a3 94       	inc	r10
    7776:	a2 22       	and	r10, r18
    7778:	bb 24       	eor	r11, r11
    777a:	b3 22       	and	r11, r19
    777c:	cc 24       	eor	r12, r12
    777e:	c4 22       	and	r12, r20
    7780:	dd 24       	eor	r13, r13
    7782:	d5 22       	and	r13, r21
    7784:	ee 24       	eor	r14, r14
    7786:	e6 22       	and	r14, r22
    7788:	ff 24       	eor	r15, r15
    778a:	f7 22       	and	r15, r23
    778c:	08 2f       	mov	r16, r24
    778e:	00 70       	andi	r16, 0x00	; 0
    7790:	19 2f       	mov	r17, r25
    7792:	10 70       	andi	r17, 0x00	; 0
    7794:	2a 2d       	mov	r18, r10
    7796:	3b 2d       	mov	r19, r11
    7798:	4c 2d       	mov	r20, r12
    779a:	5d 2d       	mov	r21, r13
    779c:	6e 2d       	mov	r22, r14
    779e:	7f 2d       	mov	r23, r15
    77a0:	80 2f       	mov	r24, r16
    77a2:	91 2f       	mov	r25, r17
    77a4:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <LCD_WriteNum>
	LCD_GoTO(1,5);
    77a8:	81 e0       	ldi	r24, 0x01	; 1
    77aa:	65 e0       	ldi	r22, 0x05	; 5
    77ac:	0e 94 65 2e 	call	0x5cca	; 0x5cca <LCD_GoTO>
	LCD_WriteNum(i);
    77b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    77b2:	a8 2e       	mov	r10, r24
    77b4:	bb 24       	eor	r11, r11
    77b6:	cc 24       	eor	r12, r12
    77b8:	dd 24       	eor	r13, r13
    77ba:	ee 24       	eor	r14, r14
    77bc:	ff 24       	eor	r15, r15
    77be:	87 01       	movw	r16, r14
    77c0:	2a 2d       	mov	r18, r10
    77c2:	3b 2d       	mov	r19, r11
    77c4:	4c 2d       	mov	r20, r12
    77c6:	5d 2d       	mov	r21, r13
    77c8:	6e 2d       	mov	r22, r14
    77ca:	7f 2d       	mov	r23, r15
    77cc:	80 2f       	mov	r24, r16
    77ce:	91 2f       	mov	r25, r17
    77d0:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <LCD_WriteNum>
	
	
	
}
    77d4:	a5 96       	adiw	r28, 0x25	; 37
    77d6:	0f b6       	in	r0, 0x3f	; 63
    77d8:	f8 94       	cli
    77da:	de bf       	out	0x3e, r29	; 62
    77dc:	0f be       	out	0x3f, r0	; 63
    77de:	cd bf       	out	0x3d, r28	; 61
    77e0:	cf 91       	pop	r28
    77e2:	df 91       	pop	r29
    77e4:	1f 91       	pop	r17
    77e6:	0f 91       	pop	r16
    77e8:	ff 90       	pop	r15
    77ea:	ef 90       	pop	r14
    77ec:	df 90       	pop	r13
    77ee:	cf 90       	pop	r12
    77f0:	bf 90       	pop	r11
    77f2:	af 90       	pop	r10
    77f4:	08 95       	ret

000077f6 <UART_SendString>:
/* block CPU */
void UART_SendString(u8*str)
{
    77f6:	df 93       	push	r29
    77f8:	cf 93       	push	r28
    77fa:	00 d0       	rcall	.+0      	; 0x77fc <UART_SendString+0x6>
    77fc:	0f 92       	push	r0
    77fe:	cd b7       	in	r28, 0x3d	; 61
    7800:	de b7       	in	r29, 0x3e	; 62
    7802:	9b 83       	std	Y+3, r25	; 0x03
    7804:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0;str[i];i++)
    7806:	19 82       	std	Y+1, r1	; 0x01
    7808:	0e c0       	rjmp	.+28     	; 0x7826 <UART_SendString+0x30>
	{
		UART_Send(str[i]);
    780a:	89 81       	ldd	r24, Y+1	; 0x01
    780c:	28 2f       	mov	r18, r24
    780e:	30 e0       	ldi	r19, 0x00	; 0
    7810:	8a 81       	ldd	r24, Y+2	; 0x02
    7812:	9b 81       	ldd	r25, Y+3	; 0x03
    7814:	fc 01       	movw	r30, r24
    7816:	e2 0f       	add	r30, r18
    7818:	f3 1f       	adc	r31, r19
    781a:	80 81       	ld	r24, Z
    781c:	0e 94 2a 39 	call	0x7254	; 0x7254 <UART_Send>
}
/* block CPU */
void UART_SendString(u8*str)
{
	u8 i;
	for(i=0;str[i];i++)
    7820:	89 81       	ldd	r24, Y+1	; 0x01
    7822:	8f 5f       	subi	r24, 0xFF	; 255
    7824:	89 83       	std	Y+1, r24	; 0x01
    7826:	89 81       	ldd	r24, Y+1	; 0x01
    7828:	28 2f       	mov	r18, r24
    782a:	30 e0       	ldi	r19, 0x00	; 0
    782c:	8a 81       	ldd	r24, Y+2	; 0x02
    782e:	9b 81       	ldd	r25, Y+3	; 0x03
    7830:	fc 01       	movw	r30, r24
    7832:	e2 0f       	add	r30, r18
    7834:	f3 1f       	adc	r31, r19
    7836:	80 81       	ld	r24, Z
    7838:	88 23       	and	r24, r24
    783a:	39 f7       	brne	.-50     	; 0x780a <UART_SendString+0x14>
	{
		UART_Send(str[i]);
	}
	
}
    783c:	0f 90       	pop	r0
    783e:	0f 90       	pop	r0
    7840:	0f 90       	pop	r0
    7842:	cf 91       	pop	r28
    7844:	df 91       	pop	r29
    7846:	08 95       	ret

00007848 <UART_ReceiveString>:
    }
}
*/
/* block CPU */
void UART_ReceiveString(u8*str)
{
    7848:	0f 93       	push	r16
    784a:	1f 93       	push	r17
    784c:	df 93       	push	r29
    784e:	cf 93       	push	r28
    7850:	00 d0       	rcall	.+0      	; 0x7852 <UART_ReceiveString+0xa>
    7852:	00 d0       	rcall	.+0      	; 0x7854 <UART_ReceiveString+0xc>
    7854:	cd b7       	in	r28, 0x3d	; 61
    7856:	de b7       	in	r29, 0x3e	; 62
    7858:	9c 83       	std	Y+4, r25	; 0x04
    785a:	8b 83       	std	Y+3, r24	; 0x03
	u8 i=0,c;
    785c:	1a 82       	std	Y+2, r1	; 0x02
	str[0]=UART_Receive();
    785e:	0e 94 44 39 	call	0x7288	; 0x7288 <UART_Receive>
    7862:	eb 81       	ldd	r30, Y+3	; 0x03
    7864:	fc 81       	ldd	r31, Y+4	; 0x04
    7866:	80 83       	st	Z, r24
    7868:	0f c0       	rjmp	.+30     	; 0x7888 <UART_ReceiveString+0x40>
	while(str[i]!=0xD)//0xD)//Enter in terminal
	{
		i++;
    786a:	8a 81       	ldd	r24, Y+2	; 0x02
    786c:	8f 5f       	subi	r24, 0xFF	; 255
    786e:	8a 83       	std	Y+2, r24	; 0x02
		str[i]=UART_Receive();
    7870:	8a 81       	ldd	r24, Y+2	; 0x02
    7872:	28 2f       	mov	r18, r24
    7874:	30 e0       	ldi	r19, 0x00	; 0
    7876:	8b 81       	ldd	r24, Y+3	; 0x03
    7878:	9c 81       	ldd	r25, Y+4	; 0x04
    787a:	8c 01       	movw	r16, r24
    787c:	02 0f       	add	r16, r18
    787e:	13 1f       	adc	r17, r19
    7880:	0e 94 44 39 	call	0x7288	; 0x7288 <UART_Receive>
    7884:	f8 01       	movw	r30, r16
    7886:	80 83       	st	Z, r24
/* block CPU */
void UART_ReceiveString(u8*str)
{
	u8 i=0,c;
	str[0]=UART_Receive();
	while(str[i]!=0xD)//0xD)//Enter in terminal
    7888:	8a 81       	ldd	r24, Y+2	; 0x02
    788a:	28 2f       	mov	r18, r24
    788c:	30 e0       	ldi	r19, 0x00	; 0
    788e:	8b 81       	ldd	r24, Y+3	; 0x03
    7890:	9c 81       	ldd	r25, Y+4	; 0x04
    7892:	fc 01       	movw	r30, r24
    7894:	e2 0f       	add	r30, r18
    7896:	f3 1f       	adc	r31, r19
    7898:	80 81       	ld	r24, Z
    789a:	8d 30       	cpi	r24, 0x0D	; 13
    789c:	31 f7       	brne	.-52     	; 0x786a <UART_ReceiveString+0x22>
	{
		i++;
		str[i]=UART_Receive();
		
	}
	str[i]=0;
    789e:	8a 81       	ldd	r24, Y+2	; 0x02
    78a0:	28 2f       	mov	r18, r24
    78a2:	30 e0       	ldi	r19, 0x00	; 0
    78a4:	8b 81       	ldd	r24, Y+3	; 0x03
    78a6:	9c 81       	ldd	r25, Y+4	; 0x04
    78a8:	fc 01       	movw	r30, r24
    78aa:	e2 0f       	add	r30, r18
    78ac:	f3 1f       	adc	r31, r19
    78ae:	10 82       	st	Z, r1
	//c=UART_Receive();//In Doclight Only
}
    78b0:	0f 90       	pop	r0
    78b2:	0f 90       	pop	r0
    78b4:	0f 90       	pop	r0
    78b6:	0f 90       	pop	r0
    78b8:	cf 91       	pop	r28
    78ba:	df 91       	pop	r29
    78bc:	1f 91       	pop	r17
    78be:	0f 91       	pop	r16
    78c0:	08 95       	ret

000078c2 <UART_SendNum1>:

/* block CPU */
void UART_SendNum1(u32 num)//1450
{
    78c2:	df 93       	push	r29
    78c4:	cf 93       	push	r28
    78c6:	00 d0       	rcall	.+0      	; 0x78c8 <UART_SendNum1+0x6>
    78c8:	00 d0       	rcall	.+0      	; 0x78ca <UART_SendNum1+0x8>
    78ca:	00 d0       	rcall	.+0      	; 0x78cc <UART_SendNum1+0xa>
    78cc:	cd b7       	in	r28, 0x3d	; 61
    78ce:	de b7       	in	r29, 0x3e	; 62
    78d0:	6b 83       	std	Y+3, r22	; 0x03
    78d2:	7c 83       	std	Y+4, r23	; 0x04
    78d4:	8d 83       	std	Y+5, r24	; 0x05
    78d6:	9e 83       	std	Y+6, r25	; 0x06
	u8 data_frame;
	u8 i=0;
    78d8:	19 82       	std	Y+1, r1	; 0x01
	
// 	LCD_GoTO(0,1);
// 	LCD_WriteNum(num);
// 	LCD_WriteString("   ");
	
	for(i=0;i<4;i++)
    78da:	19 82       	std	Y+1, r1	; 0x01
    78dc:	14 c0       	rjmp	.+40     	; 0x7906 <UART_SendNum1+0x44>
	{
		data_frame=(u8)num;
    78de:	8b 81       	ldd	r24, Y+3	; 0x03
    78e0:	8a 83       	std	Y+2, r24	; 0x02
			
		UART_Send(data_frame);
    78e2:	8a 81       	ldd	r24, Y+2	; 0x02
    78e4:	0e 94 2a 39 	call	0x7254	; 0x7254 <UART_Send>
		num>>=8;
    78e8:	8b 81       	ldd	r24, Y+3	; 0x03
    78ea:	9c 81       	ldd	r25, Y+4	; 0x04
    78ec:	ad 81       	ldd	r26, Y+5	; 0x05
    78ee:	be 81       	ldd	r27, Y+6	; 0x06
    78f0:	89 2f       	mov	r24, r25
    78f2:	9a 2f       	mov	r25, r26
    78f4:	ab 2f       	mov	r26, r27
    78f6:	bb 27       	eor	r27, r27
    78f8:	8b 83       	std	Y+3, r24	; 0x03
    78fa:	9c 83       	std	Y+4, r25	; 0x04
    78fc:	ad 83       	std	Y+5, r26	; 0x05
    78fe:	be 83       	std	Y+6, r27	; 0x06
	
// 	LCD_GoTO(0,1);
// 	LCD_WriteNum(num);
// 	LCD_WriteString("   ");
	
	for(i=0;i<4;i++)
    7900:	89 81       	ldd	r24, Y+1	; 0x01
    7902:	8f 5f       	subi	r24, 0xFF	; 255
    7904:	89 83       	std	Y+1, r24	; 0x01
    7906:	89 81       	ldd	r24, Y+1	; 0x01
    7908:	84 30       	cpi	r24, 0x04	; 4
    790a:	48 f3       	brcs	.-46     	; 0x78de <UART_SendNum1+0x1c>
		
	
		
	}
	
}
    790c:	26 96       	adiw	r28, 0x06	; 6
    790e:	0f b6       	in	r0, 0x3f	; 63
    7910:	f8 94       	cli
    7912:	de bf       	out	0x3e, r29	; 62
    7914:	0f be       	out	0x3f, r0	; 63
    7916:	cd bf       	out	0x3d, r28	; 61
    7918:	cf 91       	pop	r28
    791a:	df 91       	pop	r29
    791c:	08 95       	ret

0000791e <WDT_Set>:
#include "WDT_Interface.h"



void WDT_Set(WDT_Timeout_type Timeout)
{
    791e:	df 93       	push	r29
    7920:	cf 93       	push	r28
    7922:	00 d0       	rcall	.+0      	; 0x7924 <WDT_Set+0x6>
    7924:	cd b7       	in	r28, 0x3d	; 61
    7926:	de b7       	in	r29, 0x3e	; 62
    7928:	8a 83       	std	Y+2, r24	; 0x02
    u8 reg=0;
    792a:	19 82       	std	Y+1, r1	; 0x01
    reg&=0xf8;
    792c:	89 81       	ldd	r24, Y+1	; 0x01
    792e:	88 7f       	andi	r24, 0xF8	; 248
    7930:	89 83       	std	Y+1, r24	; 0x01
    reg|=Timeout;
    7932:	99 81       	ldd	r25, Y+1	; 0x01
    7934:	8a 81       	ldd	r24, Y+2	; 0x02
    7936:	89 2b       	or	r24, r25
    7938:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(reg,WDE);
    793a:	89 81       	ldd	r24, Y+1	; 0x01
    793c:	88 60       	ori	r24, 0x08	; 8
    793e:	89 83       	std	Y+1, r24	; 0x01
    WDTCR=reg;
    7940:	e1 e4       	ldi	r30, 0x41	; 65
    7942:	f0 e0       	ldi	r31, 0x00	; 0
    7944:	89 81       	ldd	r24, Y+1	; 0x01
    7946:	80 83       	st	Z, r24

}
    7948:	0f 90       	pop	r0
    794a:	0f 90       	pop	r0
    794c:	cf 91       	pop	r28
    794e:	df 91       	pop	r29
    7950:	08 95       	ret

00007952 <WDT_Stop>:

void WDT_Stop(void)
{
    7952:	df 93       	push	r29
    7954:	cf 93       	push	r28
    7956:	0f 92       	push	r0
    7958:	cd b7       	in	r28, 0x3d	; 61
    795a:	de b7       	in	r29, 0x3e	; 62
	u8 reg=0;
    795c:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(reg,WDE);
    795e:	89 81       	ldd	r24, Y+1	; 0x01
    7960:	88 60       	ori	r24, 0x08	; 8
    7962:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(reg,WDTOE);
    7964:	89 81       	ldd	r24, Y+1	; 0x01
    7966:	80 61       	ori	r24, 0x10	; 16
    7968:	89 83       	std	Y+1, r24	; 0x01

	WDTCR=reg;
    796a:	e1 e4       	ldi	r30, 0x41	; 65
    796c:	f0 e0       	ldi	r31, 0x00	; 0
    796e:	89 81       	ldd	r24, Y+1	; 0x01
    7970:	80 83       	st	Z, r24
	GLOBAL_DISABLE();
    7972:	f8 94       	cli
	WDTCR=0;
    7974:	e1 e4       	ldi	r30, 0x41	; 65
    7976:	f0 e0       	ldi	r31, 0x00	; 0
    7978:	10 82       	st	Z, r1
	GLOBAL_ENABLE();
    797a:	78 94       	sei
}
    797c:	0f 90       	pop	r0
    797e:	cf 91       	pop	r28
    7980:	df 91       	pop	r29
    7982:	08 95       	ret

00007984 <WDT_Reset>:
void WDT_Reset(WDT_Timeout_type Timeout)
{
    7984:	df 93       	push	r29
    7986:	cf 93       	push	r28
    7988:	0f 92       	push	r0
    798a:	cd b7       	in	r28, 0x3d	; 61
    798c:	de b7       	in	r29, 0x3e	; 62
    798e:	89 83       	std	Y+1, r24	; 0x01
	WDT_Stop();
    7990:	0e 94 a9 3c 	call	0x7952	; 0x7952 <WDT_Stop>
	WDT_Set(Timeout);
    7994:	89 81       	ldd	r24, Y+1	; 0x01
    7996:	0e 94 8f 3c 	call	0x791e	; 0x791e <WDT_Set>

}
    799a:	0f 90       	pop	r0
    799c:	cf 91       	pop	r28
    799e:	df 91       	pop	r29
    79a0:	08 95       	ret

000079a2 <main>:




int main()
{
    79a2:	df 93       	push	r29
    79a4:	cf 93       	push	r28
    79a6:	00 d0       	rcall	.+0      	; 0x79a8 <main+0x6>
    79a8:	cd b7       	in	r28, 0x3d	; 61
    79aa:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
    79ac:	0e 94 31 1a 	call	0x3462	; 0x3462 <DIO_Init>
	LCD_Init();
    79b0:	0e 94 cf 2b 	call	0x579e	; 0x579e <LCD_Init>
	ADC_Init();
    79b4:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <ADC_Init>
	UART_Init();
    79b8:	0e 94 0a 39 	call	0x7214	; 0x7214 <UART_Init>
	//Temp_Init();
	FireAlarm_Init();
    79bc:	0e 94 08 20 	call	0x4010	; 0x4010 <FireAlarm_Init>
	I2C_Master_voidInit(50);
    79c0:	82 e3       	ldi	r24, 0x32	; 50
    79c2:	0e 94 b6 23 	call	0x476c	; 0x476c <I2C_Master_voidInit>
    GLOBAL_ENABLE();
    79c6:	78 94       	sei

	//GLOBAL_ENABLE();


u16 temp=10;
    79c8:	8a e0       	ldi	r24, 0x0A	; 10
    79ca:	90 e0       	ldi	r25, 0x00	; 0
    79cc:	9a 83       	std	Y+2, r25	; 0x02
    79ce:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		FILTER_Runnable();
    79d0:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <FILTER_Runnable>
		FireAlarm_Runnable();
    79d4:	0e 94 34 20 	call	0x4068	; 0x4068 <FireAlarm_Runnable>
    79d8:	fb cf       	rjmp	.-10     	; 0x79d0 <main+0x2e>

000079da <__mulsi3>:
    79da:	62 9f       	mul	r22, r18
    79dc:	d0 01       	movw	r26, r0
    79de:	73 9f       	mul	r23, r19
    79e0:	f0 01       	movw	r30, r0
    79e2:	82 9f       	mul	r24, r18
    79e4:	e0 0d       	add	r30, r0
    79e6:	f1 1d       	adc	r31, r1
    79e8:	64 9f       	mul	r22, r20
    79ea:	e0 0d       	add	r30, r0
    79ec:	f1 1d       	adc	r31, r1
    79ee:	92 9f       	mul	r25, r18
    79f0:	f0 0d       	add	r31, r0
    79f2:	83 9f       	mul	r24, r19
    79f4:	f0 0d       	add	r31, r0
    79f6:	74 9f       	mul	r23, r20
    79f8:	f0 0d       	add	r31, r0
    79fa:	65 9f       	mul	r22, r21
    79fc:	f0 0d       	add	r31, r0
    79fe:	99 27       	eor	r25, r25
    7a00:	72 9f       	mul	r23, r18
    7a02:	b0 0d       	add	r27, r0
    7a04:	e1 1d       	adc	r30, r1
    7a06:	f9 1f       	adc	r31, r25
    7a08:	63 9f       	mul	r22, r19
    7a0a:	b0 0d       	add	r27, r0
    7a0c:	e1 1d       	adc	r30, r1
    7a0e:	f9 1f       	adc	r31, r25
    7a10:	bd 01       	movw	r22, r26
    7a12:	cf 01       	movw	r24, r30
    7a14:	11 24       	eor	r1, r1
    7a16:	08 95       	ret

00007a18 <__udivmodhi4>:
    7a18:	aa 1b       	sub	r26, r26
    7a1a:	bb 1b       	sub	r27, r27
    7a1c:	51 e1       	ldi	r21, 0x11	; 17
    7a1e:	07 c0       	rjmp	.+14     	; 0x7a2e <__udivmodhi4_ep>

00007a20 <__udivmodhi4_loop>:
    7a20:	aa 1f       	adc	r26, r26
    7a22:	bb 1f       	adc	r27, r27
    7a24:	a6 17       	cp	r26, r22
    7a26:	b7 07       	cpc	r27, r23
    7a28:	10 f0       	brcs	.+4      	; 0x7a2e <__udivmodhi4_ep>
    7a2a:	a6 1b       	sub	r26, r22
    7a2c:	b7 0b       	sbc	r27, r23

00007a2e <__udivmodhi4_ep>:
    7a2e:	88 1f       	adc	r24, r24
    7a30:	99 1f       	adc	r25, r25
    7a32:	5a 95       	dec	r21
    7a34:	a9 f7       	brne	.-22     	; 0x7a20 <__udivmodhi4_loop>
    7a36:	80 95       	com	r24
    7a38:	90 95       	com	r25
    7a3a:	bc 01       	movw	r22, r24
    7a3c:	cd 01       	movw	r24, r26
    7a3e:	08 95       	ret

00007a40 <__udivmodsi4>:
    7a40:	a1 e2       	ldi	r26, 0x21	; 33
    7a42:	1a 2e       	mov	r1, r26
    7a44:	aa 1b       	sub	r26, r26
    7a46:	bb 1b       	sub	r27, r27
    7a48:	fd 01       	movw	r30, r26
    7a4a:	0d c0       	rjmp	.+26     	; 0x7a66 <__udivmodsi4_ep>

00007a4c <__udivmodsi4_loop>:
    7a4c:	aa 1f       	adc	r26, r26
    7a4e:	bb 1f       	adc	r27, r27
    7a50:	ee 1f       	adc	r30, r30
    7a52:	ff 1f       	adc	r31, r31
    7a54:	a2 17       	cp	r26, r18
    7a56:	b3 07       	cpc	r27, r19
    7a58:	e4 07       	cpc	r30, r20
    7a5a:	f5 07       	cpc	r31, r21
    7a5c:	20 f0       	brcs	.+8      	; 0x7a66 <__udivmodsi4_ep>
    7a5e:	a2 1b       	sub	r26, r18
    7a60:	b3 0b       	sbc	r27, r19
    7a62:	e4 0b       	sbc	r30, r20
    7a64:	f5 0b       	sbc	r31, r21

00007a66 <__udivmodsi4_ep>:
    7a66:	66 1f       	adc	r22, r22
    7a68:	77 1f       	adc	r23, r23
    7a6a:	88 1f       	adc	r24, r24
    7a6c:	99 1f       	adc	r25, r25
    7a6e:	1a 94       	dec	r1
    7a70:	69 f7       	brne	.-38     	; 0x7a4c <__udivmodsi4_loop>
    7a72:	60 95       	com	r22
    7a74:	70 95       	com	r23
    7a76:	80 95       	com	r24
    7a78:	90 95       	com	r25
    7a7a:	9b 01       	movw	r18, r22
    7a7c:	ac 01       	movw	r20, r24
    7a7e:	bd 01       	movw	r22, r26
    7a80:	cf 01       	movw	r24, r30
    7a82:	08 95       	ret

00007a84 <__divmodsi4>:
    7a84:	97 fb       	bst	r25, 7
    7a86:	09 2e       	mov	r0, r25
    7a88:	05 26       	eor	r0, r21
    7a8a:	0e d0       	rcall	.+28     	; 0x7aa8 <__divmodsi4_neg1>
    7a8c:	57 fd       	sbrc	r21, 7
    7a8e:	04 d0       	rcall	.+8      	; 0x7a98 <__divmodsi4_neg2>
    7a90:	d7 df       	rcall	.-82     	; 0x7a40 <__udivmodsi4>
    7a92:	0a d0       	rcall	.+20     	; 0x7aa8 <__divmodsi4_neg1>
    7a94:	00 1c       	adc	r0, r0
    7a96:	38 f4       	brcc	.+14     	; 0x7aa6 <__divmodsi4_exit>

00007a98 <__divmodsi4_neg2>:
    7a98:	50 95       	com	r21
    7a9a:	40 95       	com	r20
    7a9c:	30 95       	com	r19
    7a9e:	21 95       	neg	r18
    7aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    7aa2:	4f 4f       	sbci	r20, 0xFF	; 255
    7aa4:	5f 4f       	sbci	r21, 0xFF	; 255

00007aa6 <__divmodsi4_exit>:
    7aa6:	08 95       	ret

00007aa8 <__divmodsi4_neg1>:
    7aa8:	f6 f7       	brtc	.-4      	; 0x7aa6 <__divmodsi4_exit>
    7aaa:	90 95       	com	r25
    7aac:	80 95       	com	r24
    7aae:	70 95       	com	r23
    7ab0:	61 95       	neg	r22
    7ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    7ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    7ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ab8:	08 95       	ret

00007aba <__prologue_saves__>:
    7aba:	2f 92       	push	r2
    7abc:	3f 92       	push	r3
    7abe:	4f 92       	push	r4
    7ac0:	5f 92       	push	r5
    7ac2:	6f 92       	push	r6
    7ac4:	7f 92       	push	r7
    7ac6:	8f 92       	push	r8
    7ac8:	9f 92       	push	r9
    7aca:	af 92       	push	r10
    7acc:	bf 92       	push	r11
    7ace:	cf 92       	push	r12
    7ad0:	df 92       	push	r13
    7ad2:	ef 92       	push	r14
    7ad4:	ff 92       	push	r15
    7ad6:	0f 93       	push	r16
    7ad8:	1f 93       	push	r17
    7ada:	cf 93       	push	r28
    7adc:	df 93       	push	r29
    7ade:	cd b7       	in	r28, 0x3d	; 61
    7ae0:	de b7       	in	r29, 0x3e	; 62
    7ae2:	ca 1b       	sub	r28, r26
    7ae4:	db 0b       	sbc	r29, r27
    7ae6:	0f b6       	in	r0, 0x3f	; 63
    7ae8:	f8 94       	cli
    7aea:	de bf       	out	0x3e, r29	; 62
    7aec:	0f be       	out	0x3f, r0	; 63
    7aee:	cd bf       	out	0x3d, r28	; 61
    7af0:	09 94       	ijmp

00007af2 <__epilogue_restores__>:
    7af2:	2a 88       	ldd	r2, Y+18	; 0x12
    7af4:	39 88       	ldd	r3, Y+17	; 0x11
    7af6:	48 88       	ldd	r4, Y+16	; 0x10
    7af8:	5f 84       	ldd	r5, Y+15	; 0x0f
    7afa:	6e 84       	ldd	r6, Y+14	; 0x0e
    7afc:	7d 84       	ldd	r7, Y+13	; 0x0d
    7afe:	8c 84       	ldd	r8, Y+12	; 0x0c
    7b00:	9b 84       	ldd	r9, Y+11	; 0x0b
    7b02:	aa 84       	ldd	r10, Y+10	; 0x0a
    7b04:	b9 84       	ldd	r11, Y+9	; 0x09
    7b06:	c8 84       	ldd	r12, Y+8	; 0x08
    7b08:	df 80       	ldd	r13, Y+7	; 0x07
    7b0a:	ee 80       	ldd	r14, Y+6	; 0x06
    7b0c:	fd 80       	ldd	r15, Y+5	; 0x05
    7b0e:	0c 81       	ldd	r16, Y+4	; 0x04
    7b10:	1b 81       	ldd	r17, Y+3	; 0x03
    7b12:	aa 81       	ldd	r26, Y+2	; 0x02
    7b14:	b9 81       	ldd	r27, Y+1	; 0x01
    7b16:	ce 0f       	add	r28, r30
    7b18:	d1 1d       	adc	r29, r1
    7b1a:	0f b6       	in	r0, 0x3f	; 63
    7b1c:	f8 94       	cli
    7b1e:	de bf       	out	0x3e, r29	; 62
    7b20:	0f be       	out	0x3f, r0	; 63
    7b22:	cd bf       	out	0x3d, r28	; 61
    7b24:	ed 01       	movw	r28, r26
    7b26:	08 95       	ret

00007b28 <_exit>:
    7b28:	f8 94       	cli

00007b2a <__stop_program>:
    7b2a:	ff cf       	rjmp	.-2      	; 0x7b2a <__stop_program>
